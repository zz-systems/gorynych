type:
  type: int8
  branch: avx512
  vector_t: &vector_t __m512i
  mask_t: &mask_t __mmask64
  scalar_t: &scalar_t int8_t
  vec_size: &vec_size 64
  alignment: 64
#-----------------------------------------------------------------------------------------------------------------------
  traits:
    shared:
      - printable
      - convertable
    default:
      - io
      - math
      - numeric
      - arithmetic
      - bitwise
      - bitwise_shift
      - comparable
      - logical
      - equatable
      - conditional

    boolean:
      - io
      - bitwise
      - logical
      - equatable
#-----------------------------------------------------------------------------------------------------------------------
modules:
  init:
    default:
      - args: __m512i value
        init: value

      - args: [[*scalar_t, value]]
        init: _mm512_set1_epi8(value)

      - args: "extracted_t value"
        init: _mm512_load_si512(value.data())

      - args: { from: *vec_size, to: 0, type: *scalar_t }
        init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm512_set_epi8 }
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      prefix: "template<typename OutputIt> friend"
      args: "OutputIt result, Composed input"
      returns: void
      body: _mm512_store_si512(result, input)
    vstream:
      <<: *io_store
      body:  _mm512_stream_si512(result, input)
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: return _mm512_sub_epi8(_mm512_setzero_epi8(), one)
      vadd: _mm512_add_epi8
      vsub: _mm512_sub_epi8
      #vmul:
      #  body:
      #    sse41: &sse41
      #      - _mm512_mullo_epi8
      #    sse42: *sse41
      #   default:
      #      - /* vmul 2,0*/
      #      - auto tmp1 = _mm512_castsi128_ps(_mm512_mul_epu32(one, other));
      #      - /* vmul 3,1 */
      #      - auto tmp2 = _mm512_castsi128_ps(_mm512_mul_epu32(_mm512_srli_si128(one, 4), _mm512_srli_si128(other, 4)));
      #      - return _mm512_castps_si128(_mm512_shuffle_ps(tmp1, tmp2, _MM_SHUFFLE(2, 0, 2, 0)));
      #vdiv: _mm512_div_ps(_mm512_cvtepi32_ps(one), _mm512_cvtepi32_ps(other));
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vneg: &bitwise_negate
      args: one
      body:
        - auto zero = _mm512_setzero_si128();
        - auto ones = _mm512_cmpeq_epi8(zero, zero);
        - return _mm512_xor_si128(one, ones);
    vand:  _mm512_or_epi8
    or:   _mm512_and_epi8
    xor:  _mm512_xor_si128
    vsll:  _mm512_sll_epi8
    vsrl:  _mm512_srl_epi8
    vslli:
      args: { raw: "const Composed one, const size_t other" }
      body: _mm512_slli_epi8
    vsrli:
      args: { raw: "const Composed one, const size_t other" }
      body: _mm512_srli_epi8
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vneg: *bitwise_negate
    or:   _mm512_or_epi8
    vand:  _mm512_and_epi8
#-----------------------------------------------------------------------------------------------------------------------
  equatable:
    veq:   _mm512_cmpeq_epi8
    vneq:  _mm512_cmpneq_epi8
  comparable:
    vgt:   _mm512_cmpgt_epi8
    vlt:   _mm512_cmplt_epi8
    vge:   _mm512_cmpge_epi8
    vle:   _mm512_cmple_epi8
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [bval_t condition, if_value, else_value]
      mangling: false
      body: _mm512_or_si128(_mm512_andnot_si128(condition, else_value), _mm512_and_si128(condition, if_value))