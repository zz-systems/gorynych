type:
  type: int16
  branch: sse
  vector_t: &vector_t __m128i
  mask_t: &mask_t __m128i
  scalar_t: &scalar_t int16_t
  vec_size: &vec_size 8
  alignment: 16
#-----------------------------------------------------------------------------------------------------------------------
  traits:
    shared:
      - printable
      - iteratable
      - convertable
    default:
      - io
      - math
      - numeric
      - arithmetic
      - bitwise
      - bitwise_shift
      - comparable
      - logical
      - equatable
      - conditional

    boolean:
      - io
      - bitwise
      - logical
      - equatable
#-----------------------------------------------------------------------------------------------------------------------
modules:
  init:
    default:
      - args: __m128i value
        init: value

      - args: short value
        init: _mm_set1_epi16(value)

      - args: "const std::array<typename zval_traits<Base>::element_t, zval_traits<Base>::size> &value"
        init: _mm_loadu_si128((__m128i *) value.data())

      - args: { from: *vec_size, to: 0, type: *scalar_t }
        init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm_set_epi16 }

    boolean:
      - args: zval_t value
        init: value

      - args: bval_t value, last_operation last_op
        init: value, last_op
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      prefix: "template<typename OutputIt> friend"
      args: "OutputIt result, Composed input"
      returns: void
      body: _mm_storeu_si128((__m128i*)&(*result), input)
    vstream:
      <<: *io_store
      body:  _mm_stream_si128((__m128i*)&(*result), input)
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  math:
      vabs:
        args: one
        body:
          sse4:
            requires: [SSE3]
            body: _mm_abs_epi16
          default:
            requires: [not SSE3]
            body: vmax(one, -one);
      vmin:
        body:
          sse4:
            requires: [SSE41]
            body: _mm_min_epi16
          default:
            requires: [not SSE41]
            body: vsel(one < other, one, other);
      vmax:
        body:
          sse4:
            requires: [SSE41]
            body: _mm_max_epi16
          default:
            requires: [not SSE41]
            body: vsel(one > other, one, other);

      vclamp:
       args: [self, from, to]
       body: vmin(to, vmax(from, self))
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: return _mm_sub_epi16(_mm_setzero_si128(), one)
    vadd: _mm_add_epi16
    vsub: _mm_sub_epi16
    vmul: _mm_mullo_epi16
    vdiv:
      body:
        - auto dividend = one.data();
        - auto divisor = other.data();
        - typename Composed::extracted_t result;
        - for (size_t i = 0; i < Composed::size(); i++) { result[i] = dividend[i] / divisor[i]; }
        - return result;
    vmod: vsub(one, vmul(other, vdiv(one, other)))
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg: &bitwise_negate
      args: one
      body:
        - auto zero = _mm_setzero_si128();
        - auto ones = _mm_cmpeq_epi16(zero, zero);
        - return _mm_xor_si128(one, ones);
    vbor:   &bitwise_or
      body: _mm_or_si128
    vband:  &bitwise_and
      body: _mm_and_si128
    vbxor:  &bitwise_xor
      body: _mm_xor_si128

    is_set:
      args: one
      returns: bool
      body:
        sse4:
          requires: [SSE41]
          body: _mm_test_all_ones(one) != 0
        default:
          requires: [not SSE41]
          body:
            - auto zero = _mm_setzero_si128();
            - auto ones = _mm_cmpeq_epi32(zero, zero);
            - return _mm_movemask_epi8(_mm_cmpeq_epi16(one, ones)) == 0xFFFF
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    vbsll:  _mm_sll_epi16
    vbsrl:  _mm_srl_epi16
    vbslli:
      args: { raw: "const Composed one, const size_t other" }
      body: "_mm_slli_epi16(one, other)"
    vbsrli:
      args: { raw: "const Composed one, const size_t other" }
      body: "_mm_srli_epi16(one, other)"
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: _mm_cmpeq_epi16(one, _mm_setzero_si128());
    vlor:
      <<: *bitwise_or
      #returns: boolvec<Composed>
    vland:
      <<: *bitwise_and
      #returns: boolvec<Composed>
#-----------------------------------------------------------------------------------------------------------------------
  equatable:
    veq:   _mm_cmpeq_epi16
    vneq:  "!(one == other)"
  comparable:
    vgt:   _mm_cmpgt_epi16
    vlt:   _mm_cmplt_epi16
    vge:   "!(one < other)"
    vle:   "!(one > other)"
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [bval_t condition, if_value, else_value]
      mangling: false
      body:
        sse4:
          requires: [SSE41]
          body:
            - return _mm_blendv_epi8(else_value, if_value, condition);
        default:
          requires: [not SSE41]
          body:
            - return _mm_or_si128(_mm_andnot_si128(condition, else_value), _mm_and_si128(condition, if_value))