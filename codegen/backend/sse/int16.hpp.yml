type:
  type: int16
  branch: sse
  vector_t: &vector_t __m128i
  mask_t: &mask_t __m128i
  scalar_t: &scalar_t int16_t
  vec_size: &vec_size 8
  alignment: 16
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
      - convertable
     internal:
       - io
       - arithmetic
       - bitwise
       - bitwise_shift
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: __m128i value
      init: value

    - args: short value
      init: _mm_set1_epi16(value)

    - args: "std::array<typename base_t::scalar_t, base_t::dim> value"
      init: _mm_load_si128((__m128i *) value.data())

    - args: { from: *vec_size, to: 0, type: *scalar_t }
      init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm_set_epi16 }
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      args: { raw: "typename base_t::extracted_t &target, composed_t source" }
      returns: void
      body: _mm_store_si128((__m128i*)target.data(), source)
    vstream:
      <<: *io_store
      body:  _mm_stream_si128((__m128i*)target.data(), source)
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: return _mm_sub_epi16(_mm_setzero_si128(), one)
    vadd: _mm_add_epi16
    vsub: _mm_sub_epi16
    vmul: _mm_mullo_epi16
    #vdiv: _mm_div_ps(_mm_cvtepi32_ps(one), _mm_cvtepi32_ps(other));
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg: &bitwise_negate
      args: one
      body:
        - __m128i junk;
        - auto ones = _mm_cmpeq_epi16(junk, junk);
        - return _mm_xor_si128(one, ones);
    vbor:   &bitwise_or
      body: _mm_or_si128
    vband:  &bitwise_and
      body: _mm_and_si128
    vbxor:  &bitwise_xor
      body: _mm_xor_si128
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    vbsll:  _mm_sll_epi16
    vbsrl:  _mm_srl_epi16
    vbslli:
      args: { raw: "const composed_t one, const size_t other" }
      body: "_mm_slli_epi16(one, other)"
    vbsrli:
      args: { raw: "const composed_t one, const size_t other" }
      body: "_mm_srli_epi16(one, other)"
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: _mm_cmpeq_epi16(one, _mm_setzero_si128());
    vlor:
      <<: *bitwise_or
      #returns: boolvec<composed_t>
    vland:
      <<: *bitwise_and
      #returns: boolvec<composed_t>
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   _mm_cmpeq_epi16
    vneq:  "!(one == other)"
    vgt:   _mm_cmpgt_epi16
    vlt:   _mm_cmplt_epi16
    vge:   "!(one < other)"
    vle:   "!(one > other)"
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [condition, if_value, else_value]
      mangling: false
      body:
        #sse41: &sse41
        #  - auto mask = _mm_cmpeq_epi16(_mm_setzero_si128(), condition);
        #  - return _mm_blendv_epi8(if_value, else_value, mask);
        #sse42: *sse41
        #default:
          return _mm_or_si128(_mm_andnot_si128(condition, else_value), _mm_and_si128(condition, if_value))