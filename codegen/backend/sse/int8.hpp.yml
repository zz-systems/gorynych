type:
  type: int8
  branch: sse
  vector_t: &vector_t __m128i
  mask_t: &mask_t __m128i
  scalar_t: &scalar_t char
  vec_size: &vec_size 16
  alignment: 16
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
      - convertable
     internal:
       - io
       - arithmetic
       - bitwise
       #- bitwise_shift
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: __m128i value
      init: value

    - args: [[*scalar_t, value]]
      init: _mm_set1_epi8(value)

    - args: [[*scalar_t, "*value"]]
      init: _mm_load_si128((__m128i*)value)

    - args: { from: *vec_size, to: 0, type: *scalar_t }
      init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm_set_epi8 }
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      args: { raw: "typename base_t::extracted_t &target, composed_t source" }
      returns: void
      body: _mm_store_si128((__m128i*)target.data(), source)
    vstream:
      <<: *io_store
      body:  _mm_stream_si128((__m128i*)target.data(), source)
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: return _mm_sub_epi8(_mm_setzero_si128(), one)
    vadd: _mm_add_epi8
    vsub: _mm_sub_epi8
    #vmul:
    #  body:
    #    sse41: &sse41
    #      - _mm_mullo_epi8
    #    sse42: *sse41
    #   default:
    #      - /* vmul 2,0*/
    #      - auto tmp1 = _mm_castsi128_ps(_mm_mul_epu32(one, other));
    #      - /* vmul 3,1 */
    #      - auto tmp2 = _mm_castsi128_ps(_mm_mul_epu32(_mm_srli_si128(one, 4), _mm_srli_si128(other, 4)));
    #      - return _mm_castps_si128(_mm_shuffle_ps(tmp1, tmp2, _MM_SHUFFLE(2, 0, 2, 0)));
    #vdiv: _mm_div_ps(_mm_cvtepi32_ps(one), _mm_cvtepi32_ps(other));
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg: &bitwise_negate
      args: one
      body:
        - __m128i junk;
        - auto ones = _mm_cmpeq_epi8(junk, junk);
        - return _mm_xor_si128(one, ones);
    vbor:   &bitwise_or
      body: _mm_or_si128
    vband:  &bitwise_and
      body: _mm_and_si128
    vbxor:  &bitwise_xor
      body: _mm_xor_si128
#-----------------------------------------------------------------------------------------------------------------------
#  bitwise_shift:
#    vsll:  _mm_sll_epi8
#    vsrl:  _mm_srl_epi8
#    vslli:
#      args: { raw: "const composed_t one, const size_t other" }
#      body: "_mm_slli_epi8(one, other)"
#    vsrli:
#      args: { raw: "const composed_t one, const size_t other" }
#      body: "_mm_srli_epi8(one, other)"
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: _mm_cmpeq_epi8(one, _mm_setzero_si128());
    vlor:
      <<: *bitwise_or
      #returns: boolvec<composed_t>
    vland:
      <<: *bitwise_and
      #returns: boolvec<composed_t>
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   _mm_cmpeq_epi8
    vneq:  "!(one == other)"
    vgt:   _mm_cmpgt_epi8
    vlt:   _mm_cmplt_epi8
    vge:   "!(one < other)"
    vle:   "!(one > other)"
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [condition, if_value, else_value]
      mangling: false
      body:
        #sse41: &sse41
        #  - auto mask = _mm_cmpeq_epi8(_mm_setzero_si128(), condition);
        #  - return _mm_blendv_epi8(if_value, else_value, mask);
        #sse42: *sse41
        #default:
          return _mm_or_si128(_mm_andnot_si128(condition, else_value), _mm_and_si128(condition, if_value))