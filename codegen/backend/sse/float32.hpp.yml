type:
  type: float32
  branch: sse
  vector_t: &vector_t __m128
  mask_t: &mask_t __m128
  scalar_t: &scalar_t float
  vec_size: &vec_size 4
  alignment: 16
#-----------------------------------------------------------------------------------------------------------------------
  traits:
    shared:
      - printable
      - convertable
    default:
      - io
      - math
      - numeric
      - arithmetic
      - bitwise
      - comparable
      - logical
      - equatable
      - conditional

    boolean:
      - io
      - bitwise
      - logical
      - equatable
#-----------------------------------------------------------------------------------------------------------------------
modules:
  init:
    default:
      - args: __m128 value
        init: value

      - args: __m128d value
        init: _mm_cvtpd_ps(value)

      - args: __m128i value
        init: _mm_cvtepi32_ps(value)

      - args: [[*scalar_t, value]]
        init: _mm_set1_ps(value)

      #- args: T value #[[*scalar_t, value]]
      #  prefix: "template<typename T, typename = typename std::enable_if_t<std::is_convertible<T, float>::value>>"
      #  init: _mm_set1_ps((float)value)

      - args: "extracted_t value"
        init: _mm_load_ps(value.data())

      - args: { from: *vec_size, to: 0, type: *scalar_t }
        init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm_set_ps }

    boolean:
      - args: zval_t value
        init: value

      - args: bval_t value, last_operation last_op
        init: value, last_op
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      prefix: "template<typename OutputIt> friend"
      args: "OutputIt result, Composed input"
      returns: void
      body: _mm_store_ps(&(*result), input)
    vstream:
      <<: *io_store
      body:  _mm_stream_ps(&(*result), input)

    vgather:
      prefix: "template<typename RandomIt> friend"
      args:   "RandomIt input, const zint32<Base::features> &index, Composed"
      body:
        - auto i = index.data();
        - return _mm_set_ps(input[i[3]], input[i[2]], input[i[1]], input[i[0]]);

#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  math:
    vabs:
      args: one
      body: _mm_max_ps(one, -one)

    vmin: _mm_min_ps
    vmax: _mm_max_ps

    vclamp:
     args: [self, from, to]
     body: vmin(to, vmax(from, self))

    vrcp:
      args: one
      #body: _mm_rcp_ps
      body: "return (1 / one);" #bug in automatic arg insertion
    vtrunc:
      args: one
      body: _mm_cvtepi32_ps(_mm_cvttps_epi32(one))
    vfloor:
      args: one
      body:
        sse4:
          requires: [SSE41]
          body: _mm_floor_ps
        default:
          requires: [not SSE41]
          body:
            - auto zero = _mm_setzero_si128();
            - auto _1  = _mm_srli_epi32(_mm_cmpeq_epi32(zero, zero), 31);
            - auto fi = vtrunc(one);
            - return vsel(vgt(fi, one), vsub(fi, _1), fi);
    vceil:
      args: one
      body:
        sse4:
          requires: [SSE41]
          body: _mm_ceil_ps
        default:
          requires: [not SSE41]
          body:
            - auto zero = _mm_setzero_si128();
            - auto _1  = _mm_srli_epi32(_mm_cmpeq_epi32(zero, zero), 31);
            - auto fi = vtrunc(one);
            - return vsel(vlt(fi, one), vadd(fi, _1), fi);
    vround:
      args: one
      body:
        sse4:
          requires: [SSE41]
          body: _mm_round_ps (one, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC)
        default:
          requires: [not SSE41]
          body:
            - auto zero = _mm_setzero_si128();
            - auto ones = _mm_cmpeq_epi32(zero, zero);
            - // generate the highest value < 2
            - auto nearest = _mm_castsi128_ps(_mm_srli_epi32(ones, 2));
            - auto tr = vtrunc(one);
            - // get remainder
            - auto rmd = one - tr;
            - // mul remainder by near 2 will yield the needed offset
            - auto rmd2 = vmul(rmd, nearest);
            - // after being truncated of course
            - auto rmd2tr = vtrunc(rmd2);
            - return tr + rmd2tr;

    vsqrt:
      args: one
      body: _mm_sqrt_ps
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: return _mm_sub_ps(_mm_setzero_ps(), one)
    vadd: _mm_add_ps
    vsub: _mm_sub_ps
    vmul: _mm_mul_ps
    vdiv: _mm_div_ps
    vfmadd:
      args: [multiplicand, multiplier, addendum]
      body:
        fma:
          requires: [FMA3]
          body: _mm_fmadd_ps(multiplicand, multiplier, addendum)
        default:
          requires: [not FMA3]
          body: vadd(vmul(multiplicand, multiplier), addendum)
    vfmsub:
      args: [multiplicand, multiplier, addendum]
      body:
        fma:
          requires: [FMA3]
          body: _mm_fmsub_ps(multiplicand, multiplier, addendum)
        default:
          requires: [not FMA3]
          body: vsub(vmul(multiplicand, multiplier), addendum)
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg: &bitwise_negate_prototype
      args: one
      body:
        - auto zero = _mm_setzero_ps();
        - auto ones = _mm_cmpeq_ps(zero, zero);
        - return _mm_xor_ps(one, ones);
    vband:  _mm_and_ps
    vbor:   _mm_or_ps
    vbxor:  _mm_xor_ps

    is_set:
      args: one
      returns: bool
      body:
        sse4:
          requires: [SSE41]
          body: _mm_test_all_ones(_mm_castps_si128(one)) != 0
        default:
          requires: [not SSE41]
          body:
            - auto zero = _mm_setzero_ps();
            - auto ones = _mm_cmpeq_ps(zero, zero);
            - return _mm_movemask_ps(_mm_cmpeq_ps(one, ones)) == 0xFFFF
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: _mm_cmpeq_ps(one, _mm_setzero_ps());
    vlor:
      body: _mm_or_ps
      #returns: boolvec<Composed>
    vland:
      body: _mm_and_ps
      #returns: boolvec<Composed>
#-----------------------------------------------------------------------------------------------------------------------
  equatable:
    veq:   _mm_cmpeq_ps
    vneq:  _mm_cmpneq_ps
  comparable:
    vgt:   _mm_cmpgt_ps
    vlt:   _mm_cmplt_ps
    vge:   _mm_cmpge_ps
    vle:   _mm_cmple_ps
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: ["bval_t condition", if_value, else_value]
      mangling: false
      body:
        sse4:
          requires: [SSE41]
          body:
            - return _mm_blendv_ps(else_value, if_value, condition);
        default:
          requires: [not SSE41]
          body:
          - return _mm_or_ps(_mm_andnot_ps(condition, else_value), _mm_and_ps(condition, if_value))
          #- return _mm_xor_ps(if_value, _mm_and_ps(condition, _mm_xor_ps(else_value, if_value)))