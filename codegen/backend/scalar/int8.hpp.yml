type:
  type: int8
  branch: scalar
  vector_t: &vector_t uint8_t
  scalar_t: &scalar_t uint8_t
  vec_size: &vec_size 1
  alignment: 8
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
      - convertable
     internal:
       - io
       - numeric
       - arithmetic
       - bitwise
       - bitwise_shift
       #- logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: []
      init: ""

    - args: [[*scalar_t, value]]
      init: value
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      returns: void
      args: { raw: "typename base_t::extracted_t &target, composed_t source" }
      body: target.data()[0] = source.get_value();
    vstream: *io_store
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: (-one);
    vadd: (one + other);
    vsub: (one - other);
    vmul: (one * other);
    vdiv: (one / other);
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg:
      args: one
      body: (~one);
    vband:  (one & other);
    vbor:   (one | other);
    vbxor:  (one ^ other);
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    vbsll:  (one << other)
    vbsrl:  (one >> other)
#-----------------------------------------------------------------------------------------------------------------------
#  logical:
#    vneg:
#      args: one
#      body: "!one"
#    or:   one || other;
#    vand:  one && other;
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   (one == other);
    vneq:  (one != other);
    vgt:   (one > other);
    vlt:   (one < other);
    vge:   (one >= other);
    vle:   (one <= other);
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
     vsel:
        args: [condition, if_value, else_value]
        mangling: false
        body: "(condition.get_value() != 0 ? if_value : else_value)"