type:
  type: float64
  branch: scalar
  vector_t: &vector_t std::array<double, 1>
  mask_t: &mask_t std::array<bool, 1>
  scalar_t: &scalar_t double
  vec_size: &vec_size 1
  alignment: 16
#-----------------------------------------------------------------------------------------------------------------------
  traits:
    shared:
      - printable
    default:
      - io
      - math
      - numeric
      - arithmetic
      - bitwise
      - comparable
      # - logical
      - equatable
      - conditional

    boolean:
      - io
      - bitwise
      - logical
      - equatable
#-----------------------------------------------------------------------------------------------------------------------
modules:
  init:
    default:
      - args: double value
        init: "std::array<double, 1> {{value}}"

      - args: "extracted_type value"
        init: "value"

    boolean:
      - args: bool value
        init: "std::array<bool, 1> {{value}}"
      - args: zval_t value
        init: "std::array<bool, 1> {{ value.value() != 0 }}"
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      prefix: "template<typename OutputIt> friend"
      args: "OutputIt result, Composed input"
      returns: void
      body: result[0] = input.value();
    vstream: *io_store
    vgather:
      prefix: "template<typename RandomIt> friend"
      args:   "RandomIt input, const zint32<Interface::feature_mask> &index, Composed"
      body: return input[index.value()]
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  math:
    vabs:
      args: one
      body: std::abs(one.value())

    vmin: std::min(one.value(), other.value())
    vmax: std::max(one.value(), other.value())

    vclamp:
      args: [self, from, to]
      body: vmin(to, vmax(from, self))
    vrcp:
      args: one
      body: (1 / one.value())
    vtrunc:
      args: one
      body: std::trunc(one.value())
    vfloor:
      args: one
      body: std::floor(one.value())
    vceil:
      args: one
      body: std::ceil(one.value())
    vround:
      args: one
      body: std::round(one.value())
    vsqrt:
      args: one
      body: std::sqrt(one.value())
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: (-one.value());
    vadd: (one.value() + other.value());
    vsub: (one.value() - other.value());
    vmul: (one.value() * other.value());
    vdiv: (one.value() / other.value());
    vfmadd:
      args: [multiplicand, multiplier, addendum]
      #body: std::fma(multiplicand.value(), multiplier.value(), addendum.value())
      body: multiplicand.value() * multiplier.value() + addendum.value()
    vfmsub:
      args: [multiplicand, multiplier, addendum]
      #body: std::fma(multiplicand.value(), multiplier.value(), -addendum.value())
      body: multiplicand.value() * multiplier.value() - addendum.value()
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg:
      args: one
      body:
        - auto _one = one.value();
        - double result;
        - bitsof(result) = ~bitsof(_one);
        - return result;
    vband:
      body:
        - auto _one = one.value();
        - auto _other = other.value();
        - double result;
        - bitsof(result) = bitsof(_one) & bitsof(_other);
        - return result;
    vbor:
      body:
        - auto _one = one.value();
        - auto _other = other.value();
        - double result;
        - bitsof(result) = bitsof(_one) | bitsof(_other);
        - return result;
    vbxor:
      body:
        - auto _one = one.value();
        - auto _other = other.value();
        - double result;
        - bitsof(result) = bitsof(_one) ^ bitsof(_other);
        - return result;

    vis_set:
      args: one
      returns: bool
      body: one.value() != 0
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: (!one.value())
    vlor:  (one.value() || other.value());
    vland: (one.value() && other.value());
#-----------------------------------------------------------------------------------------------------------------------
  equatable:
    veq:   (one.value() == other.value());
    vneq:  (one.value() != other.value());
  comparable:
    vgt:   (one.value() > other.value());
    vlt:   (one.value() < other.value());
    vge:   (one.value() >= other.value());
    vle:   (one.value() <= other.value());
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [bval_t condition, if_value, else_value]
      mangling: false
      body: "(condition.value() ? if_value : else_value)"
#-----------------------------------------------------------------------------------------------------------------------
