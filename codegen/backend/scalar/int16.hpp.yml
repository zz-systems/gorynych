type:
  type: int16
  branch: scalar
  vector_t: &vector_t int16_t
  mask_t: &mask_t bool
  scalar_t: &scalar_t int16_t
  vec_size: &vec_size 1
  alignment: 16
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
      - convertable
     internal:
       - io
       - numeric
       - arithmetic
       - bitwise
       - bitwise_shift
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: [[*scalar_t, value]]
      init: value

    - prefix: "template <typename T, typename enable = std::enable_if_t<is_zval<T>::value || is_bval<T>::value>>"
      args: "const T &value"
      init: value.get_value()

    - args: "std::array<typename base_t::scalar_t, base_t::dim> value"
      init: "value[0]"
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      returns: void
      args: { raw: "typename base_t::extracted_t &target, composed_t source" }
      body: target.data()[0] = source.get_value();
    vstream: *io_store
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: (-one.get_value());
    vadd: (one.get_value() + other.get_value());
    vsub: (one.get_value() - other.get_value());
    vmul: (one.get_value() * other.get_value());
    vdiv: (one.get_value() / other.get_value());
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg:
      args: one
      body: (~one.get_value());
    vband:  (one.get_value() & other.get_value());
    vbor:   (one.get_value() | other.get_value());
    vbxor:  (one.get_value() ^ other.get_value());

    is_set:
      args: one
      returns: bool
      body: one.get_value() != 0
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    vbsll:  (one.get_value() << other.get_value())
    vbsrl:  (one.get_value() >> other.get_value())

    vbslli:
      args: { raw: "const composed_t one, const size_t other" }
      body: (one.get_value() << other)
    vbsrli:
      args: { raw: "const composed_t one, const size_t other" }
      body: (one.get_value() >> other)
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: (!one.get_value())
    vlor:  (one.get_value() || other.get_value());
    vland: (one.get_value() && other.get_value());
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   (one.get_value() == other.get_value());
    vneq:  (one.get_value() != other.get_value());
    vgt:   (one.get_value() > other.get_value());
    vlt:   (one.get_value() < other.get_value());
    vge:   (one.get_value() >= other.get_value());
    vle:   (one.get_value() <= other.get_value());
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
     vsel:
        args: [condition, if_value, else_value]
        mangling: false
        body: "(condition.get_value() != 0 ? if_value : else_value)"