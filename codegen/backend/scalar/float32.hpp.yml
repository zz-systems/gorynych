type:
  type: float32
  branch: scalar
  vector_t: &vector_t float
  mask_t: &mask_t bool
  scalar_t: &scalar_t float
  vec_size: &vec_size 1
  alignment: 16
#-----------------------------------------------------------------------------------------------------------------------
  traits:
    shared:
      - printable
      - iteratable
      - convertable
    default:
      - io
      - math
      - numeric
      - arithmetic
      - bitwise
      - comparable
      - logical
      - equatable
      - conditional

    boolean:
      - io
      - bitwise
      - logical
      - equatable
#-----------------------------------------------------------------------------------------------------------------------
modules:
  init:
    default:
      - args: [[*scalar_t, value]]
        init: value

      - prefix: "template <typename T, typename enable = std::enable_if_t<is_zval<T>::value || is_bval<T>::value>>"
        args: "const T &value"
        init: value.value()

      - args: "std::array<typename base_t::element_t, base_t::size()> value"
        init: "value[0]"

    boolean:
      - args: zval_t value
        init: value.value() != 0

      - args: bval_t value, last_operation last_op
        init: value, last_op
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      prefix: "template<typename OutputIt> friend"
      args: "OutputIt result, composed_t input"
      returns: void
      body: result[0] = input.value();
    vstream: *io_store

    vgather:
      prefix: "template<typename RandomIt> friend"
      args:   "RandomIt input, const zint32<base_t::features> &index, composed_t"
      body: return input[index.value()]
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  math:
    vabs:
      args: one
      body: std::abs(one.value())

    vmin: std::min(one.value(), other.value())
    vmax: std::max(one.value(), other.value())

    vclamp:
      args: [self, from, to]
      body: vmin(to, vmax(from, self))

    vrcp:
      args: one
      body: (1 / one.value())
    vtrunc:
      args: one
      body: std::trunc(one.value())
    vfloor:
      args: one
      body: std::floor(one.value())
    vceil:
      args: one
      body: std::ceil(one.value())
    vround:
      args: one
      body: std::round(one.value())
    vsqrt:
      args: one
      body: std::sqrt(one.value())
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: (-one.value());
    vadd: (one.value() + other.value());
    vsub: (one.value() - other.value());
    vmul: (one.value() * other.value());
    vdiv: (one.value() / other.value());
    vfmadd:
      args: [multiplicand, multiplier, addendum]
      #body: std::fma(multiplicand.value(), multiplier.value(), addendum.value())
      body: multiplicand.value() * multiplier.value() + addendum.value()
    vfmsub:
      args: [multiplicand, multiplier, addendum]
      #body: std::fma(multiplicand.value(), multiplier.value(), -addendum.value())
      body: multiplicand.value() * multiplier.value() - addendum.value()
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg:
      args: one
      body:
        - auto _one = one.value();
        - float result;
        - bitsof(result) = ~bitsof(_one);
        - return result;
    vband:
      body:
        - auto _one = one.value();
        - auto _other = other.value();
        - float result;
        - bitsof(result) = bitsof(_one) & bitsof(_other);
        - return result;
    vbor:
      body:
        - auto _one = one.value();
        - auto _other = other.value();
        - float result;
        - bitsof(result) = bitsof(_one) | bitsof(_other);
        - return result;
    vbxor:
      body:
        - auto _one = one.value();
        - auto _other = other.value();
        - float result;
        - bitsof(result) = bitsof(_one) ^ bitsof(_other);
        - return result;

    is_set:
      args: one
      returns: bool
      body: one.value() != 0
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: "!one.value()"
    vlor:   (one.value() || other.value());
    vland:  (one.value() && other.value());
#-----------------------------------------------------------------------------------------------------------------------
  equatable:
    veq:   (one.value() == other.value());
    vneq:  (one.value() != other.value());
  comparable:
    vgt:   (one.value() > other.value());
    vlt:   (one.value() < other.value());
    vge:   (one.value() >= other.value());
    vle:   (one.value() <= other.value());
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [bval_t condition, if_value, else_value]
      mangling: false
      body: "(condition.value() ? if_value : else_value)"
#-----------------------------------------------------------------------------------------------------------------------
