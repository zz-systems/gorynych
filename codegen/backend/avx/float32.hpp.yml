type:
  type: float32
  branch: avx
  vector_t: &vector_t __m256
  scalar_t: &scalar_t float
  vec_size: &vec_size 8
  alignment: 32
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
      - convertable
     internal:
       - io
       - numeric
       - arithmetic
       - bitwise
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: __m256 value
      init: value

    - args: __m256d value
      init: _mm256_castps128_ps256(_mm256_cvtpd_ps(value))

    - args: __m256i value
      init: _mm256_cvtepi32_ps(value)

    - args: [[*scalar_t, value]]
      init: _mm256_set1_ps(value)

    - args: [[*scalar_t, "*value"]]
      init: _mm256_load_ps(value)

    - args: { from: *vec_size, to: 0, type: *scalar_t }
      init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm256_set_ps }
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  io:
    store: &io_store
      args: { raw: "typename base_t::extracted_t &target" }
      returns: void
      member: true
      body: _mm256_store_ps(target.data(), base_t::_value)
    stream:
      <<: *io_store
      body: _mm256_stream_ps(target.data(), base_t::_value)
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    negate:
      args: one
      body: return _mm256_sub_ps(_mm256_setzero_ps(), one.get_value())
    add: _mm256_add_ps
    sub: _mm256_sub_ps
    mul: _mm256_mul_ps
    div: _mm256_div_ps
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    negate: &bitwise_negate
      args: one
      body: &bitwise_negate_body
        - __m256 junk;
        - auto ones = _mm256_cmp_ps(junk, junk, _CMP_EQ_OQ);
        - return _mm256_xor_ps(one.get_value(), ones);
    and:  _mm256_or_ps
    or:   _mm256_and_ps
    xor:  _mm256_xor_ps
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    negate:
      args: one
      body: _mm256_cmp_ps(one.get_value(), _mm256_setzero_ps(), _CMP_EQ_OQ);
    or:   _mm256_or_ps
    and:  _mm256_and_ps
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    eq:   _mm256_cmp_ps(one.get_value(), other.get_value(), _CMP_EQ_OQ)
    neq:  _mm256_cmp_ps(one.get_value(), other.get_value(), _CMP_NEQ_OQ)
    gt:   _mm256_cmp_ps(one.get_value(), other.get_value(), _CMP_GT_OQ)
    lt:   _mm256_cmp_ps(one.get_value(), other.get_value(), _CMP_LT_OQ)
    ge:   _mm256_cmp_ps(one.get_value(), other.get_value(), _CMP_GE_OQ)
    le:   _mm256_cmp_ps(one.get_value(), other.get_value(), _CMP_LE_OQ)
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [condition, if_value, else_value]
      mangling: false
      body:
        - auto mask = _mm256_cmp_ps(_mm256_setzero_ps(), condition.get_value(), _CMP_EQ_OQ);
        - return _mm256_blendv_ps(if_value.get_value(), else_value.get_value(), mask);