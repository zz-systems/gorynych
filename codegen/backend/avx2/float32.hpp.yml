type:
  type: float32
  branch: avx2
  vector_t: &vector_t __m256
  mask_t: &mask_t __m256
  scalar_t: &scalar_t float
  vec_size: &vec_size 8
  alignment: 32
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
      - convertable
     internal:
       - io
       - math
       - numeric
       - arithmetic
       - bitwise
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: __m256 value
      init: value

    - args: __m256d value
      init: _mm256_castps128_ps256(_mm256_cvtpd_ps(value))

    - args: __m256i value
      init: _mm256_cvtepi32_ps(value)

    - args: [[*scalar_t, value]]
      init: _mm256_set1_ps(value)

    - args: "std::array<typename base_t::scalar_t, base_t::dim> value"
      init: _mm256_loadu_ps(value.data())

    - args: { from: *vec_size, to: 0, type: *scalar_t }
      init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm256_set_ps }
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      args: { raw: "typename base_t::extracted_t &target, composed_t source" }
      returns: void
      body: _mm256_store_ps(target.data(), source)
    vstream:
      <<: *io_store
      body: _mm256_stream_ps(target.data(), source)

    vgather:
      args: { raw: "composed_t &target, raw_ptr<const float> source, zint32<base_t::capability> index" }
      #args: { raw: "composed_t &target, raw_ptr<const float> source, T index" }
      #prefix: "template<typename T> friend "
      body: _mm256_i32gather_ps(source, index, 4)
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  math:
    vabs:
      args: one
      body: _mm256_max_ps(one, _mm256_sub_ps(_mm256_setzero_ps(), one))

    vmin: _mm256_min_ps
    vmax: _mm256_max_ps

    vclamp:
     args: [self, from, to]
     body: vmin(to, vmax(from, self))

    vrcp:
      args: one
      body: _mm256_rcp_ps
    vtrunc:
      args: one
      body: _mm256_cvtepi32_ps(_mm256_cvtps_epi32(one))
    vfloor:
      args: one
      body: _mm256_floor_ps
    vceil:
      args: one
      body: _mm256_ceil_ps
    vround:
      args: one
      body: _mm256_round_ps (one, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC)
    vsqrt:
      args: one
      body: _mm256_sqrt_ps
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: return _mm256_sub_ps(_mm256_setzero_ps(), one)
    vadd: _mm256_add_ps
    vsub: _mm256_sub_ps
    vmul: _mm256_mul_ps
    vdiv: _mm256_div_ps
    vfmadd:
      args: [multiplicand, multiplier, addendum]
      body: _mm256_fmadd_ps (multiplicand, multiplier, addendum)
    vfmsub:
      args: [multiplicand, multiplier, addendum]
      body: _mm256_fmsub_ps(multiplicand, multiplier, addendum)
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg: &bitwise_negate
      args: one
      body: &bitwise_negate_body
        - __m256 junk;
        - auto ones = _mm256_cmp_ps(junk, junk, _CMP_EQ_OQ);
        - return _mm256_xor_ps(one, ones);
    vband:  _mm256_or_ps
    vbor:   _mm256_and_ps
    vbxor:  _mm256_xor_ps

    is_set:
      args: one
      returns: bool
      body:
        avx2:
          requires: [AVX2]
          body:
            - auto ival =  _mm256_castps_si256(one);
            - return _mm256_testc_si256(ival, _mm256_cmpeq_epi32(ival,ival));
        default:
          requires: [not AVX2]
          body:
            - auto hi = _mm_castps_si128(_mm256_extractf128_ps(one, 1));
            - auto lo = _mm_castps_si128(_mm256_extractf128_ps(one, 0));
            - return _mm_test_all_ones(hi) != 0 && _mm_test_all_ones(lo) != 0;
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: _mm256_cmp_ps(one, _mm256_setzero_ps(), _CMP_EQ_OQ);
    vlor:   _mm256_or_ps
    vland:  _mm256_and_ps
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   _mm256_cmp_ps(one, other, _CMP_EQ_OQ)
    vneq:  _mm256_cmp_ps(one, other, _CMP_NEQ_OQ)
    vgt:   _mm256_cmp_ps(one, other, _CMP_GT_OQ)
    vlt:   _mm256_cmp_ps(one, other, _CMP_LT_OQ)
    vge:   _mm256_cmp_ps(one, other, _CMP_GE_OQ)
    vle:   _mm256_cmp_ps(one, other, _CMP_LE_OQ)
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [condition, if_value, else_value]
      mangling: false
      body:
        - auto mask = _mm256_cmp_ps(_mm256_setzero_ps(), condition, _CMP_EQ_OQ);
        - return _mm256_blendv_ps(if_value, else_value, mask);