type:
  type: int32
  branch: avx2
  vector_t: &vector_t __m256i
  mask_t: &mask_t __m256i
  scalar_t: &scalar_t int32_t
  vec_size: &vec_size 8
  alignment: 32
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
      - convertable
     internal:
       - io
       - math
       - numeric
       - arithmetic
       - bitwise
       - bitwise_shift
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: __m256 value
      init: _mm256_cvttps_epi32(value)

    - args: __m256d value
      init: _mm256_castsi128_si256(_mm256_cvttpd_epi32(value))

    - args: __m256i value
      init: value

    - args: [[*scalar_t, value]]
      init: _mm256_set1_epi32(value)

    - args: "std::array<typename base_t::element_t, base_t::size()> value"
      init: _mm256_loadu_si256((__m256i*)value.data())

    - args: { from: *vec_size, to: 0, type: *scalar_t }
      init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm256_set_epi32 }
#-----------------------------------------------------------------------------------------------------------------------
  io:
    vstore: &io_store
      prefix: "template<typename OutputIt> friend"
      args: "OutputIt result, composed_t input"
      returns: void
      body: _mm256_storeu_si256((__m256i*)result, input);
    vstream:
      <<: *io_store
      body: _mm256_stream_si256((__m256i*)result, input);


    vgather:
      prefix: "template<typename RandomIt> friend"
      args:   "RandomIt input, const zint32<base_t::features> &index, composed_t"
      body: _mm256_i32gather_epi32(input, index, 4)
#-----------------------------------------------------------------------------------------------------------------------
  numeric: {} #dummy
#-----------------------------------------------------------------------------------------------------------------------
  math:
    vabs:
      args: one
      body: _mm256_abs_epi32
    vmin: _mm256_min_epi32
    vmax: _mm256_max_epi32

    vclamp:
     args: [self, from, to]
     body: vmin(to, vmax(from, self))
    vsqrt:
     args: one
     body: _mm256_sqrt_ps(_mm256_cvtepi32_ps(one))
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg:
      args: one
      body: _mm256_sub_epi32(_mm256_setzero_si256(), one)
    vadd: _mm256_add_epi32
    vsub: _mm256_sub_epi32
    vmul: _mm256_mullo_epi32
    vdiv: _mm256_div_ps(_mm256_cvtepi32_ps(one), _mm256_cvtepi32_ps(other));
    vmod: vsub(one, vmul(other, vdiv(one, other)))
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg: &bitwise_negate
      args: one
      body:
        - auto zero = _mm256_setzero_si256();
        - auto ones = _mm256_cmpeq_epi32(zero, zero);
        - return _mm256_xor_si256(one, ones);
    vband:  _mm256_and_si256
    vbor:   _mm256_or_si256
    vbxor:  _mm256_xor_si256

    is_set:
      args: one
      returns: bool
      body: _mm256_testc_si256(one, _mm256_cmpeq_epi32(one,one));
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    vbsll:  _mm256_sll_epi32
    vbsrl:  _mm256_srl_epi32
    vbslli:
      args: { raw: "const composed_t one, const size_t other" }
      body: _mm256_slli_epi32(one, other)
    vbsrli:
      args: { raw: "const composed_t one, const size_t other" }
      body: _mm256_srli_epi32(one, other)
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg:
      args: one
      body: _mm256_cmpeq_epi32(one, _mm256_setzero_si256());
    vlor:   _mm256_or_si256
    vland:  _mm256_and_si256
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   _mm256_cmpeq_epi32
    vneq:  "!(one == other)"
    vgt:   _mm256_cmpgt_epi32
    vlt:   _mm256_cmpgt_epi32(other, one)
    vge:   "!(one < other)"
    vle:   "!(one > other)"
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [condition, if_value, else_value]
      mangling: false
      body:
        - auto mask = _mm256_cmpeq_epi32(_mm256_setzero_si256(), condition);
        - _mm256_blendv_epi8(if_value, else_value, mask);
        #- _mm256_blendv_epi8(else_value, if_value, condition);