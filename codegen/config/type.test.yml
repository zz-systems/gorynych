modules:
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg: [ "-{type}(a)", "-a[i]" ]
    vadd: [ "{type}(a) + {type}(b)", "a[i] + b[i]" ]
    vsub: [ "{type}(a) - {type}(b)", "a[i] - b[i]" ]
    vmul: [ "{type}(a) * {type}(b)", "a[i] * b[i]" ]
    vdiv: [ "{type}(a) / {type}(a)", "1" ]
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    #vbneg: [ "~{type}(a)", "~a[i]"]
    vband:  [ "{type}(a) & {type}(64)", "(a[i] & 64)" ]
    vbor:   [ "{type}(a) | {type}(64)", "(a[i] | 64)" ]
    vbxor:  [ "{type}(a) ^ {type}(64)", "(a[i] ^ 64)" ]
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    #sll:  [ "{type}(1) << {type}(4)",  (1) << (4)]
    #srl:  [ "{type}(109) >> {type}(3)", (109) >> (3) ]
    vbslli: [ "{type}(a) << (4)", "(a[i]) << (4)" ]
    vbsrli: [ "{type}(a) >> (3)", "(a[i]) >> (3)" ]
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    vlneg: [ "(!{type}(a)).as_bool()", "false" ]
    vlor:   [ "({type}(0) || {type}(a)).as_bool()", "true"]
    vland:  [ "({type}(0) && {type}(a)).as_bool()", "false"]
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   [ "{type}(0) == {type}(a)", 0]
    vneq:  [ "{type}(a) != {type}(a)", 0]
    vgt:   [ "{type}(0) > {type}(a)", 0]
    vlt:   [ "{type}(a) < {type}(0)", 0]
    vge:   [ "({type}(b) >= {type}(b)).as_bool()", "true" ]
    vle:   [ "({type}(b) <= {type}(b)).as_bool()", "true"]
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel: [ "{type}(2).when({type}(1) == {type}(1)).otherwise({type}(3))", 2]