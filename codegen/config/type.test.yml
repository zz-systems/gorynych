modules:
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    vneg: [ "-{type}(125)", -125 ]
    vadd: [ "{type}(12) + {type}(105)", 117 ]
    vsub: [ "{type}(124) - {type}(125)", -1 ]
    vmul: [ "{type}(12) * {type}(9)", 108 ]
    vdiv: [ "{type}(124) / {type}(124)", 1 ]
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    vbneg: [ "~{type}(100)", ~100]

    vband:  [ "{type}(127) & {type}(64)", (127 & 64) ]
    vbor:   [ "{type}(127) | {type}(64)", (127 | 64) ]
    vbxor:  [ "{type}(127) ^ {type}(64)", (127 ^ 64) ]
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    #sll:  [ "{type}(1) << {type}(4)",  (1) << (4)]
    #srl:  [ "{type}(109) >> {type}(3)", (109) >> (3) ]
    vbslli: [ "{type}(1) << (4)", (1) << (4) ]
    vbsrli: [ "{type}(109) >> (3)", (109) >> (3) ]
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    #vlneg: [ "(!{type}(1))", "false" ]
    vlor:   [ "{type}(0) || {type}(8)", 8]
    vland:  [ "{type}(0) && {type}(8)", 0]
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    veq:   [ "{type}(0) == {type}(8)", 0]
    vneq:  [ "{type}(0) != {type}(0)", 0]
    vgt:   [ "{type}(0) > {type}(8)", 0]
    vlt:   [ "{type}(8) < {type}(0)", 0]
    vge:   [ "({type}(0) >= {type}(0)).as_bool()", "true" ]
    vle:   [ "({type}(0) <= {type}(0)).as_bool()", "true"]
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel: [ "vsel({type}(1) == {type}(1), {type}(2), {type}(3))", 2]