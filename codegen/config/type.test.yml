modules:
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    negate: [ "-{type}(125)", -125 ]
    add: [ "{type}(12) + {type}(105)", 117 ]
    sub: [ "{type}(124) - {type}(125)", -1 ]
    mul: [ "{type}(12) * {type}(9)", 108 ]
    div: [ "{type}(124) / {type}(124)", 1 ]
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    negate: [ "~{type}(100)", ~100]

    and:  [ "{type}(127) & {type}(64)", (127 & 64) ]
    or:   [ "{type}(127) | {type}(64)", (127 | 64) ]
    xor:  [ "{type}(127) ^ {type}(64)", (127 ^ 64) ]
#-----------------------------------------------------------------------------------------------------------------------
  bitwise_shift:
    #sll:  [ "{type}(1) << {type}(4)",  (1) << (4)]
    #srl:  [ "{type}(109) >> {type}(3)", (109) >> (3) ]
    slli: [ "{type}(1) << (4)", (1) << (4) ]
    srli: [ "{type}(109) >> (3)", (109) >> (3) ]
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    negate: [ "(!{type}(1)).as_bool()", "false" ]
    or:   [ "{type}(0) || {type}(8)", 8]
    and:  [ "{type}(0) && {type}(8)", 0]
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    eq:   [ "{type}(0) == {type}(8)", 0]
    neq:  [ "{type}(0) != {type}(0)", 0]
    gt:   [ "{type}(0) > {type}(8)", 0]
    lt:   [ "{type}(8) < {type}(0)", 0]
    ge:   [ "({type}(0) >= {type}(0)).as_bool()", "true" ]
    le:   [ "({type}(0) <= {type}(0)).as_bool()", "true"]
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel: [ "vsel({type}(1) == {type}(1), {type}(2), {type}(3))", 2]