//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file {{ ast.type.name }}.impl.hpp
 * @brief
 * This file provides defines required components and logic for {{ ast.type.name }} {{ ast.type.target }} target.
 * Provides unified access to {{ ast.type.size }} '{{ ast.type.scalar_type }}' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"
#include "backend/zval_interface.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/convertable.hpp"
#include "traits/printable.hpp"
{% for module in Traits.render(ast.modules) %}
#include "traits/{{ module }}.hpp"
{% endfor %}

namespace zacc { namespace backend { namespace {{ ast.type.target }}
{
    /// @cond
    template<uint64_t features>
    struct b{{ ast.type.name }};

    template<uint64_t features>
    struct z{{ ast.type.name }};
    /// @endcond

    template<uint64_t FeatureMask>
    using iz{{ ast.type.name }} = ztype<zval_tag, {{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, FeatureMask>;

    template<uint64_t FeatureMask>
    using ib{{ ast.type.name }} = ztype<bval_tag, {{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, FeatureMask>;

    namespace {{ ast.type.name }}_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = {{ ast.type.size }};

        /// memory alignment
        static constexpr size_t alignment = {{ ast.type.alignment }};

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = {{ ast.type.vector_type }};

        /// scalar type, like int for sse 4x integer vector
        using element_type = {{ ast.type.scalar_type }};

        /// mask type for boolean operations
        using mask_vector_type = {{ ast.type.mask_type }};

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;
    }
}}}
{% set details_ns = "backend::{}::{}_detail".format(ast.type.target, ast.type.name) %}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::{{ ast.type.target }}::iz{{ ast.type.name }}<T::feature_mask>, T>::value
            || std::is_base_of<backend::{{ ast.type.target }}::ib{{ ast.type.name }}<T::feature_mask>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = {{ ast.type.size }};

        /// capabilities
        static constexpr uint64_t feature_mask = T::feature_mask;

        /// memory alignment
        static constexpr size_t alignment = {{ ast.type.alignment }};

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = {{ ast.type.vector_type }};

        /// scalar type, like int for sse 4x integer vector
        using element_type = {{ ast.type.scalar_type }};

        /// mask type for boolean operations
        using mask_vector_type = {{ ast.type.mask_type }};

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;

        using zval_t = backend::{{ ast.type.target }}::z{{ ast.type.name }}<T::feature_mask>;
        using bval_t = backend::{{ ast.type.target }}::b{{ ast.type.name }}<T::feature_mask>;

        using tag = select_t<
            when<std::is_base_of<backend::{{ ast.type.target }}::iz{{ ast.type.name }}<T::feature_mask>, T>::value, zval_tag>,
            when<std::is_base_of<backend::{{ ast.type.target }}::ib{{ ast.type.name }}<T::feature_mask>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace {{ ast.type.target }} {

    namespace detail {

        {% for module in ast.modules.modules %}
        // =================================================================================================================
        /**
         * @name {{ module.name }} modules
         */
        ///@{
        /**
         * @brief {{ module.name }}
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         */
        template<typename Interface, typename Composed>
        struct {{ Modules.render(module, ast) }}
        {
            /**
             * @brief {{ module.name }} basic interface implementation
             * @relates {{ ast.type.name }}
             * @remark {{ ast.type.target }}
             */
            struct __impl
            {
                {% for func in module.functions %}
                {% for body in func.bodies %}

                /**
                 * @brief {{ module.name }} {{ body.target }}
                 * @relates {{ ast.type.name }}
                 * @remark {{ ast.type.target }} {{ body.target }}
                 */
                {{ Functions.render(func.signature, (module, ast, body)) }}
                {
                    ZTRACE_BACKEND("{{ ast.type.target }}.{{ast.type.name}}.impl", __LINE__, "{{ ast.type.name }}({{ ast.type.scalar_type }}[{{ast.type.size}}])", "{{body.target}}", "{{func.signature.name}}");

                    {% for instruction in Functions.render(body) %}
                    {{ instruction }}
                    {% endfor %}
                }

                {% endfor %}
                {% endfor %}
            };

            /**
             * @brief {{ module.name }} public interface implementation
             * @relates {{ ast.type.name }}
             * @remark {{ ast.type.target }}
             */
            template<typename Base>
            using impl = traits::{{ module.name }}<__impl, Base, Interface, Composed, b{{ ast.type.name }}<Interface::feature_mask>>;
        };

        ///@}

        {% endfor %}

        // Type composition ================================================================================================

        /**
         * @name {{ ast.type.name }} composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         * @tparam features feature mask
         */
        template<uint64_t FeatureMask>
        using z{{ ast.type.name }}_ops = compose_t
        <
            {% for trait in Traits.render(ast, ModuleTypes.DEFAULT) %}
            {{ trait }}{{ "," if not loop.last }}
            {% endfor %}
        >;

        /// b{{ ast.type.name }} composition
        /// @tparam features feature mask
        template<uint64_t FeatureMask>
        using b{{ ast.type.name }}_ops = compose_t
        <
            {% for trait in Traits.render(ast, ModuleTypes.BOOLEAN) %}
            {{ trait }}{{ "," if not loop.last }}
            {% endfor %}
        >;

        ///@}
    } // end namespace

    /// public z{{ ast.type.name }} implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct z{{ ast.type.name }} :
        public detail::z{{ ast.type.name }}_ops<FeatureMask>,
        public zval<iz{{ ast.type.name }}<FeatureMask>>
    {
        USING_ZTYPE(iz{{ ast.type.name }}<FeatureMask>);

        /// complete vector
        using zval_t = z{{ ast.type.name }}<FeatureMask>;

        /// complete boolean vector
        using bval_t = b{{ ast.type.name }}<FeatureMask>;

        /**
         * copy constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<std::is_convertible<T, {{ ast.type.vector_type }}>::value>>// || std::is_convertible<T, {{ ast.type.scalar_type }}>::value>>
        constexpr z{{ ast.type.name }}(const T& other) noexcept
            : zval<iz{{ ast.type.name }}<FeatureMask>>(other)
        {}

        /**
         * move constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<(size > 1) && std::is_convertible<T, {{ ast.type.vector_type }}>::value>>
        constexpr z{{ ast.type.name }}(T&& other) noexcept
            : zval<iz{{ ast.type.name }}<FeatureMask>>(std::forward<T>(other))
        {}

        /**
         * copy constructor
         * @param other
         */
        constexpr z{{ ast.type.name }}(const b{{ ast.type.name }}<FeatureMask>& other) noexcept
            : zval<iz{{ ast.type.name }}<FeatureMask>>(other.value())
        {}

        {% for module in ast.modules.initializers if module.type == ModuleTypes.DEFAULT %}
        {% for func in module.functions %}
        {% for body in func.bodies %}

        /**
         * @brief {{ module.name }} {{ body.target }}
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }} {{ body.target }}
         */
        {{ Functions.render(func.signature, (module, ast, body)) }}
        {
            ZTRACE_BACKEND("{{ ast.type.target }}.{{ast.type.name}}.impl", __LINE__, "{{ ast.type.name }}({{ ast.type.scalar_type }}[{{ast.type.size}}])", "{{body.target}}", "CONS({{Functions.render_args_signature(func.signature)}})");

            {% for instruction in Functions.render(body) %}
            {{ instruction }}
            {% endfor %}
        }

        {% endfor %}
        {% endfor %}
        {% endfor %}
    };

    /// public b{{ ast.type.name }} implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct b{{ ast.type.name }} :
            public detail::b{{ ast.type.name }}_ops<FeatureMask>,
            public bval<ib{{ ast.type.name }}<FeatureMask>>
    {
        USING_ZTYPE(ib{{ ast.type.name }}<FeatureMask>);

        /// complete vector
        using zval_t = z{{ ast.type.name }}<FeatureMask>;

        /// complete boolean vector
        using bval_t = b{{ ast.type.name }}<FeatureMask>;

        /// Forwarding constructor
        FORWARD2(b{{ ast.type.name }}, bval<ib{{ ast.type.name }}<FeatureMask>>);

        {% for module in ast.modules.initializers if module.type == ModuleTypes.BOOLEAN %}
        {% for func in module.functions %}
        {% for body in func.bodies %}

        /**
         * @brief {{ module.name }} {{ body.target }}
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }} {{ body.target }}
         */
        {{ Functions.render(func.signature, (module, ast, body)) }}
        {
            ZTRACE_BACKEND("{{ ast.type.target }}.{{ast.type.name}}.impl", __LINE__, "{{ ast.type.name }}({{ ast.type.scalar_type }}[{{ast.type.size}}])", "{{body.target}}", "CONS({{Functions.render_args_signature(func.signature)}})");

            {% for instruction in Functions.render(body) %}
            {{ instruction }}
            {% endfor %}
        }

        {% endfor %}
        {% endfor %}
        {% endfor %}
    };

    namespace {
        using namespace {{ ast.type.target }}::{{ ast.type.name }}_detail;

        static_assert(std::is_base_of<iz{{ast.type.name}} < 0>,
                      iz{{ast.type.name}} < 0 >> ::value,
                      "base_of<iz{{ ast.type.name }}> != iz{{ ast.type.name }}.");
        static_assert(!std::is_base_of<ib{{ast.type.name}} < 0>,
                      iz{{ast.type.name}} < 0 >> ::value,
                      "base_of<iz{{ ast.type.name }}> == ib{{ ast.type.name }}.");

        static_assert(is_zval < iz{{ast.type.name}} < 0 >> ::value,
                      "is_zval<iz{{ ast.type.name }}> == false.");
        static_assert(!is_bval < iz{{ast.type.name}} < 0 >> ::value,
                      "is_bval<iz{{ ast.type.name }}> != false.");

        static_assert(std::is_base_of<iz{{ast.type.name}} < 0>, z{{ast.type.name}} < 0 >> ::value,
                      "base_of<z{{ ast.type.name }}> != iz{{ ast.type.name }}.");
        static_assert(!std::is_base_of<ib{{ast.type.name}} < 0>, z{{ast.type.name}} < 0 >> ::value,
                      "base_of<z{{ ast.type.name }}> == ib{{ ast.type.name }}.");

        static_assert(z{{ast.type.name}} < 0 > ::size == {{ast.type.size}},
                      "z{{ ast.type.name }}::size != {{ ast.type.size }}.");
        static_assert(z{{ast.type.name}} < 0 > ::alignment == {{ast.type.alignment}},
                      "z{{ ast.type.name }}::alignment != {{ ast.type.alignment }}.");
        static_assert(z{{ast.type.name}} < 0 > ::is_vector == ({{ ast.type.size }} > 1),
        "z{{ ast.type.name }}::is_vector != ({{ ast.type.size }} > 1).");

        static_assert(std::is_same<z{{ast.type.name}} < 0>::tag, zval_tag > ::value,
                      "z{{ ast.type.name }}::tag != zval_tag.");
        static_assert(std::is_same<z{{ast.type.name}} < 0>::vector_type, {{ast.type.vector_type}} > ::value,
                      "z{{ ast.type.name }}::vector_type != {{ ast.type.vector_type }}.");
        static_assert(std::is_same<z{{ast.type.name}} < 0>::element_type, {{ast.type.scalar_type}} > ::value,
                      "z{{ ast.type.name }}::element_type != {{ ast.type.scalar_type }}.");
        static_assert(std::is_same<z{{ast.type.name}} < 0>::mask_vector_type, {{ast.type.mask_type}} > ::value,
                      "z{{ ast.type.name }}::mask_vector_type != {{ ast.type.mask_type }}.");
        static_assert(std::is_same<z{{ast.type.name}} < 0>::extracted_type,
                      std::array<{{ast.type.scalar_type}}, {{ast.type.size}}>>::value,
                      "z{{ ast.type.name }}::extracted_type != std::array<{{ ast.type.scalar_type }}, {{ ast.type.size }}>.");


        static_assert(std::is_same<typename ztraits<z{{ast.type.name}} < 0>>::tag, zval_tag > ::value,
                      "z{{ ast.type.name }}::tag != zval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<z{{ast.type.name}} < 0>>::element_type > ::value,
                      "is_arithmetic<z{{ ast.type.name }}::element_type> == false.");
        static_assert(is_zval < z{{ast.type.name}} < 0 >> ::value,
                      "is_zval<z{{ ast.type.name }}> == false.");
        static_assert(!is_bval < z{{ast.type.name}} < 0 >> ::value,
                      "is_bval<z{{ ast.type.name }}> != false.");


        static_assert(std::is_base_of<iz{{ast.type.name}} < 0>,
                      iz{{ast.type.name}} < 0 >> ::value,
                      "base_of<iz{{ ast.type.name }}> != iz{{ ast.type.name }}.");
        static_assert(!std::is_base_of<ib{{ast.type.name}} < 0>,
                      iz{{ast.type.name}} < 0 >> ::value,
                      "base_of<iz{{ ast.type.name }}> == ib{{ ast.type.name }}.");


        static_assert(!is_zval < ib{{ast.type.name}} < 0 >> ::value,
                      "is_zval<ib{{ ast.type.name }}> != false.");
        static_assert(is_bval < ib{{ast.type.name}} < 0 >> ::value,
                      "is_bval<ib{{ ast.type.name }}> == false.");

        static_assert(std::is_base_of<ib{{ast.type.name}} < 0>, b{{ast.type.name}} < 0 >> ::value,
                      "base_of<b{{ ast.type.name }}> != ib{{ ast.type.name }}.");
        static_assert(!std::is_base_of<iz{{ast.type.name}} < 0>, b{{ast.type.name}} < 0 >> ::value,
                      "base_of<b{{ ast.type.name }}> == iz{{ ast.type.name }}.");

        static_assert(b{{ast.type.name}} < 0 > ::size == {{ast.type.size}},
                      "b{{ ast.type.name }}::size != {{ ast.type.size }}.");
        static_assert(b{{ast.type.name}} < 0 > ::alignment == {{ast.type.alignment}},
                      "b{{ ast.type.name }}::alignment != {{ ast.type.alignment }}.");
        static_assert(b{{ast.type.name}} < 0 > ::is_vector == ({{ ast.type.size }} > 1),
        "b{{ ast.type.name }}::is_vector != ({{ ast.type.size }} > 1).");

        static_assert(std::is_same<b{{ast.type.name}} < 0>::tag, bval_tag > ::value,
                      "b{{ ast.type.name }}::tag != zval_tag.");
        static_assert(std::is_same<b{{ast.type.name}} < 0>::vector_type, {{ast.type.vector_type}} > ::value,
                      "b{{ ast.type.name }}::vector_type != {{ ast.type.vector_type }}.");
        static_assert(std::is_same<b{{ast.type.name}} < 0>::element_type, {{ast.type.scalar_type}} > ::value,
                      "b{{ ast.type.name }}::element_type != {{ ast.type.scalar_type }}.");
        static_assert(std::is_same<b{{ast.type.name}} < 0>::mask_vector_type, {{ast.type.mask_type}} > ::value,
                      "b{{ ast.type.name }}::mask_vector_type != {{ ast.type.mask_type }}.");
        static_assert(std::is_same<b{{ast.type.name}} < 0>::extracted_type,
                      std::array<{{ast.type.scalar_type}}, {{ast.type.size}}>>::value,
        "b{{ ast.type.name }}::extracted_type != std::array<{{ ast.type.scalar_type }}, {{ ast.type.size }}>.");

        static_assert(std::is_same<typename ztraits<b{{ast.type.name}} < 0>>::tag, bval_tag > ::value,
                      "b{{ ast.type.name }}::tag != bval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<b{{ast.type.name}} < 0>>::element_type > ::value,
                      "is_arithmetic<b{{ ast.type.name }}::element_type> == false.");
        static_assert(!is_zval < b{{ast.type.name}} < 0 >> ::value,
                      "is_zval<b{{ ast.type.name }}> != false.");
        static_assert(is_bval < b{{ast.type.name}} < 0 >> ::value,
                      "is_bval<b{{ ast.type.name }}> == false.");

        static_assert(!std::is_floating_point<{{ast.type.scalar_type}}>::value ||
                      is_floating_point < z{{ast.type.name}} < 0 >> ::value,
                      "is_floating_point<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
        static_assert(!std::is_floating_point<{{ast.type.scalar_type}}>::value ||
                      !is_integral < z{{ast.type.name}} < 0 >> ::value,
                      "is_integral<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");

        static_assert(
                !std::is_same<{{ast.type.scalar_type}}, float>::value || is_float < z{{ast.type.name}} < 0 >> ::value,
                "is_float<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
        static_assert(
                !std::is_same<{{ast.type.scalar_type}}, float>::value || !is_double < z{{ast.type.name}} < 0 >> ::value,
                "is_double<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");

        static_assert(
                !std::is_same<{{ast.type.scalar_type}}, double>::value || is_double < z{{ast.type.name}} < 0 >> ::value,
                "is_double<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
        static_assert(
                !std::is_same<{{ast.type.scalar_type}}, double>::value || !is_float < z{{ast.type.name}} < 0 >> ::value,
                "is_float<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");

        static_assert(
                !std::is_integral<{{ast.type.scalar_type}}>::value || is_integral < z{{ast.type.name}} < 0 >> ::value,
                "is_integral<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
        static_assert(!std::is_integral<{{ast.type.scalar_type}}>::value ||
                      !is_floating_point < z{{ast.type.name}} < 0 >> ::value,
                      "is_floating_point<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");
    }
    ///@}
}}}
