//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file {{ ast.type.name }}.impl.hpp
 * @brief
 * This file provides defines required components and logic for {{ ast.type.name }} {{ ast.type.target }} target.
 * Provides unified access to {{ ast.type.size }} '{{ ast.type.scalar_type }}' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/intrin.ext.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "system/feature.hpp"

#include "traits/printable.hpp"
#include "traits/io.hpp"
#include "traits/math.hpp"
#include "traits/numeric.hpp"
#include "traits/bitwise.hpp"
#include "traits/bitwise_shift.hpp"
#include "traits/comparable.hpp"
#include "traits/logical.hpp"
#include "traits/equatable.hpp"
#include "traits/conditional.hpp"
#include "traits/arithmetic.hpp"

namespace zacc { namespace backend { namespace {{ ast.type.target }}
{
    /// @cond
    template<uint64_t FeatureMask>// = last_operation::undefined>
    struct b{{ ast.type.name }};

    template<uint64_t FeatureMask>// = last_operation::undefined>
    struct z{{ ast.type.name }};
    /// @endcond

    template<uint64_t FeatureMask>// = last_operation::undefined>
    using iz{{ ast.type.name }} = ztype<zval_tag, {{ ast.type.vector_type }}, {{ ast.type.scalar_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, FeatureMask>;

    template<uint64_t FeatureMask>// = last_operation::undefined>
    using ib{{ ast.type.name }} = ztype<bval_tag, {{ ast.type.vector_type }}, {{ ast.type.scalar_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, FeatureMask>;
}}}

namespace zacc {

    /**
     * @brief ztraits type trait specialization for {{ ast.type.name }} [{{ ast.type.target }} branch]
     * @tparam T
     */
    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::{{ ast.type.target }}::iz{{ ast.type.name }}<std::decay_t<T>::feature_mask>, std::decay_t<T>>::value
            || std::is_base_of<backend::{{ ast.type.target }}::ib{{ ast.type.name }}<std::decay_t<T>::feature_mask>, std::decay_t<T>>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = {{ ast.type.size }};

        /// capabilities
        static constexpr uint64_t feature_mask = std::decay_t<T>::feature_mask;

        /// memory alignment
        static constexpr size_t alignment = {{ ast.type.alignment }};

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = {{ ast.type.vector_type }};

        /// scalar type, like int for sse 4x integer vector
        using element_type = {{ ast.type.scalar_type }};

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;

        using zval_type = backend::{{ ast.type.target }}::z{{ ast.type.name }}<std::decay_t<T>::feature_mask>;
        using bval_type = backend::{{ ast.type.target }}::b{{ ast.type.name }}<std::decay_t<T>::feature_mask>;

        using tag = typename std::decay_t<T>::tag;
    };
}

namespace zacc { namespace backend { namespace {{ ast.type.target }}
{
    namespace {{ ast.type.name }}_modules
    {
        {% for module in ast.modules.modules %}
        /**
         * @brief {{ module.name }} mixin implementation [{{ ast.type.target }} branch]
         * @relates {{ ast.type.name }}
         */
        template<typename Interface, typename Composed, typename Boolean>
        struct {{ module.name }} : traits::{{ module.name }}<Interface, Composed, Boolean>
        {
            {% for func in module.functions %}
            {% for body in func.bodies %}
            /**
             * @brief {{ func.name }} [{{ body.target }} branch]
             * @relates {{ ast.type.name }}
             */
            {% for part in Functions.render(func.signature, (module, ast, body)) if part %}
            {{ part }}
            {% endfor %}
            {
                {% for instruction in Functions.render(body) %}
                {{ instruction }}
                {% endfor %}
            }
            {% if not loop.last %}

            {% endif %}
            {% endfor %}
            {% if not loop.last %}

            {% endif %}
            {% endfor %}
        };
        {% if not loop.last %}

        // =============================================================================================================

        {% endif %}
        {% endfor %}
    } // end {{ ast.type.name }}_modules

    // =================================================================================================================

    /// public z{{ ast.type.name }} implementation [{{ ast.type.target }} branch]
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct z{{ ast.type.name }} : public zval<iz{{ ast.type.name }}<FeatureMask>>,

        // generic traits
        {% for trait in ast.traits.shared %}
        {{ trait }}<iz{{ ast.type.name }}<FeatureMask>, z{{ ast.type.name }}<FeatureMask>>,
        {% endfor %}

        // {{ ast.type.name }} traits
        {% for trait in ast.traits.default %}
        {{ ast.type.name }}_modules::{{ trait }}<iz{{ ast.type.name }}<FeatureMask>, z{{ ast.type.name }}<FeatureMask>, b{{ ast.type.name }}<FeatureMask>>{{ "," if not loop.last }}
        {% endfor %}
    {
        USING_ZTYPE(zval<iz{{ ast.type.name }}<FeatureMask>>);
        using zval<iz{{ ast.type.name }}<FeatureMask>>::zval;

        constexpr z{{ ast.type.name }}() = default;

        // =============================================================================================================

        template<typename T, std::enable_if_t<std::is_same<T, view_t<iz{{ ast.type.name }}<FeatureMask>>>::value && !is_vector, void**> = nullptr>
        constexpr z{{ ast.type.name }}(const T& view) noexcept
                : z{{ ast.type.name }}(view[0])
        {}

        template<typename T, typename std::enable_if<is_zval<T>::value, void**>::type = nullptr>
        constexpr z{{ ast.type.name }}(const T& other) noexcept
                : z{{ ast.type.name }}(other.value())
        {}

        explicit constexpr z{{ ast.type.name }}(const bval_t<iz{{ ast.type.name }}<FeatureMask>>& other) noexcept
                : z{{ ast.type.name }}(other.value())
        {}

        {% for module in ast.modules.initializers if module.type == ModuleTypes.DEFAULT %}
        {% for func in module.functions %}
        {% for body in func.bodies %}
        /**
         * @brief z{{ ast.type.name }} constructor [{{ ast.type.target }} branch]
         * @relates z{{ ast.type.name }}
         */
        {% for part in Functions.render(func.signature, (module, ast, body)) if part %}
        {{ part }}
        {% endfor %}
        {
            {% for instruction in Functions.render(body) %}
            {{ instruction }}
            {% endfor %}
        }
        {% if not loop.last %}

        {% endif %}
        {% endfor %}
        {% if not loop.last %}

        {% endif %}
        {% endfor %}
        {% endfor %}
    };

    // =================================================================================================================

    /// public b{{ ast.type.name }} implementation [{{ ast.type.target }} branch]
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct b{{ ast.type.name }} : public zval<ib{{ ast.type.name }}<FeatureMask>>,

        // generic traits
        {% for trait in ast.traits.shared %}
        {{ trait }}<b{{ ast.type.name }}<FeatureMask>, b{{ ast.type.name }}<FeatureMask>>,
        {% endfor %}

        // {{ ast.type.name }} traits
        {% for trait in ast.traits.boolean %}
        {{ ast.type.name }}_modules::{{ trait }}<ib{{ ast.type.name }}<FeatureMask>, b{{ ast.type.name }}<FeatureMask>, b{{ ast.type.name }}<FeatureMask>>{{ "," if not loop.last }}
        {% endfor %}
    {
        USING_ZTYPE(zval<ib{{ ast.type.name }}<FeatureMask>>);
        using zval<ib{{ ast.type.name }}<FeatureMask>>::zval;

        constexpr b{{ ast.type.name }}() = default;

        // =============================================================================================================

        template<typename T, std::enable_if_t<std::is_same<T, view_t<ib{{ ast.type.name }}<FeatureMask>>>::value && !is_vector, void**> = nullptr>
        constexpr b{{ ast.type.name }}(const T& view) noexcept
                : b{{ ast.type.name }}((view[0]))
        {}

        template<typename T, typename std::enable_if<is_zval<T>::value || is_bval<T>::value, void**>::type = nullptr>
        constexpr b{{ ast.type.name }}(const T& other) noexcept
                : b{{ ast.type.name }}(other.value())
        {
            //static_assert(size_v<T> == {{ ast.type.size }}, "Dimension mismatch");
        }

        {% for module in ast.modules.initializers if (module.type == ModuleTypes.BOOLEAN)%}
        {% for func in module.functions %}
        {% for body in func.bodies %}
        /**
         * @brief b{{ ast.type.name }} constructor [{{ ast.type.target }} branch]
         * @relates b{{ ast.type.name }}
         */
        {% for part in Functions.render(func.signature, (module, ast, body)) if part %}
        {{ part }}
        {% endfor %}
        {
            {% for instruction in Functions.render(body) %}
            {{ instruction }}
            {% endfor %}
        }
        {% if not loop.last %}

        {% endif %}
        {% endfor %}
        {% if not loop.last %}

        {% endif %}
        {% endfor %}
        {% endfor %}
    };

    // Validate z{{ ast.type.name }} ===================================================================================

#define params 0

    static_assert( is_vector_v<iz{{ast.type.name}}<params>> == {{ (ast.type.size > 1)|lower }},    "is_vector_v<iz{{ ast.type.name }}> != {{ (ast.type.size > 1)|lower }}.");
    static_assert( is_vector_v<ib{{ast.type.name}}<params>> == {{ (ast.type.size > 1)|lower }},    "is_vector_v<ib{{ ast.type.name }}> != {{ (ast.type.size > 1)|lower }}.");

    static_assert( std::is_same<element_t<ib{{ast.type.name}}<params>>, {{ast.type.scalar_type}}>::value,    "element_t<ib{{ ast.type.name }}> != {{ast.type.scalar_type}}.");

    static_assert( std::is_same<element_t<iz{{ast.type.name}}<params>>, {{ast.type.scalar_type}}>::value,    "element_t<iz{{ ast.type.name }}> != {{ast.type.scalar_type}}.");
    static_assert( std::is_same<element_t<ib{{ast.type.name}}<params>>, {{ast.type.scalar_type}}>::value,    "element_t<ib{{ ast.type.name }}> != {{ast.type.scalar_type}}.");

    static_assert( std::is_same<vector_t<iz{{ast.type.name}}<params>>, {{ast.type.vector_type}}>::value,    "vector_t<iz{{ ast.type.name }}> != {{ast.type.vector_type}}.");
    static_assert( std::is_same<vector_t<ib{{ast.type.name}}<params>>, {{ast.type.vector_type}}>::value,    "vector_t<ib{{ ast.type.name }}> != {{ast.type.vector_type}}.");

    static_assert( std::is_same<view_t<iz{{ast.type.name}}<params>>, std::array<{{ast.type.scalar_type}}, {{ast.type.size}}>>::value,    "view_t<iz{{ ast.type.name }}> != std::array<{{ast.type.scalar_type}}, {{ast.type.size}}>.");
    static_assert( std::is_same<view_t<ib{{ast.type.name}}<params>>, std::array<bool, {{ast.type.size}}>>::value,                        "view_t<ib{{ ast.type.name }}> != std::array<bool, {{ast.type.size}}>.");

//
    static_assert( std::is_base_of<iz{{ast.type.name}}<params>, iz{{ast.type.name}}<params>>::value, "base_of<iz{{ ast.type.name }}> != iz{{ ast.type.name }}.");
    static_assert(!std::is_base_of<ib{{ast.type.name}}<params>, iz{{ast.type.name}}<params>>::value, "base_of<iz{{ ast.type.name }}> == ib{{ ast.type.name }}.");

    static_assert( is_zval<iz{{ast.type.name}}<params>>::value, "is_zval<iz{{ ast.type.name }}> == false.");
    static_assert(!is_bval<iz{{ast.type.name}}<params>>::value, "is_bval<iz{{ ast.type.name }}> != false.");

    static_assert( std::is_base_of<iz{{ast.type.name}}<params>, z{{ast.type.name}}<params>>::value, "base_of<z{{ ast.type.name }}> != iz{{ ast.type.name }}.");
    static_assert(!std::is_base_of<ib{{ast.type.name}}<params>, z{{ast.type.name}}<params>>::value, "base_of<z{{ ast.type.name }}> == ib{{ ast.type.name }}.");

    static_assert(z{{ast.type.name}}<params>::size == {{ast.type.size}}, "z{{ ast.type.name }}::size != {{ ast.type.size }}.");
    static_assert(z{{ast.type.name}}<params>::alignment == {{ast.type.alignment}}, "z{{ ast.type.name }}::alignment != {{ ast.type.alignment }}.");
    static_assert(z{{ast.type.name}}<params>::is_vector == {{ (ast.type.size > 1)|lower }}, "z{{ ast.type.name }}::is_vector != {{ (ast.type.size > 1)|lower }}.");

    static_assert(std::is_same<z{{ast.type.name}}<params>::tag, zval_tag>::value, "z{{ ast.type.name }}::tag != zval_tag.");
    static_assert(std::is_same<z{{ast.type.name}}<params>::vector_type, {{ast.type.vector_type}}>::value, "z{{ ast.type.name }}::vector_type != {{ ast.type.vector_type }}.");
    static_assert(std::is_same<z{{ast.type.name}}<params>::element_type, {{ast.type.scalar_type}}>::value, "z{{ ast.type.name }}::element_type != {{ ast.type.scalar_type }}.");
    static_assert(std::is_same<z{{ast.type.name}}<params>::extracted_type, std::array<{{ast.type.scalar_type}}, {{ast.type.size}}>>::value, "z{{ ast.type.name }}::extracted_type != std::array<{{ ast.type.scalar_type }}, {{ ast.type.size }}>.");

    static_assert( is_zval<z{{ast.type.name}}<params>>::value, "is_zval<z{{ ast.type.name }}> == false.");
    static_assert(!is_bval<z{{ast.type.name}}<params>>::value, "is_bval<z{{ ast.type.name }}> != false.");

    // Validate b{{ ast.type.name }} ===================================================================================

    static_assert( std::is_base_of<ib{{ast.type.name}}<params>, ib{{ast.type.name}}<params>>::value, "base_of<iz{{ ast.type.name }}> != iz{{ ast.type.name }}.");
    static_assert(!std::is_base_of<iz{{ast.type.name}}<params>, ib{{ast.type.name}}<params>>::value, "base_of<iz{{ ast.type.name }}> == ib{{ ast.type.name }}.");

    static_assert( is_bval<ib{{ast.type.name}}<params>>::value, "is_bval<ib{{ ast.type.name }}> == false.");
    static_assert(!is_zval<ib{{ast.type.name}}<params>>::value, "is_zval<ib{{ ast.type.name }}> != false.");

    static_assert( std::is_base_of<ib{{ast.type.name}}<params>, b{{ast.type.name}}<params>>::value, "base_of<b{{ ast.type.name }}> != ib{{ ast.type.name }}.");
    static_assert(!std::is_base_of<iz{{ast.type.name}}<params>, b{{ast.type.name}}<params>>::value, "base_of<b{{ ast.type.name }}> == iz{{ ast.type.name }}.");

    static_assert(b{{ast.type.name}}<params>::size == {{ast.type.size}}, "b{{ ast.type.name }}::size != {{ ast.type.size }}.");
    static_assert(b{{ast.type.name}}<params>::alignment == {{ast.type.alignment}}, "b{{ ast.type.name }}::alignment != {{ ast.type.alignment }}.");
    static_assert(b{{ast.type.name}}<params>::is_vector == {{ (ast.type.size > 1)|lower }}, "b{{ ast.type.name }}::is_vector != {{ (ast.type.size > 1)|lower }}.");

    static_assert(std::is_same<b{{ast.type.name}}<params>::tag, bval_tag>::value, "b{{ ast.type.name }}::tag != zval_tag.");
    static_assert(std::is_same<b{{ast.type.name}}<params>::vector_type, {{ast.type.vector_type}}>::value, "b{{ ast.type.name }}::vector_type != {{ ast.type.vector_type }}.");
    static_assert(std::is_same<b{{ast.type.name}}<params>::element_type, {{ast.type.scalar_type}}>::value, "b{{ ast.type.name }}::element_type != {{ ast.type.scalar_type }}.");
    static_assert(std::is_same<b{{ast.type.name}}<params>::extracted_type, std::array<{{ast.type.scalar_type}}, {{ast.type.size}}>>::value, "b{{ ast.type.name }}::extracted_type != std::array<{{ ast.type.scalar_type }}, {{ ast.type.size }}>.");

    static_assert( is_bval<b{{ast.type.name}}<params>>::value, "is_bval<b{{ ast.type.name }}> == false.");
    static_assert(!is_zval<b{{ast.type.name}}<params>>::value, "is_zval<b{{ ast.type.name }}> != false.");

    // Validate integral, float, double traits =========================================================================

    static_assert(!std::is_floating_point<{{ast.type.scalar_type}}>::value || is_floating_point < z{{ast.type.name}}<params>>::value, "is_floating_point<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
    static_assert(!std::is_floating_point<{{ast.type.scalar_type}}>::value || !is_integral<z{{ast.type.name}}<params>>::value, "is_integral<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");

    static_assert(!std::is_same<{{ast.type.scalar_type}}, float>::value || is_float < z{{ast.type.name}}<params>>::value, "is_float<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
    static_assert(!std::is_same<{{ast.type.scalar_type}}, float>::value || !is_double < z{{ast.type.name}}<params>>::value, "is_double<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");

    static_assert(!std::is_same<{{ast.type.scalar_type}}, double>::value || is_double < z{{ast.type.name}}<params>>::value, "is_double<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
    static_assert(!std::is_same<{{ast.type.scalar_type}}, double>::value || !is_float < z{{ast.type.name}}<params>>::value, "is_float<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");

    static_assert(!std::is_integral<{{ast.type.scalar_type}}>::value || is_integral<z{{ast.type.name}}<params>>::value,"is_integral<z{{ ast.type.name }}> == false. [scalar = {{ ast.type.scalar_type }}]");
    static_assert(!std::is_integral<{{ast.type.scalar_type}}>::value || !is_floating_point < z{{ast.type.name}}<params>>::value, "is_floating_point<z{{ ast.type.name }}> != false. [scalar = {{ ast.type.scalar_type }}]");
}}}
