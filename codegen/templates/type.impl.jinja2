//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file {{ ast.type.name }}.impl.hpp
 * @brief
 * This file provides defines required components and logic for {{ ast.type.name }} {{ ast.type.target }} target.
 * Provides unified access to {{ ast.type.size }} '{{ ast.type.scalar_type }}' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/constructable.hpp"
#include "traits/convertable.hpp"
#include "traits/printable.hpp"
{% for module in Traits.render(ast.modules) %}
#include "traits/{{ module }}.hpp"
{% endfor %}

namespace zacc { namespace backend { namespace {{ ast.type.target }}
{
    /// @cond
    template<uint64_t features>
    struct b{{ ast.type.name }};

    template<uint64_t features>
    struct z{{ ast.type.name }};
    /// @endcond

    namespace {{ ast.type.name }}_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = {{ ast.type.size }};

        /// memory alignment
        static constexpr size_t alignment = {{ ast.type.alignment }};

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = {{ ast.type.vector_type }};

        /// scalar type, like int for sse 4x integer vector
        using element_t = {{ ast.type.scalar_type }};

        /// mask type for boolean operations
        using mask_vector_t = {{ ast.type.mask_type }};

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;


        template<uint64_t Features>
        using zval_base = zval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, zval_tag, {{ ast.type.size }}, {{ ast.type.alignment }}, Features>;

        template<uint64_t Features>
        using bval_base = bval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, Features>;

        template<typename T>
        using zval_is_base_of = std::is_base_of<zval_base<T::features>, T>;

        template<typename T>
        using bval_is_base_of = std::is_base_of<bval_base<T::features>, T>;
    }

}}}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::{{ ast.type.target }}::{{ ast.type.name }}_detail::zval_base<T::features>, T>::value
            || std::is_base_of<backend::{{ ast.type.target }}::{{ ast.type.name }}_detail::bval_base<T::features>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = {{ ast.type.size }};

        /// capabilities
        static constexpr uint64_t features = T::features;

        /// memory alignment
        static constexpr size_t alignment = {{ ast.type.alignment }};

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = {{ ast.type.vector_type }};

        /// scalar type, like int for sse 4x integer vector
        using element_t = {{ ast.type.scalar_type }};

        /// mask type for boolean operations
        using mask_vector_t = {{ ast.type.mask_type }};

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;

        using zval_t = backend::{{ ast.type.target }}::z{{ ast.type.name }}<T::features>;
        using bval_t = backend::{{ ast.type.target }}::b{{ ast.type.name }}<T::features>;

        using tag = select_t<
                when<std::is_base_of<backend::{{ ast.type.target }}::{{ ast.type.name }}_detail::zval_base<T::features>, T>::value, zval_tag>,
                when<std::is_base_of<backend::{{ ast.type.target }}::{{ ast.type.name }}_detail::bval_base<T::features>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace {{ ast.type.target }} {

    namespace {{ ast.type.name }}_detail {

        {% for module in ast.modules.initializers + ast.modules.modules %}
        // =================================================================================================================
        /**
         * @name {{ module.name }} modules
         */
        ///@{
        /**
         * @brief {{ module.name }}
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         */
        template<typename Composed>
        struct {{ Modules.render(module, ast) }}
        {

            /**
             * @brief {{ module.name }} basic interface implementation
             * @relates {{ ast.type.name }}
             * @remark {{ ast.type.target }}
             */
            template<typename Base>
            struct __impl : Base
            {
                {% if not module in ast.modules.initializers %}
                /// forward to base
                FORWARD(__impl);
                {% endif  %}
                {% for func in module.functions %}
                    {% for body in func.bodies %}

                /**
                 * @brief {{ module.name }} {{ body.target }}
                 * @relates {{ ast.type.name }}
                 * @remark {{ ast.type.target }} {{ body.target }}
                 */
                {{ Functions.render(func.signature, (module, ast, body)) }} {

                    {% if not module in ast.modules.initializers  %}
                    ZTRACE_BACKEND("{{ ast.type.target }}.{{ast.type.name}}.impl", __LINE__, "{{ ast.type.name }}({{ ast.type.scalar_type }}[{{ast.type.size}}])", "{{body.target}}", "{{func.signature.name}}");
                    {% else %}
                    ZTRACE_BACKEND("{{ ast.type.target }}.{{ast.type.name}}.impl", __LINE__, "{{ ast.type.name }}({{ ast.type.scalar_type }}[{{ast.type.size}}])", "{{body.target}}", "CONS({{Functions.render_args_signature(func.signature)}})");
                    {% endif %}

                        {% for instruction in Functions.render(body) %}
                    {{ instruction }}
                        {% endfor %}
                }

                    {% endfor %}
                {% endfor %}
            };

            /**
             * @brief {{ module.name }} public interface implementation
             * @relates {{ ast.type.name }}
             * @remark {{ ast.type.target }}
             */
            template<typename Base>
            using impl = traits::{{ module.name }}<__impl<Base>, Composed, b{{ ast.type.name }}<Base::features>>;

        };

        ///@}

        {% endfor %}

        // Type composition ================================================================================================

        /**
         * @name {{ ast.type.name }} composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __z{{ ast.type.name }}
        {
            /// @cond
            struct impl;
            /// @endcond

            /**
            * @brief zval parametrization using
            * - '{{ ast.type.vector_type }}' as underlying vector type
            * - '{{ ast.type.scalar_type }}' as scalar type
            * - '{{ ast.type.size }}' as vector size
            * - '{{ ast.type.alignment }}' as alignment
            * @relates {{ ast.type.name }}
            * @remark {{ ast.type.target }}
            */
            using base = zval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, zval_tag, {{ ast.type.size }}, {{ ast.type.alignment }}, features>;

            /// parametrized zval base
            struct composable_base : base
            {
                /// forward to base
                FORWARD2(composable_base, base);
            };

            /// compose type from modules
            using composed = compose
            <
            {% for trait in Traits.render(ast, ModuleTypes.DEFAULT) %}
                {{ trait }},
            {% endfor %}

                composable<composable_base>::template type
            >;

            /// implementation
            struct impl : public composed
            {
                /// complete vector
                using zval_t = z{{ ast.type.name }}<features>;
                /// complete boolean vector
                using bval_t = b{{ ast.type.name }}<features>;

                using tag = zval_tag;

                using element_t = {{ ast.type.scalar_type }};

                /// vector size (1 - scalar, 4, 8, 16, ...)
                static constexpr size_t size() { return {{ ast.type.name }}_detail::size; }

                /// scalar type? vector type?
                static constexpr bool is_vector = {{ ast.type.name }}_detail::is_vector;

                /// memory alignment
                static constexpr size_t alignment = {{ ast.type.name }}_detail::alignment;

                /// forward to base
                FORWARD2(impl, composed);
            };
        };

        /// b{{ ast.type.name }} composition
        /// @tparam features feature mask
        template<uint64_t features>
        struct __b{{ ast.type.name }}
        {
            /// @cond
            struct impl;
            /// @endcond

            /**
            * @brief bval parametrization using
            * - '{{ ast.type.vector_type }}' as underlying vector type
            * - '{{ ast.type.scalar_type }}' as scalar type
            * - '{{ ast.type.size }}' as vector size
            * - '{{ ast.type.alignment }}' as alignment
            * @relates {{ ast.type.name }}
            * @remark {{ ast.type.target }}
            */
            using base = bval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, features>;

            /// parametrized zval base
            struct composable_base : base
            {
                /// forward to base
                FORWARD2(composable_base, base);
            };

            /// compose type from modules
            using composed = compose
            <
            {% for trait in Traits.render(ast, ModuleTypes.BOOLEAN) %}
                {{ trait }},
            {% endfor %}

                composable<composable_base>::template type
            >;

            /// implementation
            struct impl : public composed
            {
                /// complete vector
                using zval_t = z{{ ast.type.name }}<features>;
                /// complete boolean vector
                using bval_t = b{{ ast.type.name }}<features>;

                using tag = bval_tag;

                using element_t = bool;

                /// vector size (1 - scalar, 4, 8, 16, ...)
                static constexpr size_t size() { return {{ ast.type.name }}_detail::size; }

                /// scalar type? vector type?
                static constexpr bool is_vector = {{ ast.type.name }}_detail::is_vector;

                /// memory alignment
                static constexpr size_t alignment = {{ ast.type.name }}_detail::alignment;

                /// forward to base
                FORWARD2(impl, composed);
            };
        };

    } // end namespace

    /// public z{{ ast.type.name }} implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct z{{ ast.type.name }} : public {{ ast.type.name }}_detail::__z{{ ast.type.name }}<features>::impl
    {
            /// complete vector
            using zval_t = z{{ ast.type.name }}<features>;
            /// complete boolean vector
            using bval_t = b{{ ast.type.name }}<features>;

            using tag = zval_tag;

            using element_t = {{ ast.type.scalar_type }};

            /// vector size (1 - scalar, 4, 8, 16, ...)
            static constexpr size_t size() { return {{ ast.type.name }}_detail::size; }

            /// scalar type? vector type?
            static constexpr bool is_vector = {{ ast.type.name }}_detail::is_vector;

            /// memory alignment
            static constexpr size_t alignment = {{ ast.type.name }}_detail::alignment;


            /// forward to base
            FORWARD2(z{{ ast.type.name }}, {{ ast.type.name }}_detail::__z{{ ast.type.name }}<features>::impl);
    };

    /// public b{{ ast.type.name }} implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct b{{ ast.type.name }} : public {{ ast.type.name }}_detail::__b{{ ast.type.name }}<features>::impl
    {
        /// complete vector
        using zval_t = z{{ ast.type.name }}<features>;
        /// complete boolean vector
        using bval_t = b{{ ast.type.name }}<features>;

        using tag = bval_tag;

        using element_t = bool;

        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size() { return {{ ast.type.name }}_detail::size; }

        /// scalar type? vector type?
        static constexpr bool is_vector = {{ ast.type.name }}_detail::is_vector;

        /// memory alignment
        static constexpr size_t alignment = {{ ast.type.name }}_detail::alignment;

        /// forward to base
        FORWARD2(b{{ ast.type.name }}, {{ ast.type.name }}_detail::__b{{ ast.type.name }}<features>::impl);
    };

    static_assert(is_zval<z{{ ast.type.name }}<0>>::value, "is_zval for z{{ ast.type.name }} failed.");
    static_assert(is_bval<b{{ ast.type.name }}<0>>::value, "is_bval for b{{ ast.type.name }} failed.");

    static_assert({{ Verifications.render_fp_condition(ast) }}is_floating_point<z{{ ast.type.name }}<0>>::value, "is_floating_point for z{{ ast.type.name }} failed.");
    static_assert({{ Verifications.render_int_condition(ast) }}is_integral<z{{ ast.type.name }}<0>>::value, "is_integral for z{{ ast.type.name }} failed.");

    static_assert({{ Verifications.render_float_condition(ast) }}is_float<z{{ ast.type.name }}<0>>::value, "is_float for z{{ ast.type.name }} failed.");
    static_assert({{ Verifications.render_double_condition(ast) }}is_double<z{{ ast.type.name }}<0>>::value, "is_double for z{{ ast.type.name }} failed.");

    ///@}
}}}
