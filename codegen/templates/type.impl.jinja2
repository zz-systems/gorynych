//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file {{ ast.type.name }}.impl.hpp
 * @brief
 * This file provides defines required components and logic for {{ ast.type.name }} {{ ast.type.target }} target.
 * Provides unified access to {{ ast.type.size }} '{{ ast.type.scalar_type }}' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
{% for module in Traits.render(ast.modules) %}
#include "traits/{{ module }}.hpp"
{% endfor %}

namespace zacc { namespace backend { namespace {{ ast.type.target }} {

    /// @cond
    template<uint64_t features>
    struct b{{ ast.type.name }};

    template<uint64_t features>
    struct z{{ ast.type.name }};
    /// @endcond

    {% for module in ast.modules.initializers + ast.modules.modules %}

    // =================================================================================================================
    /**
     * @name {{ module.name }} modules
     */
    ///@{

    /**
     * @brief {{ module.name }}
     * @relates {{ ast.type.name }}
     * @remark {{ ast.type.target }}
     */
    template<typename Composed>
    struct {{ Modules.render(module, ast) }}
    {

        /**
         * @brief {{ module.name }} basic interface implementation
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = z{{ ast.type.name }}<Base::features>;
            /// complete boolean vector
            using bval_t        = b{{ ast.type.name }}<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            {% if not module in ast.modules.initializers %}
            /// forward to base
            FORWARD(__impl);
            {% endif  %}
            {% for func in module.functions %}
                {% for body in func.bodies %}

            /**
             * @brief {{ module.name }} {{ body.target }}
             * @relates {{ ast.type.name }}
             * @remark {{ ast.type.target }} {{ body.target }}
             */
            {{ Functions.render(func.signature, (module, ast, body)) }} {

                {% if not module in ast.modules.initializers  %}
                ZTRACE_BACKEND("{{ ast.type.target }}.{{ast.type.name}}.impl", __LINE__, "{{ ast.type.name }}({{ ast.type.scalar_type }}[{{ast.type.size}}])", "{{body.target}}", "{{func.signature.name}}");
                {% else %}
                ZTRACE_BACKEND("{{ ast.type.target }}.{{ast.type.name}}.impl", __LINE__, "{{ ast.type.name }}({{ ast.type.scalar_type }}[{{ast.type.size}}])", "{{body.target}}", "CONS({{Functions.render_args_signature(func.signature)}})");
                {% endif %}

                    {% for instruction in Functions.render(body) %}
                {{ instruction }}
                    {% endfor %}
            }

                {% endfor %}
            {% endfor %}
        };

        /**
         * @brief {{ module.name }} public interface implementation
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         */
        template<typename base_t>
        using impl = traits::{{ module.name }}<__impl<base_t>, {{ Modules.render(module, ast)[0] }}{{ ast.type.name }}<base_t::features>>;

    };

    ///@}

    {% endfor %}

    // Type composition ================================================================================================

    /**
     * @name {{ ast.type.name }} composition
     */
    ///@{

        /**
         * @brief zval parametrization using
         * - '{{ ast.type.vector_type }}' as underlying vector type
         * - '{{ ast.type.scalar_type }}' as scalar type
         * - '{{ ast.type.size }}' as vector size
         * - '{{ ast.type.alignment }}' as alignment
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         */
        template<uint64_t features>
        struct __zval_{{ ast.type.name }}
        {
            /// vector base
            using zval_base_t = zval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, zval_tag, {{ ast.type.size }}, {{ ast.type.alignment }}, features>;
            /// boolean vector base
            using bval_base_t = bval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, features>;

            /// implementation
            struct impl : public zval_base_t
            {
                /// complete vector
                using zval_t = z{{ ast.type.name }}<features>;
                /// complete boolean vector
                using bval_t = b{{ ast.type.name }}<features>;

                /// forward to base
                FORWARD2(impl, zval_base_t);
            };
        };
        /**
         * @brief zval composition
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __z{{ ast.type.name }}
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using zval_t = typename __zval_{{ ast.type.name }}<features>::impl;

            /// compose type from modules
            using composition_t = compose
            <
            {% for trait in Traits.render(ast, ModuleTypes.DEFAULT) %}
                {{ trait }},
            {% endfor %}

                composable<zval_t>::template type
            >;

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = z{{ ast.type.name }}<features>;
                /// complete boolean vector
                using bval_t = b{{ ast.type.name }}<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };

        /**
         * @brief bval parametrization using
         * - '{{ ast.type.vector_type }}' as underlying vector type
         * - '{{ ast.type.scalar_type }}' as scalar type
         * - '{{ ast.type.size }}' as vector size
         * - '{{ ast.type.alignment }}' as alignment
         * @relates {{ ast.type.name }}
         * @remark {{ ast.type.target }}
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __bval_{{ ast.type.name }}
        {
            /// complete vector base
            using zval_base_t = zval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.scalar_type }}, zval_tag, {{ ast.type.size }}, {{ ast.type.alignment }}, features>;
            /// complete boolean vector base
            using bval_base_t = bval<{{ ast.type.vector_type }}, {{ ast.type.mask_type }}, {{ ast.type.size }}, {{ ast.type.alignment }}, features>;

            /// implementation
            struct impl : public bval_base_t
            {
                /// complete vector
                using zval_t = z{{ ast.type.name }}<features>;
                /// complete boolean vector
                using bval_t = b{{ ast.type.name }}<features>;

                /// forward to base
                FORWARD2(impl, bval_base_t);
            };
        };

        /// b{{ ast.type.name }} composition
        /// @tparam features feature mask
        template<uint64_t features>
        struct __b{{ ast.type.name }}
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using bval_t = typename __bval_{{ ast.type.name }}<features>::impl;
            /// compose type from modules
            using composition_t = compose
            <
            {% for trait in Traits.render(ast, ModuleTypes.BOOLEAN) %}
                {{ trait }},
            {% endfor %}

                composable<bval_t>::template type
            >;

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = z{{ ast.type.name }}<features>;
                /// complete boolean vector
                using bval_t = b{{ ast.type.name }}<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };
    //}

    /// public z{{ ast.type.name }} implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct z{{ ast.type.name }} : public __z{{ ast.type.name }}<features>::impl
    {
        /// complete vector
        using zval_t = z{{ ast.type.name }}<features>;
        /// complete boolean vector
        using bval_t = b{{ ast.type.name }}<features>;

        /// forward to base
        FORWARD2(z{{ ast.type.name }}, __z{{ ast.type.name }}<features>::impl);
    };

    /// public b{{ ast.type.name }} implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct b{{ ast.type.name }} : public __b{{ ast.type.name }}<features>::impl
    {
        /// complete vector
        using zval_t = z{{ ast.type.name }}<features>;
        /// complete boolean vector
        using bval_t = b{{ ast.type.name }}<features>;

        /// forward to base
        FORWARD2(b{{ ast.type.name }}, __b{{ ast.type.name }}<features>::impl);
    };

    static_assert(is_zval<z{{ ast.type.name }}<0>>::value, "is_zval for z{{ ast.type.name }} failed.");
    static_assert(is_bval<b{{ ast.type.name }}<0>>::value, "is_bval for b{{ ast.type.name }} failed.");

    static_assert({{ Verifications.render_fp_condition(ast) }}is_floating_point<z{{ ast.type.name }}<0>>::value, "is_floating_point for z{{ ast.type.name }} failed.");
    static_assert({{ Verifications.render_int_condition(ast) }}is_integral<z{{ ast.type.name }}<0>>::value, "is_integral for z{{ ast.type.name }} failed.");

    static_assert({{ Verifications.render_float_condition(ast) }}is_float<z{{ ast.type.name }}<0>>::value, "is_float for z{{ ast.type.name }} failed.");
    static_assert({{ Verifications.render_double_condition(ast) }}is_double<z{{ ast.type.name }}<0>>::value, "is_double for z{{ ast.type.name }} failed.");

    ///@}
}}}