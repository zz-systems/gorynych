//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#include "gtest/gtest.h"
#include "util/testing/gtest_ext.hpp"
#include "system/arch.hpp"
#include <random>

namespace zacc { namespace test {

    {% for module in ast.initializers + ast.modules %}
        {% if module.has_tests() %}
// =====================================================================================================================
        {% endif %}
        {% for func in module.functions %}
            {% for branch in func.branches() %}
                {% if branch.test and (module.name != 'bitwise' or not type.type.startswith('float')) %}
    TEST({{ type.branch}}_{{ module.mangled_name() }}, {{ branch.name }}_{{ branch.branch_name }})
    {
REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas({{type.alignment}}) std::array<{{ type.scalar_t }}, {{type.vec_size}}> a, b, expected;
        for(int i = 0; i < {{type.vec_size}}; i++)
        {
            a[i] = static_cast<{{ type.scalar_t }}>(distribution2(generator));
            b[i] = static_cast<{{ type.scalar_t }}>(distribution1(generator));

            expected[i] = ({{ type.scalar_t }}) ({{ branch.expected }});
        }

        VASSERT_EQ(({{ branch.actual }}), z{{ type.type }}(expected));
    }

                {% endif %}
            {% endfor %}
        {% endfor %}
        {% if module.has_tests() %}
// =====================================================================================================================
        {% endif %}
    {% endfor %}

}}