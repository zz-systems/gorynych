version: '1.0.{build}'
os: Visual Studio 2015

# compiler: expands the build matrix to include multiple compilers (per os)
platform:
  - x64

configuration:
- Release

# Only clone the top level commit; don't bother with history
shallow_clone: true

# environment: specifies additional global variables to define per row in build matrix
environment:
  global:
    CLFFT_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\nmake\\release"
    OPENCL_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\opencl"
    OPENCL_REGISTRY: "https://www.khronos.org/registry/cl"
    PYTHON: "C:\\Python36"
    
init:
- cmake --version
- python --version

#- C:\"Program Files (x86)"\"Microsoft Visual Studio"\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat %PLATFORM%
- C:\"Program Files (x86)"\"Microsoft Visual Studio 14.0"\VC\vcvarsall.bat %PLATFORM%
# setup python 
install:
############################################################################
# Install yasha
############################################################################
- "%PYTHON%\\python.exe -m pip install yasha"
############################################################################
# Install Ninja
############################################################################
- set NINJA_URL="https://github.com/ninja-build/ninja/releases/download/v1.6.0/ninja-win.zip"
- appveyor DownloadFile %NINJA_URL% -FileName ninja.zip
- 7z x ninja.zip -oC:\projects\deps\ninja > nul
- set PATH=C:\projects\deps\ninja;%PATH%
- ninja --version
############################################################################
# Install OpenCL
############################################################################
#- echo Fetching source
#- git submodule update --init --recursive 
#- echo Installing OpenCL
#- ps: mkdir $env:OPENCL_ROOT
#- ps: pushd $env:OPENCL_ROOT
#- ps: $opencl_registry = $env:OPENCL_REGISTRY
# This downloads the source to the Khronos ICD library
#- git clone --depth 1 https://github.com/KhronosGroup/OpenCL-ICD-Loader.git
#- ps: mv ./OpenCL-ICD-Loader/* .
# This downloads all the opencl header files
# The cmake build files expect a directory called inc
#- ps: mkdir inc/CL
#- git clone --depth 1 https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL
#- ps: wget $opencl_registry/api/2.1/cl.hpp -OutFile inc/CL/cl.hpp
# - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }
# Create the static import lib in a directory called lib, so findopencl() will find it
#- ps: mkdir lib
#- ps: pushd lib
#- cmake -G "NMake Makefiles" ..
#- nmake
#- ps: popd
## Switch to OpenCL 1.2 headers
#- ps: pushd inc/CL
#- git fetch origin opencl12:opencl12
#- git checkout opencl12
#- ps: popd
# Rename the inc directory to include, so FindOpencl() will find it
#- ps: ren inc include
#- ps: popd

# before_build is used to run configure steps
before_build:
- echo before_build step
- call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
- cd C:\projects\gorynych


build_script:
  - mkdir build
  #- cmake -H. -G Ninja -Bbuild -DCMAKE_C_FLAGS=TRUE -DCMAKE_CXX_FLAGS=TRUE -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang.exe" -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang.exe" -DCMAKE_LINKER="C:/Program Files/LLVM/bin/lld-link.exe"
  - cd build
  - cmake -G"Visual Studio 14 2015" -T"LLVM-vs2014" .. -DCMAKE_BUILD_TYPE=%CONFIGURATION% -DOPENCL_ROOT=%OPENCL_ROOT% -DPYTHON_BIN=%PYTHON%
  
  - cmake --build . --config %CONFIGURATION% --target zacc.system.detect
  #- cmake --build . --config Release --target zacc.tests.all
  
test_script:
- cd %CONFIGURATION%
- dir
#- ./zacc.system.detect.exe
#- ./zacc.sse.sse2.tests.exe
#- ./zacc.sse.sse2.tests.exe
#- ./zacc.sse.sse3.tests.exe
#- ./zacc.sse.sse41.tests.exe
#- ./zacc.sse.sse41.fma3.tests.exe
#- ./zacc.sse.sse41.fma4.tests.exe
#- ./zacc.avx.tests.exe
#- ./zacc.avx2.tests.exe
- zacc.system.detect.exe