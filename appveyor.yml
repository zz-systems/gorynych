version: '1.0.{build}'
os: Visual Studio 2015

# compiler: expands the build matrix to include multiple compilers (per os)
platform:
  - x64

configuration:
- Release

# Only clone the top level commit; don't bother with history
shallow_clone: false

# environment: specifies additional global variables to define per row in build matrix
environment:
  global:
        CLFFT_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\nmake\\release"
        OPENCL_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\opencl"
        OPENCL_REGISTRY: "https://www.khronos.org/registry/cl"    
    
  matrix:
    -   PYTHON: "C:/Python36/"
        BUILD_ENV: "MSYS Makefiles"
        BUILD_DIR: "build"
        PYTHON_VERSION: "3.6"
      

install:
- ps: ls
- cd C:\projects\zacc
- ps: ls
- git submodule update --init --recursive
# Install yasha
- "%PYTHON%/python.exe -m pip install yasha"


# Install OpenCL
#- echo Fetching source
#- echo Installing OpenCL
#- ps: mkdir $env:OPENCL_ROOT
#- ps: pushd $env:OPENCL_ROOT
#- ps: $opencl_registry = $env:OPENCL_REGISTRY
# This downloads the source to the Khronos ICD library
#- git clone --depth 1 https://github.com/KhronosGroup/OpenCL-ICD-Loader.git
#- ps: mv ./OpenCL-ICD-Loader/* .
# This downloads all the opencl header files
# The cmake build files expect a directory called inc
#- ps: mkdir inc/CL
#- git clone --depth 1 https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL
#- ps: wget $opencl_registry/api/2.1/cl.hpp -OutFile inc/CL/cl.hpp
# - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }
# Create the static import lib in a directory called lib, so findopencl() will find it
#- ps: mkdir lib
#- ps: pushd lib
#- cmake -G "NMake Makefiles" ..
#- nmake
#- ps: popd
## Switch to OpenCL 1.2 headers
#- ps: pushd inc/CL
#- git fetch origin opencl12:opencl12
#- git checkout opencl12
#- ps: popd
# Rename the inc directory to include, so FindOpencl() will find it
#- ps: ren inc include
#- ps: popd

# before_build is used to run configure steps
before_build:
- echo before_build step
- set PATH=c:\Program Files\LLVM\bin\;%PATH%
- set INCLUDE=c:\Program Files\LLVM\lib\clang\4.0.0\include\;%INCLUDE%
- cd C:\projects\zacc


build_script:
  - mkdir %BUILD_DIR% && cd %BUILD_DIR%
  - cmake .. -G"%BUILD_ENV%" -DPYTHON_EXECUTABLE:FILEPATH="%PYTHON%"/python.exe
  - cmake --build . --config %CONFIGURATION% --target zacc.system.detect
  - cmake --build . --config %CONFIGURATION% --target zacc.tests.all
  
test_script:
- ls
#- ps: gci -Filter zacc.tests.*.exe | foreach { ".\$($_.Name)"} | iex
- ctest --output-on-failure