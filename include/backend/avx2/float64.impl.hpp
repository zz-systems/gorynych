//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file float64.impl.hpp
 * @brief
 * This file provides defines required components and logic for float64 avx2 target.
 * Provides unified access to 4 'double' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/bitwise.hpp"
#include "traits/logical.hpp"
#include "traits/conditional.hpp"
#include "traits/math.hpp"
#include "traits/numeric.hpp"
#include "traits/io.hpp"
#include "traits/comparable.hpp"
#include "traits/equatable.hpp"
#include "traits/arithmetic.hpp"

namespace zacc { namespace backend { namespace avx2 {

    /// @cond
    template<uint64_t features>
    struct bfloat64;

    template<uint64_t features>
    struct zfloat64;
    /// @endcond


    // =================================================================================================================
    /**
     * @name construction modules
     */
    ///@{

    /**
     * @brief construction
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(  ) : Base()  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS()");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(__m256 value) : Base(_mm256_cvtps_pd(_mm256_castps256_ps128(value)))  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(__m256)");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(__m256d value) : Base(value)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(__m256d)");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(__m256i value) : Base(_mm256_cvtepi32_pd(_mm256_castsi256_si128(value)))  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(__m256i)");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(double value) : Base(_mm256_set1_pd(value))  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(double)");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(std::array<typename Base::element_t, Base::size()> value) : Base(_mm256_load_pd(value.data()))  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(std::array<typename Base::element_t, Base::size()>)");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(double _3, double _2, double _1, double _0) : Base(_mm256_set_pd(_0, _1, _2, _3))  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(double, double, double, double)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name construction modules
     */
    ///@{

    /**
     * @brief construction
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct bfloat64_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(  ) : Base()  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS()");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(zval_t value) : Base(value)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(zval_t)");

            }


            /**
             * @brief construction 
             * @relates float64
             * @remark avx2 
             */
            constexpr __impl(bval_t value, last_operation last_op) : Base(value, last_op)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "", "CONS(bval_t value, last_operation)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, bfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io modules
     */
    ///@{

    /**
     * @brief io
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_io
    {

        /**
         * @brief io basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief io default
             * @relates float64
             * @remark avx2 default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vstore");

                _mm256_store_pd(&(*result), input);
            }


            /**
             * @brief io default
             * @relates float64
             * @remark avx2 default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vstream");

                _mm256_stream_pd(&(*result), input);
            }


            /**
             * @brief io default
             * @relates float64
             * @remark avx2 default
             */
            template<typename RandomIt> friend zfloat64<Base::features> vgather(RandomIt input, const zint32<Base::features> &index, Composed)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vgather");

                auto i = _mm256_extractf128_si256(index, 1);
                return _mm256_i32gather_pd(&(*input), i, 8);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::io<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name math modules
     */
    ///@{

    /**
     * @brief math
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_math
    {

        /**
         * @brief math basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vabs(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vabs");

                return _mm256_max_pd(one, -one);
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vmin(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vmin");

                return _mm256_min_pd(one, other);
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vmax(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vmax");

                return _mm256_max_pd(one, other);
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vclamp(Composed self, Composed from, Composed to)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vclamp");

                return vmin(to, vmax(from, self));
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vrcp(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vrcp");

                return (1 / one);
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vtrunc(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vtrunc");

                return _mm256_cvtepi32_pd(_mm256_cvttpd_epi32(one));
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vfloor(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vfloor");

                return _mm256_floor_pd(one);
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vceil(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vceil");

                return _mm256_ceil_pd(one);
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vround(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vround");

                return _mm256_round_pd (one, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC);
            }


            /**
             * @brief math default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vsqrt(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vsqrt");

                return _mm256_sqrt_pd(one);
            }

        };

        /**
         * @brief math public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::math<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name numeric modules
     */
    ///@{

    /**
     * @brief numeric
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_numeric
    {

        /**
         * @brief numeric basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);
        };

        /**
         * @brief numeric public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::numeric<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic modules
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief arithmetic default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vneg(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vneg");

                return _mm256_sub_pd(_mm256_setzero_pd(), one);
            }


            /**
             * @brief arithmetic default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vadd(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vadd");

                return _mm256_add_pd(one, other);
            }


            /**
             * @brief arithmetic default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vsub(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vsub");

                return _mm256_sub_pd(one, other);
            }


            /**
             * @brief arithmetic default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vmul(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vmul");

                return _mm256_mul_pd(one, other);
            }


            /**
             * @brief arithmetic default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vdiv(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vdiv");

                return _mm256_div_pd(one, other);
            }


            /**
             * @brief arithmetic default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vfmadd(Composed multiplicand, Composed multiplier, Composed addendum)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vfmadd");

                return _mm256_fmadd_pd(multiplicand, multiplier, addendum);
            }


            /**
             * @brief arithmetic default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vfmsub(Composed multiplicand, Composed multiplier, Composed addendum)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vfmsub");

                return _mm256_fmsub_pd(multiplicand, multiplier, addendum);
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::arithmetic<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise modules
     */
    ///@{

    /**
     * @brief bitwise
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vbneg(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vbneg");

                auto zero = _mm256_setzero_pd();
                auto ones = _mm256_cmp_pd(zero, zero, _CMP_EQ_OQ);
                return _mm256_xor_pd(one, ones);
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vband(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vband");

                return _mm256_and_pd(one, other);
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vbor(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vbor");

                return _mm256_or_pd(one, other);
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vbxor(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vbxor");

                return _mm256_xor_pd(one, other);
            }


            /**
             * @brief bitwise avx2
             * @relates float64
             * @remark avx2 avx2
             */
            template<typename T = bool> friend std::enable_if_t<has_feature_v<Base, capabilities::AVX2>, T> is_set(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "avx2", "is_set");

                auto ival =  _mm256_castpd_si256(one);
                return _mm256_testc_si256(ival, _mm256_cmpeq_epi32(ival,ival));
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            template<typename T = bool> friend std::enable_if_t<!has_feature_v<Base, capabilities::AVX2>, T> is_set(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "is_set");

                auto hi = _mm_castpd_si128(_mm256_extractf128_pd(one, 1));
                auto lo = _mm_castpd_si128(_mm256_extractf128_pd(one, 0));
                return _mm_test_all_ones(hi) != 0 && _mm_test_all_ones(lo) != 0;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparable modules
     */
    ///@{

    /**
     * @brief comparable
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_comparable
    {

        /**
         * @brief comparable basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief comparable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vgt(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vgt");

                return _mm256_cmp_pd(one, other, _CMP_GT_OQ);
            }


            /**
             * @brief comparable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vlt(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vlt");

                return _mm256_cmp_pd(one, other, _CMP_LT_OQ);
            }


            /**
             * @brief comparable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vge(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vge");

                return _mm256_cmp_pd(one, other, _CMP_GE_OQ);
            }


            /**
             * @brief comparable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vle(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vle");

                return _mm256_cmp_pd(one, other, _CMP_LE_OQ);
            }

        };

        /**
         * @brief comparable public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::comparable<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical modules
     */
    ///@{

    /**
     * @brief logical
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief logical default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vlneg(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vlneg");

                return _mm256_cmp_pd(one, _mm256_setzero_pd(), _CMP_EQ_OQ);
            }


            /**
             * @brief logical default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vlor(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vlor");

                return _mm256_or_pd(one, other);
            }


            /**
             * @brief logical default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vland(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vland");

                return _mm256_and_pd(one, other);
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable modules
     */
    ///@{

    /**
     * @brief equatable
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief equatable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> veq(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "veq");

                return _mm256_cmp_pd(one, other, _CMP_EQ_OQ);
            }


            /**
             * @brief equatable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vneq(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vneq");

                return _mm256_cmp_pd(one, other, _CMP_NEQ_OQ);
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional modules
     */
    ///@{

    /**
     * @brief conditional
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct zfloat64_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief conditional default
             * @relates float64
             * @remark avx2 default
             */
            friend zfloat64<Base::features> vsel(bval_t condition, Composed if_value, Composed else_value)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vsel");

                return _mm256_blendv_pd(else_value, if_value, condition);
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::conditional<__impl<base_t>, zfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io modules
     */
    ///@{

    /**
     * @brief io
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct bfloat64_io
    {

        /**
         * @brief io basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief io default
             * @relates float64
             * @remark avx2 default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vstore");

                _mm256_store_pd(&(*result), input);
            }


            /**
             * @brief io default
             * @relates float64
             * @remark avx2 default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vstream");

                _mm256_stream_pd(&(*result), input);
            }


            /**
             * @brief io default
             * @relates float64
             * @remark avx2 default
             */
            template<typename RandomIt> friend bfloat64<Base::features> vgather(RandomIt input, const zint32<Base::features> &index, Composed)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vgather");

                auto i = _mm256_extractf128_si256(index, 1);
                return _mm256_i32gather_pd(&(*input), i, 8);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::io<__impl<base_t>, bfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise modules
     */
    ///@{

    /**
     * @brief bitwise
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct bfloat64_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vbneg(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vbneg");

                auto zero = _mm256_setzero_pd();
                auto ones = _mm256_cmp_pd(zero, zero, _CMP_EQ_OQ);
                return _mm256_xor_pd(one, ones);
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vband(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vband");

                return _mm256_and_pd(one, other);
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vbor(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vbor");

                return _mm256_or_pd(one, other);
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vbxor(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vbxor");

                return _mm256_xor_pd(one, other);
            }


            /**
             * @brief bitwise avx2
             * @relates float64
             * @remark avx2 avx2
             */
            template<typename T = bool> friend std::enable_if_t<has_feature_v<Base, capabilities::AVX2>, T> is_set(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "avx2", "is_set");

                auto ival =  _mm256_castpd_si256(one);
                return _mm256_testc_si256(ival, _mm256_cmpeq_epi32(ival,ival));
            }


            /**
             * @brief bitwise default
             * @relates float64
             * @remark avx2 default
             */
            template<typename T = bool> friend std::enable_if_t<!has_feature_v<Base, capabilities::AVX2>, T> is_set(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "is_set");

                auto hi = _mm_castpd_si128(_mm256_extractf128_pd(one, 1));
                auto lo = _mm_castpd_si128(_mm256_extractf128_pd(one, 0));
                return _mm_test_all_ones(hi) != 0 && _mm_test_all_ones(lo) != 0;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, bfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical modules
     */
    ///@{

    /**
     * @brief logical
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct bfloat64_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief logical default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vlneg(Composed one)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vlneg");

                return _mm256_cmp_pd(one, _mm256_setzero_pd(), _CMP_EQ_OQ);
            }


            /**
             * @brief logical default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vlor(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vlor");

                return _mm256_or_pd(one, other);
            }


            /**
             * @brief logical default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vland(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vland");

                return _mm256_and_pd(one, other);
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, bfloat64<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable modules
     */
    ///@{

    /**
     * @brief equatable
     * @relates float64
     * @remark avx2
     */
    template<typename Composed>
    struct bfloat64_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat64<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat64<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief equatable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> veq(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "veq");

                return _mm256_cmp_pd(one, other, _CMP_EQ_OQ);
            }


            /**
             * @brief equatable default
             * @relates float64
             * @remark avx2 default
             */
            friend bfloat64<Base::features> vneq(Composed one, Composed other)  {

                ZTRACE_BACKEND("avx2.float64.impl", __LINE__, "float64(double[4])", "default", "vneq");

                return _mm256_cmp_pd(one, other, _CMP_NEQ_OQ);
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates float64
         * @remark avx2
         */
        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, bfloat64<base_t::features>>;

    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name float64 composition
     */
    ///@{

        /**
         * @brief zval parametrization using
         * - '__m256d' as underlying vector type
         * - 'double' as scalar type
         * - '4' as vector size
         * - '32' as alignment
         * @relates float64
         * @remark avx2
         */
        template<uint64_t features>
        struct __zval_float64
        {
            /// vector base
            using zval_base_t = zval<__m256d, __m256d, double, zval_tag, 4, 32, features>;
            /// boolean vector base
            using bval_base_t = bval<__m256d, __m256d, 4, 32, features>;

            /// implementation
            struct impl : public zval_base_t
            {
                /// complete vector
                using zval_t = zfloat64<features>;
                /// complete boolean vector
                using bval_t = bfloat64<features>;

                /// forward to base
                FORWARD2(impl, zval_base_t);
            };
        };
        /**
         * @brief zval composition
         * @relates float64
         * @remark avx2
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __zfloat64
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using zval_t = typename __zval_float64<features>::impl;

            /// compose type from modules
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                zfloat64_io<impl>::template impl,
                zfloat64_math<impl>::template impl,
                zfloat64_numeric<impl>::template impl,
                zfloat64_arithmetic<impl>::template impl,
                zfloat64_bitwise<impl>::template impl,
                zfloat64_comparable<impl>::template impl,
                zfloat64_logical<impl>::template impl,
                zfloat64_equatable<impl>::template impl,
                zfloat64_conditional<impl>::template impl,
                zfloat64_construction<impl>::template impl,

                composable<zval_t>::template type
            >;

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = zfloat64<features>;
                /// complete boolean vector
                using bval_t = bfloat64<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };

        /**
         * @brief bval parametrization using
         * - '__m256d' as underlying vector type
         * - 'double' as scalar type
         * - '4' as vector size
         * - '32' as alignment
         * @relates float64
         * @remark avx2
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __bval_float64
        {
            /// complete vector base
            using zval_base_t = zval<__m256d, __m256d, double, zval_tag, 4, 32, features>;
            /// complete boolean vector base
            using bval_base_t = bval<__m256d, __m256d, 4, 32, features>;

            /// implementation
            struct impl : public bval_base_t
            {
                /// complete vector
                using zval_t = zfloat64<features>;
                /// complete boolean vector
                using bval_t = bfloat64<features>;

                /// forward to base
                FORWARD2(impl, bval_base_t);
            };
        };

        /// bfloat64 composition
        /// @tparam features feature mask
        template<uint64_t features>
        struct __bfloat64
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using bval_t = typename __bval_float64<features>::impl;
            /// compose type from modules
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                bfloat64_io<impl>::template impl,
                bfloat64_bitwise<impl>::template impl,
                bfloat64_logical<impl>::template impl,
                bfloat64_equatable<impl>::template impl,
                bfloat64_construction<impl>::template impl,

                composable<bval_t>::template type
            >;

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = zfloat64<features>;
                /// complete boolean vector
                using bval_t = bfloat64<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };
    //}

    /// public zfloat64 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct zfloat64 : public __zfloat64<features>::impl
    {
        /// complete vector
        using zval_t = zfloat64<features>;
        /// complete boolean vector
        using bval_t = bfloat64<features>;

        /// forward to base
        FORWARD2(zfloat64, __zfloat64<features>::impl);
    };

    /// public bfloat64 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct bfloat64 : public __bfloat64<features>::impl
    {
        /// complete vector
        using zval_t = zfloat64<features>;
        /// complete boolean vector
        using bval_t = bfloat64<features>;

        /// forward to base
        FORWARD2(bfloat64, __bfloat64<features>::impl);
    };

    static_assert(is_zval<zfloat64<0>>::value, "is_zval for zfloat64 failed.");
    static_assert(is_bval<bfloat64<0>>::value, "is_bval for bfloat64 failed.");

    static_assert(is_floating_point<zfloat64<0>>::value, "is_floating_point for zfloat64 failed.");
    static_assert(!is_integral<zfloat64<0>>::value, "is_integral for zfloat64 failed.");

    static_assert(!is_float<zfloat64<0>>::value, "is_float for zfloat64 failed.");
    static_assert(is_double<zfloat64<0>>::value, "is_double for zfloat64 failed.");

    ///@}
}}}