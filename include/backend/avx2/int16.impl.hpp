//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <x86intrin.h>
#include <type_traits>

#include "util/type_composition.hpp"

#include "zval.hpp"
#include "common.hpp"
#include "type_traits.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/io.hpp"
#include "traits/arithmetic.hpp"
#include "traits/bitwise.hpp"
#include "traits/bitwise_shift.hpp"
#include "traits/logical.hpp"
#include "traits/comparison.hpp"
#include "traits/conditional.hpp"

/**
 * @brief int16 implementation for the avx2 branch
 * provides unified access to 16 'short' values
 */

namespace zacc { namespace avx2 {

    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {


            /**
             * @brief construction default branch
             * @relates int16
             * @remark avx2 - default
             */
            __impl(__m256i value) : base_t(value) {
            }


            /**
             * @brief construction default branch
             * @relates int16
             * @remark avx2 - default
             */
            __impl(short value) : base_t(_mm256_set1_epi16(value)) {
            }


            /**
             * @brief construction default branch
             * @relates int16
             * @remark avx2 - default
             */
            __impl(short *value) : base_t(_mm256_load_si256((__m256i*)value)) {
            }


            /**
             * @brief construction default branch
             * @relates int16
             * @remark avx2 - default
             */
            __impl(short arg15, short arg14, short arg13, short arg12, short arg11, short arg10, short arg9, short arg8, short arg7, short arg6, short arg5, short arg4, short arg3, short arg2, short arg1, short arg0) : base_t(_mm256_set_epi16(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)) {
            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::construction<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief io default branch
             * @relates int16
             * @remark avx2 - default
             */
            void io_store(typename base_t::extracted_t &target) const noexcept {
                _mm256_store_si256((__m256i*)target.data(), base_t::_value);
            }


            /**
             * @brief io default branch
             * @relates int16
             * @remark avx2 - default
             */
            void io_stream(typename base_t::extracted_t &target) const noexcept {
                _mm256_stream_si256((__m256i*)target.data(), base_t::_value);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::io<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic operations
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t arithmetic_negate(composed_t one)  noexcept {
                return _mm256_sub_epi16(_mm256_setzero_si256(), one.get_value());
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t arithmetic_add(composed_t one, composed_t other)  noexcept {
                return _mm256_add_epi16(one.get_value(), other.get_value());
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t arithmetic_sub(composed_t one, composed_t other)  noexcept {
                return _mm256_sub_epi16(one.get_value(), other.get_value());
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t arithmetic_mul(composed_t one, composed_t other)  noexcept {
                return _mm256_mullo_epi16(one.get_value(), other.get_value());
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::arithmetic<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_negate(composed_t one)  noexcept {
                __m256i junk;
                auto ones = _mm256_cmpeq_epi16(junk, junk);
                return _mm256_xor_si256(one.get_value(), ones);
            }


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_and(composed_t one, composed_t other)  noexcept {
                return _mm256_or_si256(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_or(composed_t one, composed_t other)  noexcept {
                return _mm256_and_si256(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_xor(composed_t one, composed_t other)  noexcept {
                return _mm256_xor_si256(one.get_value(), other.get_value());
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::bitwise<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise_shift operations
     */
    ///@{

    /**
     * @brief bitwise_shift
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_bitwise_shift
    {

        /**
         * @brief bitwise_shift basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_shift_sll(composed_t one, composed_t other)  noexcept {
                return _mm256_sll_epi16(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_shift_srl(composed_t one, composed_t other)  noexcept {
                return _mm256_srl_epi16(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_shift_slli(const composed_t one, const size_t other)  noexcept {
                return _mm256_slli_epi16(one.get_value(), other);
            }


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t bitwise_shift_srli(const composed_t one, const size_t other)  noexcept {
                return _mm256_srli_epi16(one.get_value(), other);
            }

        };

        /**
         * @brief bitwise_shift public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::bitwise_shift<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief logical default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t logical_negate(composed_t one)  noexcept {
                return _mm256_cmpeq_epi32(one.get_value(), _mm256_setzero_si256());
            }


            /**
             * @brief logical default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t logical_or(composed_t one, composed_t other)  noexcept {
                return _mm256_or_si256(one.get_value(), other.get_value());
            }


            /**
             * @brief logical default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t logical_and(composed_t one, composed_t other)  noexcept {
                return _mm256_and_si256(one.get_value(), other.get_value());
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::logical<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparison operations
     */
    ///@{

    /**
     * @brief comparison
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_comparison
    {

        /**
         * @brief comparison basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t comparison_eq(composed_t one, composed_t other)  noexcept {
                return _mm256_cmpeq_epi16(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t comparison_neq(composed_t one, composed_t other)  noexcept {
                return _mm256_xor_si256(_mm256_cmpeq_epi16(one.get_value(), other.get_value()), _mm256_setzero_si256());
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t comparison_gt(composed_t one, composed_t other)  noexcept {
                return _mm256_cmpgt_epi16(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t comparison_lt(composed_t one, composed_t other)  noexcept {
                return (one != other) && (one <= other);
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t comparison_ge(composed_t one, composed_t other)  noexcept {
                return (one == other) || _mm256_cmpgt_epi16(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t comparison_le(composed_t one, composed_t other)  noexcept {
                return _mm256_xor_si256(_mm256_cmpgt_epi16(one.get_value(), other.get_value()), _mm256_setzero_si256());
            }

        };

        /**
         * @brief comparison public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::comparison<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional operations
     */
    ///@{

    /**
     * @brief conditional
     * @relates int16
     * @remark avx2
     */
    template<typename composed_t>
    struct int16_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief conditional default branch
             * @relates int16
             * @remark avx2 - default
             */
            friend composed_t vsel(composed_t condition, composed_t if_value, composed_t else_value)  noexcept {
                auto mask = _mm256_cmpeq_epi16(_mm256_setzero_si256(), condition.get_value());
                return _mm256_blendv_epi8(if_value.get_value(), else_value.get_value(), mask);
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates int16
         * @remark avx2
         */
        template<typename base_t>
        using impl = interface::conditional<__impl<base_t>, composed_t>;
    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name int16 composition
     */
    ///@{

    /**
     * @brief zval parametrization using
     * - '__m256i' as underlying vector type
     * - 'short' as scalar type
     * - '16' as vector size
     * - '32' as alignment
     * @relates int16
     * @remark avx2
     */
    template<uint64_t capability>
    struct __zval_int16
    {
        using zval_t = zval<__m256i, short, 16, 32, capability>;

        struct impl : public zval_t
        {
            FORWARD2(impl, zval_t);
        };
    };
    /**
     * @brief zval composition
     * @relates int16
     * @remark avx2
     */
    template<uint64_t capability>
    struct __zint16
    {
        struct impl;

        using zval_t = typename __zval_int16<capability>::impl;
        using composition_t = compose
        <
            printable::impl,
            iteratable::impl,
            convertable::impl,
            int16_io<impl>::template impl,
            int16_arithmetic<impl>::template impl,
            int16_bitwise<impl>::template impl,
            int16_bitwise_shift<impl>::template impl,
            int16_logical<impl>::template impl,
            int16_comparison<impl>::template impl,
            int16_conditional<impl>::template impl,
            int16_construction<impl>::template impl,

            composable<zval_t>::template type
        >;

        struct impl : public composition_t
        {
            FORWARD2(impl, composition_t);
        };
    };

    template<uint64_t capability = 0xFFFF'FFFF'FFFF'FFFF>
    using zint16 = typename __zint16<capability>::impl;

    ///@}
}}