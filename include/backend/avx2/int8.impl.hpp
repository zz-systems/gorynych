//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file int8.impl.hpp
 * @brief
 * This file provides defines required components and logic for int8 avx2 target.
 * Provides unified access to 32 'int8_t' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"
#include "backend/zval_interface.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/convertable.hpp"
#include "traits/printable.hpp"
#include "traits/math.hpp"
#include "traits/arithmetic.hpp"
#include "traits/conditional.hpp"
#include "traits/equatable.hpp"
#include "traits/bitwise.hpp"
#include "traits/logical.hpp"
#include "traits/comparable.hpp"
#include "traits/numeric.hpp"
#include "traits/io.hpp"

namespace zacc { namespace backend { namespace avx2
{
    /// @cond
    template<uint64_t features>
    struct bint8;

    template<uint64_t features>
    struct zint8;
    /// @endcond

    template<uint64_t FeatureMask>
    using izint8 = ztype<zval_tag, __m256i, __m256i, int8_t, 32, 32, FeatureMask>;

    template<uint64_t FeatureMask>
    using ibint8 = ztype<bval_tag, __m256i, __m256i, int8_t, 32, 32, FeatureMask>;

    namespace int8_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 32;

        /// memory alignment
        static constexpr size_t alignment = 32;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = __m256i;

        /// scalar type, like int for sse 4x integer vector
        using element_type = int8_t;

        /// mask type for boolean operations
        using mask_vector_type = __m256i;

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;
    }
}}}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::avx2::izint8<T::feature_mask>, T>::value
            || std::is_base_of<backend::avx2::ibint8<T::feature_mask>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 32;

        /// capabilities
        static constexpr uint64_t feature_mask = T::feature_mask;

        /// memory alignment
        static constexpr size_t alignment = 32;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = __m256i;

        /// scalar type, like int for sse 4x integer vector
        using element_type = int8_t;

        /// mask type for boolean operations
        using mask_vector_type = __m256i;

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;

        using zval_t = backend::avx2::zint8<T::feature_mask>;
        using bval_t = backend::avx2::bint8<T::feature_mask>;

        using tag = select_t<
            when<std::is_base_of<backend::avx2::izint8<T::feature_mask>, T>::value, zval_tag>,
            when<std::is_base_of<backend::avx2::ibint8<T::feature_mask>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace avx2 {

    namespace detail {

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_io
        {
            /**
             * @brief io basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates int8
                 * @remark avx2 default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vstore");

                    _mm256_store_si256((__m256i*)&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates int8
                 * @remark avx2 default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vstream");

                    _mm256_stream_si256((__m256i*)&(*result), input);
                }

            };

            /**
             * @brief io public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name math modules
         */
        ///@{
        /**
         * @brief math
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_math
        {
            /**
             * @brief math basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief math default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vabs(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vabs");

                    return _mm256_abs_epi8(one);
                }


                /**
                 * @brief math default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vmin(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vmin");

                    return _mm256_min_epi8(one, other);
                }


                /**
                 * @brief math default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vmax(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vmax");

                    return _mm256_max_epi8(one, other);
                }


                /**
                 * @brief math default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vclamp(Composed self, Composed from, Composed to) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vclamp");

                    return vmin(to, vmax(from, self));
                }

            };

            /**
             * @brief math public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::math<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name numeric modules
         */
        ///@{
        /**
         * @brief numeric
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_numeric
        {
            /**
             * @brief numeric basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {
            };

            /**
             * @brief numeric public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::numeric<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name arithmetic modules
         */
        ///@{
        /**
         * @brief arithmetic
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_arithmetic
        {
            /**
             * @brief arithmetic basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief arithmetic default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vneg(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vneg");

                    return _mm256_sub_epi8(_mm256_setzero_si256(), one);
                }


                /**
                 * @brief arithmetic default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vadd(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vadd");

                    return _mm256_add_epi8(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vsub(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vsub");

                    return _mm256_sub_epi8(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vmul(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vmul");

                    auto even = _mm256_mullo_epi16(one, other);
                    auto odd  = _mm256_mullo_epi16(_mm256_srli_epi16(one, 8),_mm256_srli_epi16(other, 8));
                    return _mm256_or_si256(_mm256_slli_epi16(odd, 8), _mm256_and_si256(even, _mm256_set1_epi16(0xFF)));
                }


                /**
                 * @brief arithmetic default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vdiv(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vdiv");

                    auto dividend = one.data();
                    auto divisor = other.data();
                    typename Composed::extracted_type result;
                    for (size_t i = 0; i < Composed::size; i++) { result[i] = dividend[i] / divisor[i]; };
                    return result;
                }


                /**
                 * @brief arithmetic default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vmod(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vmod");

                    return vsub(one, vmul(other, vdiv(one, other)));
                }

            };

            /**
             * @brief arithmetic public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::arithmetic<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vbneg");

                    auto zero = _mm256_setzero_si256();
                    auto ones = _mm256_cmpeq_epi8(zero, zero);
                    return _mm256_xor_si256(one, ones);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vband");

                    return _mm256_and_si256(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vbor");

                    return _mm256_or_si256(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vbxor");

                    return _mm256_xor_si256(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bool is_set(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "is_set");

                    return _mm256_testc_si256(one, _mm256_cmpeq_epi8(one,one));
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name comparable modules
         */
        ///@{
        /**
         * @brief comparable
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_comparable
        {
            /**
             * @brief comparable basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief comparable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vgt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vgt");

                    return _mm256_cmpgt_epi8(one, other);
                }


                /**
                 * @brief comparable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vlt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vlt");

                    return _mm256_cmpgt_epi8(other, one);
                }


                /**
                 * @brief comparable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vge(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vge");

                    return !(one < other);
                }


                /**
                 * @brief comparable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vle(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vle");

                    return !(one > other);
                }

            };

            /**
             * @brief comparable public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::comparable<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vlneg");

                    return _mm256_cmpeq_epi32(one, _mm256_setzero_si256());
                }


                /**
                 * @brief logical default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vlor");

                    return _mm256_or_si256(one, other);
                }


                /**
                 * @brief logical default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vland");

                    return _mm256_and_si256(one, other);
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "veq");

                    return _mm256_cmpeq_epi8(one, other);
                }


                /**
                 * @brief equatable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vneq");

                    return !(one == other);
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name conditional modules
         */
        ///@{
        /**
         * @brief conditional
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct zint8_conditional
        {
            /**
             * @brief conditional basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief conditional default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend zint8<Interface::feature_mask> vsel(bint8<Interface::feature_mask> condition, Composed if_value, Composed else_value) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vsel");

                    return _mm256_blendv_epi8(else_value, if_value, condition);
                }

            };

            /**
             * @brief conditional public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::conditional<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct bint8_io
        {
            /**
             * @brief io basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates int8
                 * @remark avx2 default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vstore");

                    _mm256_store_si256((__m256i*)&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates int8
                 * @remark avx2 default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vstream");

                    _mm256_stream_si256((__m256i*)&(*result), input);
                }

            };

            /**
             * @brief io public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct bint8_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vbneg");

                    auto zero = _mm256_setzero_si256();
                    auto ones = _mm256_cmpeq_epi8(zero, zero);
                    return _mm256_xor_si256(one, ones);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vband");

                    return _mm256_and_si256(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vbor");

                    return _mm256_or_si256(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vbxor");

                    return _mm256_xor_si256(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bool is_set(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "is_set");

                    return _mm256_testc_si256(one, _mm256_cmpeq_epi8(one,one));
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct bint8_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vlneg");

                    return _mm256_cmpeq_epi32(one, _mm256_setzero_si256());
                }


                /**
                 * @brief logical default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vlor");

                    return _mm256_or_si256(one, other);
                }


                /**
                 * @brief logical default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vland");

                    return _mm256_and_si256(one, other);
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates int8
         * @remark avx2
         */
        template<typename Interface, typename Composed>
        struct bint8_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates int8
             * @remark avx2
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "veq");

                    return _mm256_cmpeq_epi8(one, other);
                }


                /**
                 * @brief equatable default
                 * @relates int8
                 * @remark avx2 default
                 */
                friend bint8<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "default", "vneq");

                    return !(one == other);
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates int8
             * @remark avx2
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bint8<Interface::feature_mask>>;
        };

        ///@}


        // Type composition ================================================================================================

        /**
         * @name int8 composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates int8
         * @remark avx2
         * @tparam features feature mask
         */
        template<uint64_t FeatureMask>
        using zint8_ops = compose_t
        <
            printable<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            convertable<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_io<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_math<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_numeric<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_arithmetic<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_bitwise<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_comparable<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_logical<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_equatable<izint8<FeatureMask>, zint8<FeatureMask>>::template impl,
            zint8_conditional<izint8<FeatureMask>, zint8<FeatureMask>>::template impl
        >;

        /// bint8 composition
        /// @tparam features feature mask
        template<uint64_t FeatureMask>
        using bint8_ops = compose_t
        <
            printable<ibint8<FeatureMask>, bint8<FeatureMask>>::template impl,
            convertable<ibint8<FeatureMask>, bint8<FeatureMask>>::template impl,
            bint8_io<ibint8<FeatureMask>, bint8<FeatureMask>>::template impl,
            bint8_bitwise<ibint8<FeatureMask>, bint8<FeatureMask>>::template impl,
            bint8_logical<ibint8<FeatureMask>, bint8<FeatureMask>>::template impl,
            bint8_equatable<ibint8<FeatureMask>, bint8<FeatureMask>>::template impl
        >;

        ///@}
    } // end namespace

    /// public zint8 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct zint8 :
        public detail::zint8_ops<FeatureMask>,
        public zval<izint8<FeatureMask>>
    {
        USING_ZTYPE(izint8<FeatureMask>);

        /// complete vector
        using zval_t = zint8<FeatureMask>;

        /// complete boolean vector
        using bval_t = bint8<FeatureMask>;

        /**
         * copy constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<std::is_convertible<T, __m256i>::value>>// || std::is_convertible<T, int8_t>::value>>
        constexpr zint8(const T& other) noexcept
            : zval<izint8<FeatureMask>>(other)
        {}

        /**
         * move constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<(size > 1) && std::is_convertible<T, __m256i>::value>>
        constexpr zint8(T&& other) noexcept
            : zval<izint8<FeatureMask>>(std::forward<T>(other))
        {}

        /**
         * copy constructor
         * @param other
         */
        constexpr zint8(const bint8<FeatureMask>& other) noexcept
            : zval<izint8<FeatureMask>>(other.value())
        {}


        /**
         * @brief constructable 
         * @relates int8
         * @remark avx2 
         */
        constexpr zint8(  ) noexcept : zval<izint8<FeatureMask>>()
        {
            ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "", "CONS()");

        }


        /**
         * @brief constructable 
         * @relates int8
         * @remark avx2 
         */
        constexpr zint8(__m256i value) noexcept : zval<izint8<FeatureMask>>(value)
        {
            ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "", "CONS(__m256i)");

        }


        /**
         * @brief constructable 
         * @relates int8
         * @remark avx2 
         */
        constexpr zint8(int8_t value) noexcept : zval<izint8<FeatureMask>>(_mm256_set1_epi8(value))
        {
            ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "", "CONS(int8_t)");

        }


        /**
         * @brief constructable 
         * @relates int8
         * @remark avx2 
         */
        constexpr zint8(extracted_type value) noexcept : zval<izint8<FeatureMask>>(_mm256_load_si256((__m256i*)value.data()))
        {
            ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "", "CONS(extracted_type)");

        }


        /**
         * @brief constructable 
         * @relates int8
         * @remark avx2 
         */
        constexpr zint8(int8_t _31, int8_t _30, int8_t _29, int8_t _28, int8_t _27, int8_t _26, int8_t _25, int8_t _24, int8_t _23, int8_t _22, int8_t _21, int8_t _20, int8_t _19, int8_t _18, int8_t _17, int8_t _16, int8_t _15, int8_t _14, int8_t _13, int8_t _12, int8_t _11, int8_t _10, int8_t _9, int8_t _8, int8_t _7, int8_t _6, int8_t _5, int8_t _4, int8_t _3, int8_t _2, int8_t _1, int8_t _0) noexcept : zval<izint8<FeatureMask>>(_mm256_set_epi8(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31))
        {
            ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "", "CONS(int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t)");

        }

    };

    /// public bint8 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct bint8 :
            public detail::bint8_ops<FeatureMask>,
            public bval<ibint8<FeatureMask>>
    {
        USING_ZTYPE(ibint8<FeatureMask>);

        /// complete vector
        using zval_t = zint8<FeatureMask>;

        /// complete boolean vector
        using bval_t = bint8<FeatureMask>;

        /// Forwarding constructor
        FORWARD2(bint8, bval<ibint8<FeatureMask>>);


        /**
         * @brief constructable 
         * @relates int8
         * @remark avx2 
         */
        constexpr bint8(  ) noexcept : bval<ibint8<FeatureMask>>()
        {
            ZTRACE_BACKEND("avx2.int8.impl", __LINE__, "int8(int8_t[32])", "", "CONS()");

        }

    };

    namespace {
        using namespace avx2::int8_detail;

        static_assert(std::is_base_of<izint8 < 0>,
                      izint8 < 0 >> ::value,
                      "base_of<izint8> != izint8.");
        static_assert(!std::is_base_of<ibint8 < 0>,
                      izint8 < 0 >> ::value,
                      "base_of<izint8> == ibint8.");

        static_assert(is_zval < izint8 < 0 >> ::value,
                      "is_zval<izint8> == false.");
        static_assert(!is_bval < izint8 < 0 >> ::value,
                      "is_bval<izint8> != false.");

        static_assert(std::is_base_of<izint8 < 0>, zint8 < 0 >> ::value,
                      "base_of<zint8> != izint8.");
        static_assert(!std::is_base_of<ibint8 < 0>, zint8 < 0 >> ::value,
                      "base_of<zint8> == ibint8.");

        static_assert(zint8 < 0 > ::size == 32,
                      "zint8::size != 32.");
        static_assert(zint8 < 0 > ::alignment == 32,
                      "zint8::alignment != 32.");
        static_assert(zint8 < 0 > ::is_vector == (32 > 1),
        "zint8::is_vector != (32 > 1).");

        static_assert(std::is_same<zint8 < 0>::tag, zval_tag > ::value,
                      "zint8::tag != zval_tag.");
        static_assert(std::is_same<zint8 < 0>::vector_type, __m256i > ::value,
                      "zint8::vector_type != __m256i.");
        static_assert(std::is_same<zint8 < 0>::element_type, int8_t > ::value,
                      "zint8::element_type != int8_t.");
        static_assert(std::is_same<zint8 < 0>::mask_vector_type, __m256i > ::value,
                      "zint8::mask_vector_type != __m256i.");
        static_assert(std::is_same<zint8 < 0>::extracted_type,
                      std::array<int8_t, 32>>::value,
                      "zint8::extracted_type != std::array<int8_t, 32>.");


        static_assert(std::is_same<typename ztraits<zint8 < 0>>::tag, zval_tag > ::value,
                      "zint8::tag != zval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<zint8 < 0>>::element_type > ::value,
                      "is_arithmetic<zint8::element_type> == false.");
        static_assert(is_zval < zint8 < 0 >> ::value,
                      "is_zval<zint8> == false.");
        static_assert(!is_bval < zint8 < 0 >> ::value,
                      "is_bval<zint8> != false.");


        static_assert(std::is_base_of<izint8 < 0>,
                      izint8 < 0 >> ::value,
                      "base_of<izint8> != izint8.");
        static_assert(!std::is_base_of<ibint8 < 0>,
                      izint8 < 0 >> ::value,
                      "base_of<izint8> == ibint8.");


        static_assert(!is_zval < ibint8 < 0 >> ::value,
                      "is_zval<ibint8> != false.");
        static_assert(is_bval < ibint8 < 0 >> ::value,
                      "is_bval<ibint8> == false.");

        static_assert(std::is_base_of<ibint8 < 0>, bint8 < 0 >> ::value,
                      "base_of<bint8> != ibint8.");
        static_assert(!std::is_base_of<izint8 < 0>, bint8 < 0 >> ::value,
                      "base_of<bint8> == izint8.");

        static_assert(bint8 < 0 > ::size == 32,
                      "bint8::size != 32.");
        static_assert(bint8 < 0 > ::alignment == 32,
                      "bint8::alignment != 32.");
        static_assert(bint8 < 0 > ::is_vector == (32 > 1),
        "bint8::is_vector != (32 > 1).");

        static_assert(std::is_same<bint8 < 0>::tag, bval_tag > ::value,
                      "bint8::tag != zval_tag.");
        static_assert(std::is_same<bint8 < 0>::vector_type, __m256i > ::value,
                      "bint8::vector_type != __m256i.");
        static_assert(std::is_same<bint8 < 0>::element_type, int8_t > ::value,
                      "bint8::element_type != int8_t.");
        static_assert(std::is_same<bint8 < 0>::mask_vector_type, __m256i > ::value,
                      "bint8::mask_vector_type != __m256i.");
        static_assert(std::is_same<bint8 < 0>::extracted_type,
                      std::array<int8_t, 32>>::value,
        "bint8::extracted_type != std::array<int8_t, 32>.");

        static_assert(std::is_same<typename ztraits<bint8 < 0>>::tag, bval_tag > ::value,
                      "bint8::tag != bval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<bint8 < 0>>::element_type > ::value,
                      "is_arithmetic<bint8::element_type> == false.");
        static_assert(!is_zval < bint8 < 0 >> ::value,
                      "is_zval<bint8> != false.");
        static_assert(is_bval < bint8 < 0 >> ::value,
                      "is_bval<bint8> == false.");

        static_assert(!std::is_floating_point<int8_t>::value ||
                      is_floating_point < zint8 < 0 >> ::value,
                      "is_floating_point<zint8> == false. [scalar = int8_t]");
        static_assert(!std::is_floating_point<int8_t>::value ||
                      !is_integral < zint8 < 0 >> ::value,
                      "is_integral<zint8> != false. [scalar = int8_t]");

        static_assert(
                !std::is_same<int8_t, float>::value || is_float < zint8 < 0 >> ::value,
                "is_float<zint8> == false. [scalar = int8_t]");
        static_assert(
                !std::is_same<int8_t, float>::value || !is_double < zint8 < 0 >> ::value,
                "is_double<zint8> != false. [scalar = int8_t]");

        static_assert(
                !std::is_same<int8_t, double>::value || is_double < zint8 < 0 >> ::value,
                "is_double<zint8> == false. [scalar = int8_t]");
        static_assert(
                !std::is_same<int8_t, double>::value || !is_float < zint8 < 0 >> ::value,
                "is_float<zint8> != false. [scalar = int8_t]");

        static_assert(
                !std::is_integral<int8_t>::value || is_integral < zint8 < 0 >> ::value,
                "is_integral<zint8> == false. [scalar = int8_t]");
        static_assert(!std::is_integral<int8_t>::value ||
                      !is_floating_point < zint8 < 0 >> ::value,
                      "is_floating_point<zint8> != false. [scalar = int8_t]");
    }
    ///@}
}}}