//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/io.hpp"
#include "traits/numeric.hpp"
#include "traits/math.hpp"
#include "traits/arithmetic.hpp"
#include "traits/bitwise.hpp"
#include "traits/logical.hpp"
#include "traits/comparable.hpp"
#include "traits/conditional.hpp"

/**
 * @brief int8 implementation for the avx branch
 * provides unified access to 32 'int8_t' values
 */

namespace zacc { namespace backend { namespace avx {

    template<uint64_t arch>
    struct bint8;

    template<uint64_t arch>
    struct zint8;


    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;



            /**
             * @brief construction default branch
             * @relates int8
             * @remark avx - default
             */
            __impl() : base_t() {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "CONS()");

            }


            /**
             * @brief construction default branch
             * @relates int8
             * @remark avx - default
             */
            __impl(std::array<sse::zint8<base_t::arch>, 2> value) : base_t(value) {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "CONS(std::array<sse::zint8<base_t::ca..)");

            }


            /**
             * @brief construction default branch
             * @relates int8
             * @remark avx - default
             */
            __impl(sse::zint8<base_t::arch> hi, sse::zint8<base_t::arch> lo) : base_t(std::array<sse::zint8<base_t::arch>, 2>({ hi, lo })) {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "CONS(sse::zint8<base_t::arch> h..)");

            }


            /**
             * @brief construction default branch
             * @relates int8
             * @remark avx - default
             */
            __impl(int8_t value) : base_t(std::array<sse::zint8<base_t::arch>, 2>({ _mm_set1_epi8(value), _mm_set1_epi8(value) })) {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "CONS(int8_t value)");

            }


            /**
             * @brief construction default branch
             * @relates int8
             * @remark avx - default
             */
            __impl(std::array<typename base_t::scalar_t, base_t::dim> value) : base_t(std::array<sse::zint8<base_t::arch>, 2>({ _mm_loadu_si128((__m128i*)value.data()), _mm_loadu_si128((__m128i*)(value.data() + 4)) })) {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "CONS(std::array<typename base_t::scal..)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::construction<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::construction<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief io default branch
             * @relates int8
             * @remark avx - default
             */
            friend void vstore(typename base_t::extracted_t &target, composed_t source)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vstore");

                _mm_store_si128((__m128i*)(target.data()), source.value()[1]);
                _mm_store_si128((__m128i*)(target.data() + base_t::dim / 2), source.value()[0]);
            }


            /**
             * @brief io default branch
             * @relates int8
             * @remark avx - default
             */
            friend void vstream(typename base_t::extracted_t &target, composed_t source)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vstream");

                _mm_stream_si128((__m128i*)(target.data()), source.value()[1]);
                _mm_stream_si128((__m128i*)(target.data() + base_t::dim / 2), source.value()[0]);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::io<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::io<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name numeric operations
     */
    ///@{

    /**
     * @brief numeric
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_numeric
    {

        /**
         * @brief numeric basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);

        };

        /**
         * @brief numeric public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::numeric<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::numeric<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name math operations
     */
    ///@{

    /**
     * @brief math
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_math
    {

        /**
         * @brief math basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief math default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vabs(composed_t one)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vabs");

                return zint8<base_t::arch> ({ vabs(one.value()[1]), vabs(one.value()[0]) });
            }


            /**
             * @brief math default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vmin(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vmin");

                return zint8<base_t::arch> ({ vmin(one.value()[1], other.value()[1]), vmin(one.value()[0], other.value()[0]) });
            }


            /**
             * @brief math default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vmax(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vmax");

                return zint8<base_t::arch> ({ vmax(one.value()[1], other.value()[1]), vmax(one.value()[0], other.value()[0]) });
            }


            /**
             * @brief math default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vclamp(composed_t self, composed_t from, composed_t to)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vclamp");

                return zint8<base_t::arch> ({ vclamp(self.value()[1], from.value()[1], to.value()[1]), vclamp(self.value()[0], from.value()[0], to.value()[0]) });
            }

        };

        /**
         * @brief math public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::math<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::math<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic operations
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief arithmetic default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vneg(composed_t one)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vneg");

                return zint8<base_t::arch> ({ -one.value()[1], -one.value()[0] });
            }


            /**
             * @brief arithmetic default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vadd(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vadd");

                return zint8<base_t::arch> ({ one.value()[1] + other.value()[1], one.value()[0] + other.value()[0] });
            }


            /**
             * @brief arithmetic default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vsub(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vsub");

                return zint8<base_t::arch> ({ one.value()[1] - other.value()[1], one.value()[0] - other.value()[0] });
            }


            /**
             * @brief arithmetic default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vmul(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vmul");

                return zint8<base_t::arch> ({ one.value()[1] * other.value()[1], one.value()[0] * other.value()[0] });
            }


            /**
             * @brief arithmetic default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vdiv(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vdiv");

                return zint8<base_t::arch> ({ one.value()[1] / other.value()[1], one.value()[0] / other.value()[0] });
            }


            /**
             * @brief arithmetic default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vmod(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vmod");

                return zint8<base_t::arch> ({ one.value()[1] % other.value()[1], one.value()[0] % other.value()[0] });
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::arithmetic<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::arithmetic<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief bitwise default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vbneg(composed_t one)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vbneg");

                return zint8<base_t::arch> ({ ~one.value()[1], ~one.value()[1] });
            }


            /**
             * @brief bitwise default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vbor(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vbor");

                return zint8<base_t::arch> ({ one.value()[1] | other.value()[1], one.value()[0] | other.value()[0] });
            }


            /**
             * @brief bitwise default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vband(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vband");

                return zint8<base_t::arch> ({ one.value()[1] & other.value()[1], one.value()[0] & other.value()[0] });
            }


            /**
             * @brief bitwise default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vbxor(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vbxor");

                return zint8<base_t::arch> ({ one.value()[1] ^ other.value()[1], one.value()[0] ^ other.value()[0] });
            }


            /**
             * @brief bitwise default branch
             * @relates int8
             * @remark avx - default
             */
            friend bool is_set(composed_t one)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "is_set");

                return is_set(one.value()[1]) && is_set(one.value()[0]);
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::bitwise<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::bitwise<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief logical default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vlneg(composed_t one)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vlneg");

                return zint8<base_t::arch> ({ !one.value()[1], !one.value()[1] });
            }


            /**
             * @brief logical default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vlor(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vlor");

                return zint8<base_t::arch> ({ one.value()[1] || other.value()[1], one.value()[0] || other.value()[0] });
            }


            /**
             * @brief logical default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vland(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vland");

                return zint8<base_t::arch> ({ one.value()[1] && other.value()[1], one.value()[0] && other.value()[0] });
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::logical<__impl<base_t>, bint8<base_t::arch>>;

        using impl = traits::logical<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparison operations
     */
    ///@{

    /**
     * @brief comparison
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_comparison
    {

        /**
         * @brief comparison basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief comparison default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> veq(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "veq");

                return zint8<base_t::arch> ({ one.value()[1] == other.value()[1], one.value()[0] == other.value()[0] });
            }


            /**
             * @brief comparison default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vneq(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vneq");

                return zint8<base_t::arch> ({ one.value()[1] != other.value()[1], one.value()[0] != other.value()[0] });
            }


            /**
             * @brief comparison default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vgt(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vgt");

                return zint8<base_t::arch> ({ one.value()[1] > other.value()[1], one.value()[0] > other.value()[0] });
            }


            /**
             * @brief comparison default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vlt(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vlt");

                return zint8<base_t::arch> ({ one.value()[1] < other.value()[1], one.value()[0] < other.value()[0] });
            }


            /**
             * @brief comparison default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vge(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vge");

                return zint8<base_t::arch> ({ one.value()[1] >= other.value()[1], one.value()[0] >= other.value()[0] });
            }


            /**
             * @brief comparison default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vle(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vle");

                return zint8<base_t::arch> ({ one.value()[1] <= other.value()[1], one.value()[0] <= other.value()[0] });
            }

        };

        /**
         * @brief comparison public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::comparable<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::comparable<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional operations
     */
    ///@{

    /**
     * @brief conditional
     * @relates int8
     * @remark avx
     */
    template<typename composed_t>
    struct int8_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates int8
         * @remark avx
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief conditional default branch
             * @relates int8
             * @remark avx - default
             */
            friend zint8<base_t::arch> vsel(composed_t condition, composed_t if_value, composed_t else_value)  noexcept {

                ZTRACE_BACKEND("avx.int8.impl", __LINE__, "zint8(int8_t[32])", "default", "vsel");

                return zint8<base_t::arch> ({ vsel(condition.value()[1], if_value.value()[1], else_value.value()[1]), vsel(condition.value()[0], if_value.value()[0], else_value.value()[0]) });
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates int8
         * @remark avx
         */


        template<typename base_t>
        //using impl = traits::conditional<__impl<base_t>, zint8<base_t::arch>>;

        using impl = traits::conditional<__impl<base_t>, zint8<base_t::arch>>;

    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name int8 composition
     */
    ///@{

    //namespace composition {

        /**
         * @brief zval parametrization using
         * - 'std::array<sse::zint8<arch>, 2>' as underlying vector type
         * - 'int8_t' as scalar type
         * - '32' as vector size
         * - '32' as alignment
         * @relates int8
         * @remark avx
         */
        template<uint64_t arch>
        struct __zval_int8
        {
            using zval_t = zval<std::array<sse::zint8<arch>, 2>, std::array<sse::zint8<arch>, 2>, int8_t, 32, 32, arch>;

            struct impl : public zval_t
            {
                FORWARD2(impl, zval_t);
            };
        };
        /**
         * @brief zval composition
         * @relates int8
         * @remark avx
         */
        template<uint64_t arch>
        struct __zint8
        {
            struct impl;

            using zval_t = typename __zval_int8<arch>::impl;
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                int8_io<impl>::template impl,
                int8_math<impl>::template impl,
                int8_numeric<impl>::template impl,
                int8_arithmetic<impl>::template impl,
                int8_bitwise<impl>::template impl,
                int8_logical<impl>::template impl,
                int8_comparison<impl>::template impl,
                int8_conditional<impl>::template impl,
                int8_construction<impl>::template impl,

                composable<zval_t>::template type
            >;

            struct impl : public composition_t
            {
                FORWARD2(impl, composition_t);
            };
        };

        template<uint64_t arch>
        struct __bint8
        {
            using bval_t = bval<typename __zint8<arch>::impl, std::array<sse::zint8<arch>, 2>>;
            struct impl : public bval_t
            {
                FORWARD2(impl, bval_t);
            };
        };
    //}

    template<uint64_t arch>
    struct zint8 : public /*composition::*/__zint8<arch>::impl
    {
        FORWARD2(zint8, /*composition::*/__zint8<arch>::impl);
    };

    template<uint64_t arch>
    struct bint8 : public /*composition::*/__bint8<arch>::impl
    {
        FORWARD2(bint8, /*composition::*/__bint8<arch>::impl);
    };

    static_assert(is_zval<zint8<0>>::value, "is_zval for zint8 failed.");
    static_assert(is_bval<bint8<0>>::value, "is_bval for bint8 failed.");

    static_assert(!is_floating_point<zint8<0>>::value, "is_floating_point for zint8 failed.");
    static_assert(is_integral<zint8<0>>::value, "is_integral for zint8 failed.");

    static_assert(!is_float<zint8<0>>::value, "is_float for zint8 failed.");
    static_assert(!is_double<zint8<0>>::value, "is_double for zint8 failed.");

    ///@}
}}}