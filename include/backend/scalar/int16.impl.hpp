//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file int16.impl.hpp
 * @brief
 * This file provides defines required components and logic for int16 scalar target.
 * Provides unified access to 1 'int16_t' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"
#include "backend/zval_interface.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/convertable.hpp"
#include "traits/printable.hpp"
#include "traits/bitwise.hpp"
#include "traits/conditional.hpp"
#include "traits/comparable.hpp"
#include "traits/math.hpp"
#include "traits/arithmetic.hpp"
#include "traits/bitwise_shift.hpp"
#include "traits/equatable.hpp"
#include "traits/io.hpp"
#include "traits/logical.hpp"
#include "traits/numeric.hpp"

namespace zacc { namespace backend { namespace scalar
{
    /// @cond
    template<uint64_t features>
    struct bint16;

    template<uint64_t features>
    struct zint16;
    /// @endcond

    template<uint64_t FeatureMask>
    using izint16 = ztype<zval_tag, std::array<int16_t, 1>, std::array<bool, 1>, int16_t, 1, 16, FeatureMask>;

    template<uint64_t FeatureMask>
    using ibint16 = ztype<bval_tag, std::array<int16_t, 1>, std::array<bool, 1>, int16_t, 1, 16, FeatureMask>;

    namespace int16_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 1;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = std::array<int16_t, 1>;

        /// scalar type, like int for sse 4x integer vector
        using element_type = int16_t;

        /// mask type for boolean operations
        using mask_vector_type = std::array<bool, 1>;

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;
    }
}}}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::scalar::izint16<T::feature_mask>, T>::value
            || std::is_base_of<backend::scalar::ibint16<T::feature_mask>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 1;

        /// capabilities
        static constexpr uint64_t feature_mask = T::feature_mask;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = std::array<int16_t, 1>;

        /// scalar type, like int for sse 4x integer vector
        using element_type = int16_t;

        /// mask type for boolean operations
        using mask_vector_type = std::array<bool, 1>;

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;

        using zval_t = backend::scalar::zint16<T::feature_mask>;
        using bval_t = backend::scalar::bint16<T::feature_mask>;

        using tag = select_t<
            when<std::is_base_of<backend::scalar::izint16<T::feature_mask>, T>::value, zval_tag>,
            when<std::is_base_of<backend::scalar::ibint16<T::feature_mask>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace scalar {

    namespace detail {

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_io
        {
            /**
             * @brief io basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates int16
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vstore");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates int16
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vstream");

                    result[0] = input.value();
                }

            };

            /**
             * @brief io public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name math modules
         */
        ///@{
        /**
         * @brief math
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_math
        {
            /**
             * @brief math basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief math default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vabs(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vabs");

                    return std::abs(one.value());
                }


                /**
                 * @brief math default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vmin(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vmin");

                    return std::min(one.value(), other.value());
                }


                /**
                 * @brief math default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vmax(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vmax");

                    return std::max(one.value(), other.value());
                }


                /**
                 * @brief math default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vclamp(Composed self, Composed from, Composed to) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vclamp");

                    return vmin(to, vmax(from, self));
                }

            };

            /**
             * @brief math public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::math<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name numeric modules
         */
        ///@{
        /**
         * @brief numeric
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_numeric
        {
            /**
             * @brief numeric basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {
            };

            /**
             * @brief numeric public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::numeric<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name arithmetic modules
         */
        ///@{
        /**
         * @brief arithmetic
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_arithmetic
        {
            /**
             * @brief arithmetic basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief arithmetic default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vneg");

                    return (-one.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vadd(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vadd");

                    return (one.value() + other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vsub(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vsub");

                    return (one.value() - other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vmul(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vmul");

                    return (one.value() * other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vdiv(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vdiv");

                    return (one.value() / other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vmod(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vmod");

                    return (one.value() % other.value());
                }

            };

            /**
             * @brief arithmetic public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::arithmetic<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbneg");

                    return (~one.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vband");

                    return (one.value() & other.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbor");

                    return (one.value() | other.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbxor");

                    return (one.value() ^ other.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bool is_set(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "is_set");

                    return one.value() != 0;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise_shift modules
         */
        ///@{
        /**
         * @brief bitwise_shift
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_bitwise_shift
        {
            /**
             * @brief bitwise_shift basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief bitwise_shift default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vbsll(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbsll");

                    return (one.value() << other.value());
                }


                /**
                 * @brief bitwise_shift default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vbsrl(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbsrl");

                    return (one.value() >> other.value());
                }


                /**
                 * @brief bitwise_shift default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vbslli(const Composed one, const size_t other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbslli");

                    return (one.value() << other);
                }


                /**
                 * @brief bitwise_shift default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vbsrli(const Composed one, const size_t other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbsrli");

                    return (one.value() >> other);
                }

            };

            /**
             * @brief bitwise_shift public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::bitwise_shift<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name comparable modules
         */
        ///@{
        /**
         * @brief comparable
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_comparable
        {
            /**
             * @brief comparable basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief comparable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vgt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vgt");

                    return (one.value() > other.value());
                }


                /**
                 * @brief comparable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vlt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vlt");

                    return (one.value() < other.value());
                }


                /**
                 * @brief comparable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vge(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vge");

                    return (one.value() >= other.value());
                }


                /**
                 * @brief comparable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vle(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vle");

                    return (one.value() <= other.value());
                }

            };

            /**
             * @brief comparable public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::comparable<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vlneg");

                    return (!one.value());
                }


                /**
                 * @brief logical default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vlor");

                    return (one.value() || other.value());
                }


                /**
                 * @brief logical default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vland");

                    return (one.value() && other.value());
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "veq");

                    return (one.value() == other.value());
                }


                /**
                 * @brief equatable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vneq");

                    return (one.value() != other.value());
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name conditional modules
         */
        ///@{
        /**
         * @brief conditional
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zint16_conditional
        {
            /**
             * @brief conditional basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief conditional default
                 * @relates int16
                 * @remark scalar default
                 */
                friend zint16<Interface::feature_mask> vsel(bint16<Interface::feature_mask> condition, Composed if_value, Composed else_value) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vsel");

                    return (condition.value() ? if_value : else_value);
                }

            };

            /**
             * @brief conditional public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::conditional<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bint16_io
        {
            /**
             * @brief io basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates int16
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vstore");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates int16
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vstream");

                    result[0] = input.value();
                }

            };

            /**
             * @brief io public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bint16_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbneg");

                    return (~one.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vband");

                    return (one.value() & other.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbor");

                    return (one.value() | other.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vbxor");

                    return (one.value() ^ other.value());
                }


                /**
                 * @brief bitwise default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bool is_set(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "is_set");

                    return one.value() != 0;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bint16_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vlneg");

                    return (!one.value());
                }


                /**
                 * @brief logical default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vlor");

                    return (one.value() || other.value());
                }


                /**
                 * @brief logical default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vland");

                    return (one.value() && other.value());
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates int16
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bint16_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates int16
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "veq");

                    return (one.value() == other.value());
                }


                /**
                 * @brief equatable default
                 * @relates int16
                 * @remark scalar default
                 */
                friend bint16<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "default", "vneq");

                    return (one.value() != other.value());
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates int16
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bint16<Interface::feature_mask>>;
        };

        ///@}


        // Type composition ================================================================================================

        /**
         * @name int16 composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates int16
         * @remark scalar
         * @tparam features feature mask
         */
        template<uint64_t FeatureMask>
        using zint16_ops = compose_t
        <
            printable<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            convertable<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_io<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_math<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_numeric<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_arithmetic<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_bitwise<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_bitwise_shift<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_comparable<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_logical<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_equatable<izint16<FeatureMask>, zint16<FeatureMask>>::template impl,
            zint16_conditional<izint16<FeatureMask>, zint16<FeatureMask>>::template impl
        >;

        /// bint16 composition
        /// @tparam features feature mask
        template<uint64_t FeatureMask>
        using bint16_ops = compose_t
        <
            printable<ibint16<FeatureMask>, bint16<FeatureMask>>::template impl,
            convertable<ibint16<FeatureMask>, bint16<FeatureMask>>::template impl,
            bint16_io<ibint16<FeatureMask>, bint16<FeatureMask>>::template impl,
            bint16_bitwise<ibint16<FeatureMask>, bint16<FeatureMask>>::template impl,
            bint16_logical<ibint16<FeatureMask>, bint16<FeatureMask>>::template impl,
            bint16_equatable<ibint16<FeatureMask>, bint16<FeatureMask>>::template impl
        >;

        ///@}
    } // end namespace

    /// public zint16 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct zint16 :
        public detail::zint16_ops<FeatureMask>,
        public zval<izint16<FeatureMask>>
    {
        USING_ZTYPE(izint16<FeatureMask>);

        /// complete vector
        using zval_t = zint16<FeatureMask>;

        /// complete boolean vector
        using bval_t = bint16<FeatureMask>;

        /**
         * copy constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<std::is_convertible<T, std::array<int16_t, 1>>::value>>// || std::is_convertible<T, int16_t>::value>>
        constexpr zint16(const T& other) noexcept
            : zval<izint16<FeatureMask>>(other)
        {}

        /**
         * move constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<(size > 1) && std::is_convertible<T, std::array<int16_t, 1>>::value>>
        constexpr zint16(T&& other) noexcept
            : zval<izint16<FeatureMask>>(std::forward<T>(other))
        {}

        /**
         * copy constructor
         * @param other
         */
        constexpr zint16(const bint16<FeatureMask>& other) noexcept
            : zval<izint16<FeatureMask>>(other.value())
        {}


        /**
         * @brief constructable 
         * @relates int16
         * @remark scalar 
         */
        constexpr zint16(  ) noexcept : zval<izint16<FeatureMask>>()
        {
            ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "", "CONS()");

        }


        /**
         * @brief constructable 
         * @relates int16
         * @remark scalar 
         */
        constexpr zint16(int16_t value) noexcept : zval<izint16<FeatureMask>>(value)
        {
            ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "", "CONS(int16_t)");

        }


        /**
         * @brief constructable 
         * @relates int16
         * @remark scalar 
         */
        constexpr zint16(extracted_type value) noexcept : zval<izint16<FeatureMask>>(value[0])
        {
            ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "", "CONS(extracted_type)");

        }

    };

    /// public bint16 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct bint16 :
            public detail::bint16_ops<FeatureMask>,
            public bval<ibint16<FeatureMask>>
    {
        USING_ZTYPE(ibint16<FeatureMask>);

        /// complete vector
        using zval_t = zint16<FeatureMask>;

        /// complete boolean vector
        using bval_t = bint16<FeatureMask>;

        /// Forwarding constructor
        FORWARD2(bint16, bval<ibint16<FeatureMask>>);


        /**
         * @brief constructable 
         * @relates int16
         * @remark scalar 
         */
        constexpr bint16(  ) noexcept : bval<ibint16<FeatureMask>>()
        {
            ZTRACE_BACKEND("scalar.int16.impl", __LINE__, "int16(int16_t[1])", "", "CONS()");

        }

    };

    namespace {
        using namespace scalar::int16_detail;

        static_assert(std::is_base_of<izint16 < 0>,
                      izint16 < 0 >> ::value,
                      "base_of<izint16> != izint16.");
        static_assert(!std::is_base_of<ibint16 < 0>,
                      izint16 < 0 >> ::value,
                      "base_of<izint16> == ibint16.");

        static_assert(is_zval < izint16 < 0 >> ::value,
                      "is_zval<izint16> == false.");
        static_assert(!is_bval < izint16 < 0 >> ::value,
                      "is_bval<izint16> != false.");

        static_assert(std::is_base_of<izint16 < 0>, zint16 < 0 >> ::value,
                      "base_of<zint16> != izint16.");
        static_assert(!std::is_base_of<ibint16 < 0>, zint16 < 0 >> ::value,
                      "base_of<zint16> == ibint16.");

        static_assert(zint16 < 0 > ::size == 1,
                      "zint16::size != 1.");
        static_assert(zint16 < 0 > ::alignment == 16,
                      "zint16::alignment != 16.");
        static_assert(zint16 < 0 > ::is_vector == (1 > 1),
        "zint16::is_vector != (1 > 1).");

        static_assert(std::is_same<zint16 < 0>::tag, zval_tag > ::value,
                      "zint16::tag != zval_tag.");
        static_assert(std::is_same<zint16 < 0>::vector_type, std::array<int16_t, 1> > ::value,
                      "zint16::vector_type != std::array<int16_t, 1>.");
        static_assert(std::is_same<zint16 < 0>::element_type, int16_t > ::value,
                      "zint16::element_type != int16_t.");
        static_assert(std::is_same<zint16 < 0>::mask_vector_type, std::array<bool, 1> > ::value,
                      "zint16::mask_vector_type != std::array<bool, 1>.");
        static_assert(std::is_same<zint16 < 0>::extracted_type,
                      std::array<int16_t, 1>>::value,
                      "zint16::extracted_type != std::array<int16_t, 1>.");


        static_assert(std::is_same<typename ztraits<zint16 < 0>>::tag, zval_tag > ::value,
                      "zint16::tag != zval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<zint16 < 0>>::element_type > ::value,
                      "is_arithmetic<zint16::element_type> == false.");
        static_assert(is_zval < zint16 < 0 >> ::value,
                      "is_zval<zint16> == false.");
        static_assert(!is_bval < zint16 < 0 >> ::value,
                      "is_bval<zint16> != false.");


        static_assert(std::is_base_of<izint16 < 0>,
                      izint16 < 0 >> ::value,
                      "base_of<izint16> != izint16.");
        static_assert(!std::is_base_of<ibint16 < 0>,
                      izint16 < 0 >> ::value,
                      "base_of<izint16> == ibint16.");


        static_assert(!is_zval < ibint16 < 0 >> ::value,
                      "is_zval<ibint16> != false.");
        static_assert(is_bval < ibint16 < 0 >> ::value,
                      "is_bval<ibint16> == false.");

        static_assert(std::is_base_of<ibint16 < 0>, bint16 < 0 >> ::value,
                      "base_of<bint16> != ibint16.");
        static_assert(!std::is_base_of<izint16 < 0>, bint16 < 0 >> ::value,
                      "base_of<bint16> == izint16.");

        static_assert(bint16 < 0 > ::size == 1,
                      "bint16::size != 1.");
        static_assert(bint16 < 0 > ::alignment == 16,
                      "bint16::alignment != 16.");
        static_assert(bint16 < 0 > ::is_vector == (1 > 1),
        "bint16::is_vector != (1 > 1).");

        static_assert(std::is_same<bint16 < 0>::tag, bval_tag > ::value,
                      "bint16::tag != zval_tag.");
        static_assert(std::is_same<bint16 < 0>::vector_type, std::array<int16_t, 1> > ::value,
                      "bint16::vector_type != std::array<int16_t, 1>.");
        static_assert(std::is_same<bint16 < 0>::element_type, int16_t > ::value,
                      "bint16::element_type != int16_t.");
        static_assert(std::is_same<bint16 < 0>::mask_vector_type, std::array<bool, 1> > ::value,
                      "bint16::mask_vector_type != std::array<bool, 1>.");
        static_assert(std::is_same<bint16 < 0>::extracted_type,
                      std::array<int16_t, 1>>::value,
        "bint16::extracted_type != std::array<int16_t, 1>.");

        static_assert(std::is_same<typename ztraits<bint16 < 0>>::tag, bval_tag > ::value,
                      "bint16::tag != bval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<bint16 < 0>>::element_type > ::value,
                      "is_arithmetic<bint16::element_type> == false.");
        static_assert(!is_zval < bint16 < 0 >> ::value,
                      "is_zval<bint16> != false.");
        static_assert(is_bval < bint16 < 0 >> ::value,
                      "is_bval<bint16> == false.");

        static_assert(!std::is_floating_point<int16_t>::value ||
                      is_floating_point < zint16 < 0 >> ::value,
                      "is_floating_point<zint16> == false. [scalar = int16_t]");
        static_assert(!std::is_floating_point<int16_t>::value ||
                      !is_integral < zint16 < 0 >> ::value,
                      "is_integral<zint16> != false. [scalar = int16_t]");

        static_assert(
                !std::is_same<int16_t, float>::value || is_float < zint16 < 0 >> ::value,
                "is_float<zint16> == false. [scalar = int16_t]");
        static_assert(
                !std::is_same<int16_t, float>::value || !is_double < zint16 < 0 >> ::value,
                "is_double<zint16> != false. [scalar = int16_t]");

        static_assert(
                !std::is_same<int16_t, double>::value || is_double < zint16 < 0 >> ::value,
                "is_double<zint16> == false. [scalar = int16_t]");
        static_assert(
                !std::is_same<int16_t, double>::value || !is_float < zint16 < 0 >> ::value,
                "is_float<zint16> != false. [scalar = int16_t]");

        static_assert(
                !std::is_integral<int16_t>::value || is_integral < zint16 < 0 >> ::value,
                "is_integral<zint16> == false. [scalar = int16_t]");
        static_assert(!std::is_integral<int16_t>::value ||
                      !is_floating_point < zint16 < 0 >> ::value,
                      "is_floating_point<zint16> != false. [scalar = int16_t]");
    }
    ///@}
}}}