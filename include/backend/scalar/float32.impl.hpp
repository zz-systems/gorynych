//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file float32.impl.hpp
 * @brief
 * This file provides defines required components and logic for float32 scalar target.
 * Provides unified access to 1 'float' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"
#include "backend/zval_interface.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/convertable.hpp"
#include "traits/printable.hpp"
#include "traits/equatable.hpp"
#include "traits/bitwise.hpp"
#include "traits/conditional.hpp"
#include "traits/io.hpp"
#include "traits/arithmetic.hpp"
#include "traits/numeric.hpp"
#include "traits/comparable.hpp"
#include "traits/logical.hpp"
#include "traits/math.hpp"

namespace zacc { namespace backend { namespace scalar
{
    /// @cond
    template<uint64_t features>
    struct bfloat32;

    template<uint64_t features>
    struct zfloat32;
    /// @endcond

    template<uint64_t FeatureMask>
    using izfloat32 = ztype<zval_tag, std::array<float, 1>, std::array<bool, 1>, float, 1, 16, FeatureMask>;

    template<uint64_t FeatureMask>
    using ibfloat32 = ztype<bval_tag, std::array<float, 1>, std::array<bool, 1>, float, 1, 16, FeatureMask>;

    namespace float32_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 1;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = std::array<float, 1>;

        /// scalar type, like int for sse 4x integer vector
        using element_type = float;

        /// mask type for boolean operations
        using mask_vector_type = std::array<bool, 1>;

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;
    }
}}}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::scalar::izfloat32<T::feature_mask>, T>::value
            || std::is_base_of<backend::scalar::ibfloat32<T::feature_mask>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 1;

        /// capabilities
        static constexpr uint64_t feature_mask = T::feature_mask;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_type = std::array<float, 1>;

        /// scalar type, like int for sse 4x integer vector
        using element_type = float;

        /// mask type for boolean operations
        using mask_vector_type = std::array<bool, 1>;

        /// extracted std::array of (dim) scalar values
        using extracted_type = std::array<element_type, size>;

        using zval_t = backend::scalar::zfloat32<T::feature_mask>;
        using bval_t = backend::scalar::bfloat32<T::feature_mask>;

        using tag = select_t<
            when<std::is_base_of<backend::scalar::izfloat32<T::feature_mask>, T>::value, zval_tag>,
            when<std::is_base_of<backend::scalar::ibfloat32<T::feature_mask>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace scalar {

    namespace detail {

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_io
        {
            /**
             * @brief io basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates float32
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstore");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float32
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstream");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float32
                 * @remark scalar default
                 */
                template<typename RandomIt> friend zfloat32<Interface::feature_mask> vgather(RandomIt input, const zint32<Interface::feature_mask> &index,  Composed) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vgather");

                    return input[index.value()];
                }

            };

            /**
             * @brief io public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name math modules
         */
        ///@{
        /**
         * @brief math
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_math
        {
            /**
             * @brief math basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vabs(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vabs");

                    return std::abs(one.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vmin(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vmin");

                    return std::min(one.value(), other.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vmax(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vmax");

                    return std::max(one.value(), other.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vclamp(Composed self, Composed from, Composed to) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vclamp");

                    return vmin(to, vmax(from, self));
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vrcp(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vrcp");

                    return (1 / one.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vtrunc(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vtrunc");

                    return std::trunc(one.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vfloor(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vfloor");

                    return std::floor(one.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vceil(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vceil");

                    return std::ceil(one.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vround(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vround");

                    return std::round(one.value());
                }


                /**
                 * @brief math default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vsqrt(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vsqrt");

                    return std::sqrt(one.value());
                }

            };

            /**
             * @brief math public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::math<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name numeric modules
         */
        ///@{
        /**
         * @brief numeric
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_numeric
        {
            /**
             * @brief numeric basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {
            };

            /**
             * @brief numeric public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::numeric<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name arithmetic modules
         */
        ///@{
        /**
         * @brief arithmetic
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_arithmetic
        {
            /**
             * @brief arithmetic basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief arithmetic default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vneg");

                    return (-one.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vadd(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vadd");

                    return (one.value() + other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vsub(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vsub");

                    return (one.value() - other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vmul(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vmul");

                    return (one.value() * other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vdiv(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vdiv");

                    return (one.value() / other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vfmadd(Composed multiplicand, Composed multiplier, Composed addendum) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vfmadd");

                    return multiplicand.value() * multiplier.value() + addendum.value();
                }


                /**
                 * @brief arithmetic default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vfmsub(Composed multiplicand, Composed multiplier, Composed addendum) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vfmsub");

                    return multiplicand.value() * multiplier.value() - addendum.value();
                }

            };

            /**
             * @brief arithmetic public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::arithmetic<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbneg");

                    auto _one = one.value();
                    float result;
                    bitsof(result) = ~bitsof(_one);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vband");

                    auto _one = one.value();
                    auto _other = other.value();
                    float result;
                    bitsof(result) = bitsof(_one) & bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbor");

                    auto _one = one.value();
                    auto _other = other.value();
                    float result;
                    bitsof(result) = bitsof(_one) | bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbxor");

                    auto _one = one.value();
                    auto _other = other.value();
                    float result;
                    bitsof(result) = bitsof(_one) ^ bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bool is_set(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "is_set");

                    return one.value() != 0;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name comparable modules
         */
        ///@{
        /**
         * @brief comparable
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_comparable
        {
            /**
             * @brief comparable basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief comparable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vgt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vgt");

                    return (one.value() > other.value());
                }


                /**
                 * @brief comparable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vlt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlt");

                    return (one.value() < other.value());
                }


                /**
                 * @brief comparable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vge(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vge");

                    return (one.value() >= other.value());
                }


                /**
                 * @brief comparable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vle(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vle");

                    return (one.value() <= other.value());
                }

            };

            /**
             * @brief comparable public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::comparable<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlneg");

                    return !one.value();
                }


                /**
                 * @brief logical default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlor");

                    return (one.value() || other.value());
                }


                /**
                 * @brief logical default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vland");

                    return (one.value() && other.value());
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "veq");

                    return (one.value() == other.value());
                }


                /**
                 * @brief equatable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vneq");

                    return (one.value() != other.value());
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name conditional modules
         */
        ///@{
        /**
         * @brief conditional
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct zfloat32_conditional
        {
            /**
             * @brief conditional basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief conditional default
                 * @relates float32
                 * @remark scalar default
                 */
                friend zfloat32<Interface::feature_mask> vsel(bfloat32<Interface::feature_mask> condition, Composed if_value, Composed else_value) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vsel");

                    return (condition.value() ? if_value : else_value);
                }

            };

            /**
             * @brief conditional public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::conditional<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bfloat32_io
        {
            /**
             * @brief io basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates float32
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstore");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float32
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstream");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float32
                 * @remark scalar default
                 */
                template<typename RandomIt> friend bfloat32<Interface::feature_mask> vgather(RandomIt input, const zint32<Interface::feature_mask> &index,  Composed) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vgather");

                    return input[index.value()];
                }

            };

            /**
             * @brief io public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bfloat32_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbneg");

                    auto _one = one.value();
                    float result;
                    bitsof(result) = ~bitsof(_one);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vband");

                    auto _one = one.value();
                    auto _other = other.value();
                    float result;
                    bitsof(result) = bitsof(_one) & bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbor");

                    auto _one = one.value();
                    auto _other = other.value();
                    float result;
                    bitsof(result) = bitsof(_one) | bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbxor");

                    auto _one = one.value();
                    auto _other = other.value();
                    float result;
                    bitsof(result) = bitsof(_one) ^ bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bool is_set(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "is_set");

                    return one.value() != 0;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bfloat32_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlneg");

                    return !one.value();
                }


                /**
                 * @brief logical default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlor");

                    return (one.value() || other.value());
                }


                /**
                 * @brief logical default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vland");

                    return (one.value() && other.value());
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates float32
         * @remark scalar
         */
        template<typename Interface, typename Composed>
        struct bfloat32_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates float32
             * @remark scalar
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "veq");

                    return (one.value() == other.value());
                }


                /**
                 * @brief equatable default
                 * @relates float32
                 * @remark scalar default
                 */
                friend bfloat32<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vneq");

                    return (one.value() != other.value());
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates float32
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bfloat32<Interface::feature_mask>>;
        };

        ///@}


        // Type composition ================================================================================================

        /**
         * @name float32 composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates float32
         * @remark scalar
         * @tparam features feature mask
         */
        template<uint64_t FeatureMask>
        using zfloat32_ops = compose_t
        <
            printable<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            convertable<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_io<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_math<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_numeric<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_arithmetic<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_bitwise<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_comparable<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_logical<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_equatable<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl,
            zfloat32_conditional<izfloat32<FeatureMask>, zfloat32<FeatureMask>>::template impl
        >;

        /// bfloat32 composition
        /// @tparam features feature mask
        template<uint64_t FeatureMask>
        using bfloat32_ops = compose_t
        <
            printable<ibfloat32<FeatureMask>, bfloat32<FeatureMask>>::template impl,
            convertable<ibfloat32<FeatureMask>, bfloat32<FeatureMask>>::template impl,
            bfloat32_io<ibfloat32<FeatureMask>, bfloat32<FeatureMask>>::template impl,
            bfloat32_bitwise<ibfloat32<FeatureMask>, bfloat32<FeatureMask>>::template impl,
            bfloat32_logical<ibfloat32<FeatureMask>, bfloat32<FeatureMask>>::template impl,
            bfloat32_equatable<ibfloat32<FeatureMask>, bfloat32<FeatureMask>>::template impl
        >;

        ///@}
    } // end namespace

    /// public zfloat32 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct zfloat32 :
        public detail::zfloat32_ops<FeatureMask>,
        public zval<izfloat32<FeatureMask>>
    {
        USING_ZTYPE(izfloat32<FeatureMask>);

        /// complete vector
        using zval_t = zfloat32<FeatureMask>;

        /// complete boolean vector
        using bval_t = bfloat32<FeatureMask>;

        /**
         * copy constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<std::is_convertible<T, std::array<float, 1>>::value>>// || std::is_convertible<T, float>::value>>
        constexpr zfloat32(const T& other) noexcept
            : zval<izfloat32<FeatureMask>>(other)
        {}

        /**
         * move constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<(size > 1) && std::is_convertible<T, std::array<float, 1>>::value>>
        constexpr zfloat32(T&& other) noexcept
            : zval<izfloat32<FeatureMask>>(std::forward<T>(other))
        {}

        /**
         * copy constructor
         * @param other
         */
        constexpr zfloat32(const bfloat32<FeatureMask>& other) noexcept
            : zval<izfloat32<FeatureMask>>(other.value())
        {}


        /**
         * @brief constructable 
         * @relates float32
         * @remark scalar 
         */
        constexpr zfloat32(  ) noexcept : zval<izfloat32<FeatureMask>>()
        {
            ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS()");

        }


        /**
         * @brief constructable 
         * @relates float32
         * @remark scalar 
         */
        constexpr zfloat32(float value) noexcept : zval<izfloat32<FeatureMask>>(value)
        {
            ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS(float)");

        }


        /**
         * @brief constructable 
         * @relates float32
         * @remark scalar 
         */
        constexpr zfloat32(extracted_type value) noexcept : zval<izfloat32<FeatureMask>>(value[0])
        {
            ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS(extracted_type)");

        }

    };

    /// public bfloat32 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct bfloat32 :
            public detail::bfloat32_ops<FeatureMask>,
            public bval<ibfloat32<FeatureMask>>
    {
        USING_ZTYPE(ibfloat32<FeatureMask>);

        /// complete vector
        using zval_t = zfloat32<FeatureMask>;

        /// complete boolean vector
        using bval_t = bfloat32<FeatureMask>;

        /// Forwarding constructor
        FORWARD2(bfloat32, bval<ibfloat32<FeatureMask>>);


        /**
         * @brief constructable 
         * @relates float32
         * @remark scalar 
         */
        constexpr bfloat32(  ) noexcept : bval<ibfloat32<FeatureMask>>()
        {
            ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS()");

        }

    };

    namespace {
        using namespace scalar::float32_detail;

        static_assert(std::is_base_of<izfloat32 < 0>,
                      izfloat32 < 0 >> ::value,
                      "base_of<izfloat32> != izfloat32.");
        static_assert(!std::is_base_of<ibfloat32 < 0>,
                      izfloat32 < 0 >> ::value,
                      "base_of<izfloat32> == ibfloat32.");

        static_assert(is_zval < izfloat32 < 0 >> ::value,
                      "is_zval<izfloat32> == false.");
        static_assert(!is_bval < izfloat32 < 0 >> ::value,
                      "is_bval<izfloat32> != false.");

        static_assert(std::is_base_of<izfloat32 < 0>, zfloat32 < 0 >> ::value,
                      "base_of<zfloat32> != izfloat32.");
        static_assert(!std::is_base_of<ibfloat32 < 0>, zfloat32 < 0 >> ::value,
                      "base_of<zfloat32> == ibfloat32.");

        static_assert(zfloat32 < 0 > ::size == 1,
                      "zfloat32::size != 1.");
        static_assert(zfloat32 < 0 > ::alignment == 16,
                      "zfloat32::alignment != 16.");
        static_assert(zfloat32 < 0 > ::is_vector == (1 > 1),
        "zfloat32::is_vector != (1 > 1).");

        static_assert(std::is_same<zfloat32 < 0>::tag, zval_tag > ::value,
                      "zfloat32::tag != zval_tag.");
        static_assert(std::is_same<zfloat32 < 0>::vector_type, std::array<float, 1> > ::value,
                      "zfloat32::vector_type != std::array<float, 1>.");
        static_assert(std::is_same<zfloat32 < 0>::element_type, float > ::value,
                      "zfloat32::element_type != float.");
        static_assert(std::is_same<zfloat32 < 0>::mask_vector_type, std::array<bool, 1> > ::value,
                      "zfloat32::mask_vector_type != std::array<bool, 1>.");
        static_assert(std::is_same<zfloat32 < 0>::extracted_type,
                      std::array<float, 1>>::value,
                      "zfloat32::extracted_type != std::array<float, 1>.");


        static_assert(std::is_same<typename ztraits<zfloat32 < 0>>::tag, zval_tag > ::value,
                      "zfloat32::tag != zval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<zfloat32 < 0>>::element_type > ::value,
                      "is_arithmetic<zfloat32::element_type> == false.");
        static_assert(is_zval < zfloat32 < 0 >> ::value,
                      "is_zval<zfloat32> == false.");
        static_assert(!is_bval < zfloat32 < 0 >> ::value,
                      "is_bval<zfloat32> != false.");


        static_assert(std::is_base_of<izfloat32 < 0>,
                      izfloat32 < 0 >> ::value,
                      "base_of<izfloat32> != izfloat32.");
        static_assert(!std::is_base_of<ibfloat32 < 0>,
                      izfloat32 < 0 >> ::value,
                      "base_of<izfloat32> == ibfloat32.");


        static_assert(!is_zval < ibfloat32 < 0 >> ::value,
                      "is_zval<ibfloat32> != false.");
        static_assert(is_bval < ibfloat32 < 0 >> ::value,
                      "is_bval<ibfloat32> == false.");

        static_assert(std::is_base_of<ibfloat32 < 0>, bfloat32 < 0 >> ::value,
                      "base_of<bfloat32> != ibfloat32.");
        static_assert(!std::is_base_of<izfloat32 < 0>, bfloat32 < 0 >> ::value,
                      "base_of<bfloat32> == izfloat32.");

        static_assert(bfloat32 < 0 > ::size == 1,
                      "bfloat32::size != 1.");
        static_assert(bfloat32 < 0 > ::alignment == 16,
                      "bfloat32::alignment != 16.");
        static_assert(bfloat32 < 0 > ::is_vector == (1 > 1),
        "bfloat32::is_vector != (1 > 1).");

        static_assert(std::is_same<bfloat32 < 0>::tag, bval_tag > ::value,
                      "bfloat32::tag != zval_tag.");
        static_assert(std::is_same<bfloat32 < 0>::vector_type, std::array<float, 1> > ::value,
                      "bfloat32::vector_type != std::array<float, 1>.");
        static_assert(std::is_same<bfloat32 < 0>::element_type, float > ::value,
                      "bfloat32::element_type != float.");
        static_assert(std::is_same<bfloat32 < 0>::mask_vector_type, std::array<bool, 1> > ::value,
                      "bfloat32::mask_vector_type != std::array<bool, 1>.");
        static_assert(std::is_same<bfloat32 < 0>::extracted_type,
                      std::array<float, 1>>::value,
        "bfloat32::extracted_type != std::array<float, 1>.");

        static_assert(std::is_same<typename ztraits<bfloat32 < 0>>::tag, bval_tag > ::value,
                      "bfloat32::tag != bval_tag.");
        static_assert(std::is_arithmetic<typename ztraits<bfloat32 < 0>>::element_type > ::value,
                      "is_arithmetic<bfloat32::element_type> == false.");
        static_assert(!is_zval < bfloat32 < 0 >> ::value,
                      "is_zval<bfloat32> != false.");
        static_assert(is_bval < bfloat32 < 0 >> ::value,
                      "is_bval<bfloat32> == false.");

        static_assert(!std::is_floating_point<float>::value ||
                      is_floating_point < zfloat32 < 0 >> ::value,
                      "is_floating_point<zfloat32> == false. [scalar = float]");
        static_assert(!std::is_floating_point<float>::value ||
                      !is_integral < zfloat32 < 0 >> ::value,
                      "is_integral<zfloat32> != false. [scalar = float]");

        static_assert(
                !std::is_same<float, float>::value || is_float < zfloat32 < 0 >> ::value,
                "is_float<zfloat32> == false. [scalar = float]");
        static_assert(
                !std::is_same<float, float>::value || !is_double < zfloat32 < 0 >> ::value,
                "is_double<zfloat32> != false. [scalar = float]");

        static_assert(
                !std::is_same<float, double>::value || is_double < zfloat32 < 0 >> ::value,
                "is_double<zfloat32> == false. [scalar = float]");
        static_assert(
                !std::is_same<float, double>::value || !is_float < zfloat32 < 0 >> ::value,
                "is_float<zfloat32> != false. [scalar = float]");

        static_assert(
                !std::is_integral<float>::value || is_integral < zfloat32 < 0 >> ::value,
                "is_integral<zfloat32> == false. [scalar = float]");
        static_assert(!std::is_integral<float>::value ||
                      !is_floating_point < zfloat32 < 0 >> ::value,
                      "is_floating_point<zfloat32> != false. [scalar = float]");
    }
    ///@}
}}}