//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file float32.impl.hpp
 * @brief
 * This file provides defines required components and logic for float32 scalar target.
 * Provides unified access to 1 'float' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/comparable.hpp"
#include "traits/conditional.hpp"
#include "traits/logical.hpp"
#include "traits/arithmetic.hpp"
#include "traits/bitwise.hpp"
#include "traits/io.hpp"
#include "traits/equatable.hpp"
#include "traits/numeric.hpp"
#include "traits/math.hpp"

namespace zacc { namespace backend { namespace scalar {

    /// @cond
    template<uint64_t features>
    struct bfloat32;

    template<uint64_t features>
    struct zfloat32;
    /// @endcond


    // =================================================================================================================
    /**
     * @name construction modules
     */
    ///@{

    /**
     * @brief construction
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;


            /**
             * @brief construction 
             * @relates float32
             * @remark scalar 
             */
            constexpr __impl(  ) : Base()  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS()");

            }


            /**
             * @brief construction 
             * @relates float32
             * @remark scalar 
             */
            constexpr __impl(float value) : Base(value)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS(float)");

            }


            /**
             * @brief construction 
             * @relates float32
             * @remark scalar 
             */
            template <typename T, typename enable = std::enable_if_t<is_zval<T>::value || is_bval<T>::value>> __impl(const T &value) : Base(value.value())  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS(const T)");

            }


            /**
             * @brief construction 
             * @relates float32
             * @remark scalar 
             */
            constexpr __impl(std::array<typename Base::element_t, Base::size()> value) : Base(value[0])  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS(std::array<typename Base::element_t, Base::size()>)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name construction modules
     */
    ///@{

    /**
     * @brief construction
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct bfloat32_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;


            /**
             * @brief construction 
             * @relates float32
             * @remark scalar 
             */
            constexpr __impl(  ) : Base()  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS()");

            }


            /**
             * @brief construction 
             * @relates float32
             * @remark scalar 
             */
            constexpr __impl(zval_t value) : Base(value.value() != 0)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS(zval_t)");

            }


            /**
             * @brief construction 
             * @relates float32
             * @remark scalar 
             */
            constexpr __impl(bval_t value, last_operation last_op) : Base(value, last_op)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "", "CONS(bval_t value, last_operation)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io modules
     */
    ///@{

    /**
     * @brief io
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_io
    {

        /**
         * @brief io basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief io default
             * @relates float32
             * @remark scalar default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstore");

                result[0] = input.value();
            }


            /**
             * @brief io default
             * @relates float32
             * @remark scalar default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstream");

                result[0] = input.value();
            }


            /**
             * @brief io default
             * @relates float32
             * @remark scalar default
             */
            template<typename RandomIt> friend zfloat32<Base::features> vgather(RandomIt input, const zint32<Base::features> &index, Composed)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vgather");

                return input[index.value()];
            }

        };

        /**
         * @brief io public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::io<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name math modules
     */
    ///@{

    /**
     * @brief math
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_math
    {

        /**
         * @brief math basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vabs(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vabs");

                return std::abs(one.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vmin(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vmin");

                return std::min(one.value(), other.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vmax(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vmax");

                return std::max(one.value(), other.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vclamp(Composed self, Composed from, Composed to)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vclamp");

                return vmin(to, vmax(from, self));
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vrcp(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vrcp");

                return (1 / one.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vtrunc(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vtrunc");

                return std::trunc(one.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vfloor(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vfloor");

                return std::floor(one.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vceil(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vceil");

                return std::ceil(one.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vround(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vround");

                return std::round(one.value());
            }


            /**
             * @brief math default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vsqrt(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vsqrt");

                return std::sqrt(one.value());
            }

        };

        /**
         * @brief math public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::math<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name numeric modules
     */
    ///@{

    /**
     * @brief numeric
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_numeric
    {

        /**
         * @brief numeric basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);
        };

        /**
         * @brief numeric public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::numeric<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic modules
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief arithmetic default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vneg(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vneg");

                return (-one.value());
            }


            /**
             * @brief arithmetic default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vadd(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vadd");

                return (one.value() + other.value());
            }


            /**
             * @brief arithmetic default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vsub(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vsub");

                return (one.value() - other.value());
            }


            /**
             * @brief arithmetic default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vmul(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vmul");

                return (one.value() * other.value());
            }


            /**
             * @brief arithmetic default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vdiv(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vdiv");

                return (one.value() / other.value());
            }


            /**
             * @brief arithmetic default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vfmadd(Composed multiplicand, Composed multiplier, Composed addendum)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vfmadd");

                return multiplicand.value() * multiplier.value() + addendum.value();
            }


            /**
             * @brief arithmetic default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vfmsub(Composed multiplicand, Composed multiplier, Composed addendum)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vfmsub");

                return multiplicand.value() * multiplier.value() - addendum.value();
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::arithmetic<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise modules
     */
    ///@{

    /**
     * @brief bitwise
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vbneg(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbneg");

                auto _one = one.value();
                float result;
                bitsof(result) = ~bitsof(_one);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vband(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vband");

                auto _one = one.value();
                auto _other = other.value();
                float result;
                bitsof(result) = bitsof(_one) & bitsof(_other);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vbor(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbor");

                auto _one = one.value();
                auto _other = other.value();
                float result;
                bitsof(result) = bitsof(_one) | bitsof(_other);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vbxor(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbxor");

                auto _one = one.value();
                auto _other = other.value();
                float result;
                bitsof(result) = bitsof(_one) ^ bitsof(_other);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend bool is_set(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "is_set");

                return one.value() != 0;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparable modules
     */
    ///@{

    /**
     * @brief comparable
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_comparable
    {

        /**
         * @brief comparable basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief comparable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vgt(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vgt");

                return (one.value() > other.value());
            }


            /**
             * @brief comparable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vlt(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlt");

                return (one.value() < other.value());
            }


            /**
             * @brief comparable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vge(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vge");

                return (one.value() >= other.value());
            }


            /**
             * @brief comparable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vle(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vle");

                return (one.value() <= other.value());
            }

        };

        /**
         * @brief comparable public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::comparable<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical modules
     */
    ///@{

    /**
     * @brief logical
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief logical default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vlneg(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlneg");

                return !one.value();
            }


            /**
             * @brief logical default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vlor(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlor");

                return (one.value() || other.value());
            }


            /**
             * @brief logical default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vland(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vland");

                return (one.value() && other.value());
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable modules
     */
    ///@{

    /**
     * @brief equatable
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief equatable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> veq(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "veq");

                return (one.value() == other.value());
            }


            /**
             * @brief equatable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vneq(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vneq");

                return (one.value() != other.value());
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional modules
     */
    ///@{

    /**
     * @brief conditional
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct zfloat32_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief conditional default
             * @relates float32
             * @remark scalar default
             */
            friend zfloat32<Base::features> vsel(bval_t condition, Composed if_value, Composed else_value)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vsel");

                return (condition.value() ? if_value : else_value);
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::conditional<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io modules
     */
    ///@{

    /**
     * @brief io
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct bfloat32_io
    {

        /**
         * @brief io basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief io default
             * @relates float32
             * @remark scalar default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstore");

                result[0] = input.value();
            }


            /**
             * @brief io default
             * @relates float32
             * @remark scalar default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vstream");

                result[0] = input.value();
            }


            /**
             * @brief io default
             * @relates float32
             * @remark scalar default
             */
            template<typename RandomIt> friend bfloat32<Base::features> vgather(RandomIt input, const zint32<Base::features> &index, Composed)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vgather");

                return input[index.value()];
            }

        };

        /**
         * @brief io public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::io<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise modules
     */
    ///@{

    /**
     * @brief bitwise
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct bfloat32_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vbneg(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbneg");

                auto _one = one.value();
                float result;
                bitsof(result) = ~bitsof(_one);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vband(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vband");

                auto _one = one.value();
                auto _other = other.value();
                float result;
                bitsof(result) = bitsof(_one) & bitsof(_other);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vbor(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbor");

                auto _one = one.value();
                auto _other = other.value();
                float result;
                bitsof(result) = bitsof(_one) | bitsof(_other);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vbxor(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vbxor");

                auto _one = one.value();
                auto _other = other.value();
                float result;
                bitsof(result) = bitsof(_one) ^ bitsof(_other);
                return result;
            }


            /**
             * @brief bitwise default
             * @relates float32
             * @remark scalar default
             */
            friend bool is_set(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "is_set");

                return one.value() != 0;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical modules
     */
    ///@{

    /**
     * @brief logical
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct bfloat32_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief logical default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vlneg(Composed one)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlneg");

                return !one.value();
            }


            /**
             * @brief logical default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vlor(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vlor");

                return (one.value() || other.value());
            }


            /**
             * @brief logical default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vland(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vland");

                return (one.value() && other.value());
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable modules
     */
    ///@{

    /**
     * @brief equatable
     * @relates float32
     * @remark scalar
     */
    template<typename Composed>
    struct bfloat32_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename Base>
        struct __impl : Base
        {
            /// complete vector
            using zval_t        = zfloat32<Base::features>;
            /// complete boolean vector
            using bval_t        = bfloat32<Base::features>;
            /// type tag
            using tag           = typename Base::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<Base>::vector_t;
            /// element type
            using element_t     = typename zval_traits<Base>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<Base>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<Base>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief equatable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> veq(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "veq");

                return (one.value() == other.value());
            }


            /**
             * @brief equatable default
             * @relates float32
             * @remark scalar default
             */
            friend bfloat32<Base::features> vneq(Composed one, Composed other)  {

                ZTRACE_BACKEND("scalar.float32.impl", __LINE__, "float32(float[1])", "default", "vneq");

                return (one.value() != other.value());
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates float32
         * @remark scalar
         */
        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name float32 composition
     */
    ///@{

        /**
         * @brief zval parametrization using
         * - 'float' as underlying vector type
         * - 'float' as scalar type
         * - '1' as vector size
         * - '16' as alignment
         * @relates float32
         * @remark scalar
         */
        template<uint64_t features>
        struct __zval_float32
        {
            /// vector base
            using zval_base_t = zval<float, bool, float, zval_tag, 1, 16, features>;
            /// boolean vector base
            using bval_base_t = bval<float, bool, 1, 16, features>;

            /// implementation
            struct impl : public zval_base_t
            {
                /// complete vector
                using zval_t = zfloat32<features>;
                /// complete boolean vector
                using bval_t = bfloat32<features>;

                /// forward to base
                FORWARD2(impl, zval_base_t);
            };
        };
        /**
         * @brief zval composition
         * @relates float32
         * @remark scalar
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __zfloat32
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using zval_t = typename __zval_float32<features>::impl;

            /// compose type from modules
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                zfloat32_io<impl>::template impl,
                zfloat32_math<impl>::template impl,
                zfloat32_numeric<impl>::template impl,
                zfloat32_arithmetic<impl>::template impl,
                zfloat32_bitwise<impl>::template impl,
                zfloat32_comparable<impl>::template impl,
                zfloat32_logical<impl>::template impl,
                zfloat32_equatable<impl>::template impl,
                zfloat32_conditional<impl>::template impl,
                zfloat32_construction<impl>::template impl,

                composable<zval_t>::template type
            >;

//            struct composition_t :
//            //                public printable::impl<zval_t>,
//            //                public iteratable::impl<zval_t>,
//            //                public convertable::impl<zval_t>,
//            //                public zfloat32_io<impl>::template impl<zval_t>,
//            //                public zfloat32_math<impl>::template impl<zval_t>,
//            //                public zfloat32_numeric<impl>::template impl<zval_t>,
//            //                public zfloat32_arithmetic<impl>::template impl<zval_t>,
//            //                public zfloat32_bitwise<impl>::template impl<zval_t>,
//            //                public zfloat32_comparable<impl>::template impl<zval_t>,
//            //                public zfloat32_logical<impl>::template impl<zval_t>,
//            //                public zfloat32_equatable<impl>::template impl<zval_t>,
//            //                public zfloat32_conditional<impl>::template impl<zval_t>,
//            //                public zfloat32_construction<impl>::template impl<zval_t>,
//            //                public zval_t
//            {};

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = zfloat32<features>;
                /// complete boolean vector
                using bval_t = bfloat32<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };

        /**
         * @brief bval parametrization using
         * - 'float' as underlying vector type
         * - 'float' as scalar type
         * - '1' as vector size
         * - '16' as alignment
         * @relates float32
         * @remark scalar
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __bval_float32
        {
            /// complete vector base
            using zval_base_t = zval<float, bool, float, zval_tag, 1, 16, features>;
            /// complete boolean vector base
            using bval_base_t = bval<float, bool, 1, 16, features>;

            /// implementation
            struct impl : public bval_base_t
            {
                /// complete vector
                using zval_t = zfloat32<features>;
                /// complete boolean vector
                using bval_t = bfloat32<features>;

                /// forward to base
                FORWARD2(impl, bval_base_t);
            };
        };

        /// bfloat32 composition
        /// @tparam features feature mask
        template<uint64_t features>
        struct __bfloat32
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using bval_t = typename __bval_float32<features>::impl;
            /// compose type from modules
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                bfloat32_io<impl>::template impl,
                bfloat32_bitwise<impl>::template impl,
                bfloat32_logical<impl>::template impl,
                bfloat32_equatable<impl>::template impl,
                bfloat32_construction<impl>::template impl,

                composable<bval_t>::template type
            >;

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = zfloat32<features>;
                /// complete boolean vector
                using bval_t = bfloat32<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };
    //}

    /// public zfloat32 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct zfloat32 : public __zfloat32<features>::impl
    {
        /// complete vector
        using zval_t = zfloat32<features>;
        /// complete boolean vector
        using bval_t = bfloat32<features>;

        /// forward to base
        FORWARD2(zfloat32, __zfloat32<features>::impl);
    };

    /// public bfloat32 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct bfloat32 : public __bfloat32<features>::impl
    {
        /// complete vector
        using zval_t = zfloat32<features>;
        /// complete boolean vector
        using bval_t = bfloat32<features>;

        /// forward to base
        FORWARD2(bfloat32, __bfloat32<features>::impl);
    };

    static_assert(is_zval<zfloat32<0>>::value, "is_zval for zfloat32 failed.");
    static_assert(is_bval<bfloat32<0>>::value, "is_bval for bfloat32 failed.");

    static_assert(is_floating_point<zfloat32<0>>::value, "is_floating_point for zfloat32 failed.");
    static_assert(!is_integral<zfloat32<0>>::value, "is_integral for zfloat32 failed.");

    static_assert(is_float<zfloat32<0>>::value, "is_float for zfloat32 failed.");
    static_assert(!is_double<zfloat32<0>>::value, "is_double for zfloat32 failed.");

    ///@}
}}}