//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file float64.impl.hpp
 * @brief
 * This file provides defines required components and logic for float64 scalar target.
 * Provides unified access to 1 'double' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/constructable.hpp"
#include "traits/convertable.hpp"
#include "traits/printable.hpp"
#include "traits/io.hpp"
#include "traits/bitwise.hpp"
#include "traits/comparable.hpp"
#include "traits/arithmetic.hpp"
#include "traits/equatable.hpp"
#include "traits/numeric.hpp"
#include "traits/logical.hpp"
#include "traits/conditional.hpp"
#include "traits/math.hpp"

namespace zacc { namespace backend { namespace scalar
{
    /// @cond
    template<uint64_t features>
    struct bfloat64;

    template<uint64_t features>
    struct zfloat64;
    /// @endcond

    namespace float64_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 1;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = double;

        /// scalar type, like int for sse 4x integer vector
        using element_t = double;

        /// mask type for boolean operations
        using mask_vector_t = bool;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;


        template<uint64_t Features>
        using zval_base = zval<double, bool, double, zval_tag, 1, 16, Features>;

        template<uint64_t Features>
        using bval_base = bval<double, bool, double, 1, 16, Features>;

        template<typename T>
        using zval_is_base_of = std::is_base_of<zval_base<T::features>, T>;

        template<typename T>
        using bval_is_base_of = std::is_base_of<bval_base<T::features>, T>;
    }

}}}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::scalar::float64_detail::zval_base<T::features>, T>::value
            || std::is_base_of<backend::scalar::float64_detail::bval_base<T::features>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 1;

        /// capabilities
        static constexpr uint64_t features = T::features;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = double;

        /// scalar type, like int for sse 4x integer vector
        using element_t = double;

        /// mask type for boolean operations
        using mask_vector_t = bool;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;

        using zval_t = backend::scalar::zfloat64<T::features>;
        using bval_t = backend::scalar::bfloat64<T::features>;

        using tag = select_t<
                when<std::is_base_of<backend::scalar::float64_detail::zval_base<T::features>, T>::value, zval_tag>,
                when<std::is_base_of<backend::scalar::float64_detail::bval_base<T::features>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace scalar {

    namespace float64_detail {


        // =================================================================================================================
        /**
         * @name constructable modules
         */
        ///@{
        /**
         * @brief constructable
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_constructable
        {

            /**
             * @brief constructable basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {

                /**
                 * @brief constructable 
                 * @relates float64
                 * @remark scalar 
                 */
                constexpr __impl(  ) : Base()  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "", "CONS()");

                }


                /**
                 * @brief constructable 
                 * @relates float64
                 * @remark scalar 
                 */
                constexpr __impl(double value) : Base(value)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "", "CONS(double)");

                }


                /**
                 * @brief constructable 
                 * @relates float64
                 * @remark scalar 
                 */
                template <typename T, typename enable = std::enable_if_t<is_zval<T>::value || is_bval<T>::value>> __impl(const T &value) : Base(value.value())  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "", "CONS(const T)");

                }


                /**
                 * @brief constructable 
                 * @relates float64
                 * @remark scalar 
                 */
                constexpr __impl(extracted_t value) : Base(value[0])  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "", "CONS(extracted_t)");

                }

            };

            /**
             * @brief constructable public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::constructable<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name constructable modules
         */
        ///@{
        /**
         * @brief constructable
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct bfloat64_constructable
        {

            /**
             * @brief constructable basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {

                /**
                 * @brief constructable 
                 * @relates float64
                 * @remark scalar 
                 */
                constexpr __impl(  ) : Base()  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "", "CONS()");

                }


                /**
                 * @brief constructable 
                 * @relates float64
                 * @remark scalar 
                 */
                constexpr __impl(zfloat64<Base::features> value) : Base(value.value() != 0)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "", "CONS(zval_t)");

                }


                /**
                 * @brief constructable 
                 * @relates float64
                 * @remark scalar 
                 */
                constexpr __impl(bfloat64<Base::features> value, last_operation last_op) : Base(value, last_op)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "", "CONS(bval_t, last_operation)");

                }

            };

            /**
             * @brief constructable public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::constructable<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_io
        {

            /**
             * @brief io basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief io default
                 * @relates float64
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vstore");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vstream");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark scalar default
                 */
                template<typename RandomIt> friend zfloat64<Base::features> vgather(RandomIt input, const zint32<Base::features> &index,  Composed)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vgather");

                    return input[index.value()];
                }

            };

            /**
             * @brief io public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::io<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name math modules
         */
        ///@{
        /**
         * @brief math
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_math
        {

            /**
             * @brief math basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vabs(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vabs");

                    return std::abs(one.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vmin(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vmin");

                    return std::min(one.value(), other.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vmax(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vmax");

                    return std::max(one.value(), other.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vclamp(Composed self, Composed from, Composed to)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vclamp");

                    return vmin(to, vmax(from, self));
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vrcp(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vrcp");

                    return (1 / one.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vtrunc(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vtrunc");

                    return std::trunc(one.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vfloor(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vfloor");

                    return std::floor(one.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vceil(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vceil");

                    return std::ceil(one.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vround(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vround");

                    return std::round(one.value());
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vsqrt(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vsqrt");

                    return std::sqrt(one.value());
                }

            };

            /**
             * @brief math public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::math<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name numeric modules
         */
        ///@{
        /**
         * @brief numeric
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_numeric
        {

            /**
             * @brief numeric basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);
            };

            /**
             * @brief numeric public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::numeric<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name arithmetic modules
         */
        ///@{
        /**
         * @brief arithmetic
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_arithmetic
        {

            /**
             * @brief arithmetic basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vneg(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vneg");

                    return (-one.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vadd(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vadd");

                    return (one.value() + other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vsub(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vsub");

                    return (one.value() - other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vmul(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vmul");

                    return (one.value() * other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vdiv(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vdiv");

                    return (one.value() / other.value());
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vfmadd(Composed multiplicand, Composed multiplier, Composed addendum)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vfmadd");

                    return multiplicand.value() * multiplier.value() + addendum.value();
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vfmsub(Composed multiplicand, Composed multiplier, Composed addendum)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vfmsub");

                    return multiplicand.value() * multiplier.value() - addendum.value();
                }

            };

            /**
             * @brief arithmetic public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::arithmetic<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_bitwise
        {

            /**
             * @brief bitwise basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vbneg(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vbneg");

                    auto _one = one.value();
                    double result;
                    bitsof(result) = ~bitsof(_one);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vband(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vband");

                    auto _one = one.value();
                    auto _other = other.value();
                    double result;
                    bitsof(result) = bitsof(_one) & bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vbor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vbor");

                    auto _one = one.value();
                    auto _other = other.value();
                    double result;
                    bitsof(result) = bitsof(_one) | bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vbxor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vbxor");

                    auto _one = one.value();
                    auto _other = other.value();
                    double result;
                    bitsof(result) = bitsof(_one) ^ bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bool is_set(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "is_set");

                    return one.value() != 0;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::bitwise<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name comparable modules
         */
        ///@{
        /**
         * @brief comparable
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_comparable
        {

            /**
             * @brief comparable basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vgt(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vgt");

                    return (one.value() > other.value());
                }


                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vlt(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vlt");

                    return (one.value() < other.value());
                }


                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vge(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vge");

                    return (one.value() >= other.value());
                }


                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vle(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vle");

                    return (one.value() <= other.value());
                }

            };

            /**
             * @brief comparable public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::comparable<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_logical
        {

            /**
             * @brief logical basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief logical default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vlneg(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vlneg");

                    return (!one.value());
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vlor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vlor");

                    return (one.value() || other.value());
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vland(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vland");

                    return (one.value() && other.value());
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::logical<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_equatable
        {

            /**
             * @brief equatable basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> veq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "veq");

                    return (one.value() == other.value());
                }


                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vneq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vneq");

                    return (one.value() != other.value());
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::equatable<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name conditional modules
         */
        ///@{
        /**
         * @brief conditional
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct zfloat64_conditional
        {

            /**
             * @brief conditional basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief conditional default
                 * @relates float64
                 * @remark scalar default
                 */
                friend zfloat64<Base::features> vsel(bfloat64<Base::features> condition, Composed if_value, Composed else_value)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vsel");

                    return (condition.value() ? if_value : else_value);
                }

            };

            /**
             * @brief conditional public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::conditional<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct bfloat64_io
        {

            /**
             * @brief io basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief io default
                 * @relates float64
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vstore");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark scalar default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vstream");

                    result[0] = input.value();
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark scalar default
                 */
                template<typename RandomIt> friend bfloat64<Base::features> vgather(RandomIt input, const zint32<Base::features> &index,  Composed)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vgather");

                    return input[index.value()];
                }

            };

            /**
             * @brief io public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::io<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct bfloat64_bitwise
        {

            /**
             * @brief bitwise basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vbneg(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vbneg");

                    auto _one = one.value();
                    double result;
                    bitsof(result) = ~bitsof(_one);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vband(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vband");

                    auto _one = one.value();
                    auto _other = other.value();
                    double result;
                    bitsof(result) = bitsof(_one) & bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vbor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vbor");

                    auto _one = one.value();
                    auto _other = other.value();
                    double result;
                    bitsof(result) = bitsof(_one) | bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vbxor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vbxor");

                    auto _one = one.value();
                    auto _other = other.value();
                    double result;
                    bitsof(result) = bitsof(_one) ^ bitsof(_other);
                    return result;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bool is_set(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "is_set");

                    return one.value() != 0;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::bitwise<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct bfloat64_logical
        {

            /**
             * @brief logical basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief logical default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vlneg(Composed one)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vlneg");

                    return (!one.value());
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vlor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vlor");

                    return (one.value() || other.value());
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vland(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vland");

                    return (one.value() && other.value());
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::logical<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates float64
         * @remark scalar
         */
        template<typename Composed>
        struct bfloat64_equatable
        {

            /**
             * @brief equatable basic interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> veq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "veq");

                    return (one.value() == other.value());
                }


                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark scalar default
                 */
                friend bfloat64<Base::features> vneq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("scalar.float64.impl", __LINE__, "float64(double[1])", "default", "vneq");

                    return (one.value() != other.value());
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates float64
             * @remark scalar
             */
            template<typename Base>
            using impl = traits::equatable<__impl<Base>, Composed, bfloat64<Base::features>>;

        };

        ///@}


        // Type composition ================================================================================================

        /**
         * @name float64 composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates float64
         * @remark scalar
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __zfloat64
        {
            /// @cond
            struct impl;
            /// @endcond

            /**
            * @brief zval parametrization using
            * - 'double' as underlying vector type
            * - 'double' as scalar type
            * - '1' as vector size
            * - '16' as alignment
            * @relates float64
            * @remark scalar
            */
            using base = zval<double, bool, double, zval_tag, 1, 16, features>;

            /// parametrized zval base
            struct composable_base : base
            {
                /// forward to base
                FORWARD2(composable_base, base);
            };

            /// compose type from modules
            using composed = compose
            <
                printable<zfloat64<features>>::template impl,
                convertable<zfloat64<features>>::template impl,
                zfloat64_io<zfloat64<features>>::template impl,
                zfloat64_math<zfloat64<features>>::template impl,
                zfloat64_numeric<zfloat64<features>>::template impl,
                zfloat64_arithmetic<zfloat64<features>>::template impl,
                zfloat64_bitwise<zfloat64<features>>::template impl,
                zfloat64_comparable<zfloat64<features>>::template impl,
                zfloat64_logical<zfloat64<features>>::template impl,
                zfloat64_equatable<zfloat64<features>>::template impl,
                zfloat64_conditional<zfloat64<features>>::template impl,
                zfloat64_constructable<zfloat64<features>>::template impl,

                composable<composable_base>::template type
            >;

            /// implementation
            struct impl : public composed
            {
                /// complete vector
                using zval_t = zfloat64<features>;
                /// complete boolean vector
                using bval_t = bfloat64<features>;

                using tag = zval_tag;

                using element_t = double;

                /// vector size (1 - scalar, 4, 8, 16, ...)
                static constexpr size_t size() { return float64_detail::size; }

                /// scalar type? vector type?
                static constexpr bool is_vector = float64_detail::is_vector;

                /// memory alignment
                static constexpr size_t alignment = float64_detail::alignment;

                /// forward to base
                FORWARD2(impl, composed);
            };
        };

        /// bfloat64 composition
        /// @tparam features feature mask
        template<uint64_t features>
        struct __bfloat64
        {
            /// @cond
            struct impl;
            /// @endcond

            /**
            * @brief bval parametrization using
            * - 'double' as underlying vector type
            * - 'double' as scalar type
            * - '1' as vector size
            * - '16' as alignment
            * @relates float64
            * @remark scalar
            */
            using base = bval<double, bool, double, 1, 16, features>;

            /// parametrized zval base
            struct composable_base : base
            {
                /// forward to base
                FORWARD2(composable_base, base);
            };

            /// compose type from modules
            using composed = compose
            <
                printable<bfloat64<features>>::template impl,
                convertable<bfloat64<features>>::template impl,
                bfloat64_io<bfloat64<features>>::template impl,
                bfloat64_bitwise<bfloat64<features>>::template impl,
                bfloat64_logical<bfloat64<features>>::template impl,
                bfloat64_equatable<bfloat64<features>>::template impl,
                bfloat64_constructable<bfloat64<features>>::template impl,

                composable<composable_base>::template type
            >;

            /// implementation
            struct impl : public composed
            {
                /// complete vector
                using zval_t = zfloat64<features>;
                /// complete boolean vector
                using bval_t = bfloat64<features>;

                using tag = bval_tag;

                using element_t = bool;

                /// vector size (1 - scalar, 4, 8, 16, ...)
                static constexpr size_t size() { return float64_detail::size; }

                /// scalar type? vector type?
                static constexpr bool is_vector = float64_detail::is_vector;

                /// memory alignment
                static constexpr size_t alignment = float64_detail::alignment;

                /// forward to base
                FORWARD2(impl, composed);
            };
        };

    } // end namespace

    /// public zfloat64 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct zfloat64 : public float64_detail::__zfloat64<features>::impl
    {
            /// complete vector
            using zval_t = zfloat64<features>;
            /// complete boolean vector
            using bval_t = bfloat64<features>;

            using tag = zval_tag;

            using element_t = double;

            /// vector size (1 - scalar, 4, 8, 16, ...)
            static constexpr size_t size() { return float64_detail::size; }

            /// scalar type? vector type?
            static constexpr bool is_vector = float64_detail::is_vector;

            /// memory alignment
            static constexpr size_t alignment = float64_detail::alignment;


            /// forward to base
            FORWARD2(zfloat64, float64_detail::__zfloat64<features>::impl);
    };

    /// public bfloat64 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct bfloat64 : public float64_detail::__bfloat64<features>::impl
    {
        /// complete vector
        using zval_t = zfloat64<features>;
        /// complete boolean vector
        using bval_t = bfloat64<features>;

        using tag = bval_tag;

        using element_t = bool;

        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size() { return float64_detail::size; }

        /// scalar type? vector type?
        static constexpr bool is_vector = float64_detail::is_vector;

        /// memory alignment
        static constexpr size_t alignment = float64_detail::alignment;

        /// forward to base
        FORWARD2(bfloat64, float64_detail::__bfloat64<features>::impl);
    };

    static_assert(is_zval<zfloat64<0>>::value, "is_zval for zfloat64 failed.");
    static_assert(is_bval<bfloat64<0>>::value, "is_bval for bfloat64 failed.");

    static_assert(is_floating_point<zfloat64<0>>::value, "is_floating_point for zfloat64 failed.");
    static_assert(!is_integral<zfloat64<0>>::value, "is_integral for zfloat64 failed.");

    static_assert(!is_float<zfloat64<0>>::value, "is_float for zfloat64 failed.");
    static_assert(is_double<zfloat64<0>>::value, "is_double for zfloat64 failed.");

    ///@}
}}}