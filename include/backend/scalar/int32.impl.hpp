//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/arithmetic.hpp"
#include "traits/bitwise.hpp"
#include "traits/numeric.hpp"
#include "traits/bitwise_shift.hpp"
#include "traits/equatable.hpp"
#include "traits/io.hpp"
#include "traits/conditional.hpp"
#include "traits/math.hpp"
#include "traits/logical.hpp"
#include "traits/comparable.hpp"

/**
 * @brief int32 implementation for the scalar target
 * provides unified access to 1 'int32_t' values
 */

namespace zacc { namespace backend { namespace scalar {

    template<uint64_t features>
    struct bint32;

    template<uint64_t features>
    struct zint32;


    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);


            /**
             * @brief construction  branch
             * @relates int32
             * @remark scalar - 
             */
            constexpr __impl(  ) : base_t()  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "", "CONS()");

            }


            /**
             * @brief construction  branch
             * @relates int32
             * @remark scalar - 
             */
            constexpr __impl(int32_t value) : base_t(value)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "", "CONS()");

            }


            /**
             * @brief construction  branch
             * @relates int32
             * @remark scalar - 
             */
            template <typename T, typename enable = std::enable_if_t<is_zval<T>::value || is_bval<T>::value>> __impl(const T &value) : base_t(value.value())  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "", "CONS()");

            }


            /**
             * @brief construction  branch
             * @relates int32
             * @remark scalar - 
             */
            constexpr __impl(std::array<typename base_t::element_t, base_t::size()> value) : base_t(value[0])  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "", "CONS()");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct bint32_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);


            /**
             * @brief construction  branch
             * @relates int32
             * @remark scalar - 
             */
            constexpr __impl(  ) : base_t()  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "", "CONS()");

            }


            /**
             * @brief construction  branch
             * @relates int32
             * @remark scalar - 
             */
            constexpr __impl(zval_t value) : base_t(value.value() != 0)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "", "CONS()");

            }


            /**
             * @brief construction  branch
             * @relates int32
             * @remark scalar - 
             */
            constexpr __impl(bval_t value, last_operation last_op) : base_t(value, last_op)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "", "CONS()");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, bint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief io Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            template<typename OutputIt> friend void vstore(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                result[0] = input.value();
            }


            /**
             * @brief io Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            template<typename OutputIt> friend void vstream(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                result[0] = input.value();
            }


            /**
             * @brief io Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            template<typename RandomIt> friend zint32<base_t::features> vgather(RandomIt input, const zint32<base_t::features> &index, composed_t)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return input[index.value()];
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::io<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name math operations
     */
    ///@{

    /**
     * @brief math
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_math
    {

        /**
         * @brief math basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief math Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vabs(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return std::abs(one.value());
            }


            /**
             * @brief math Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vmin(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return std::min(one.value(), other.value());
            }


            /**
             * @brief math Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vmax(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return std::max(one.value(), other.value());
            }


            /**
             * @brief math Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vclamp(composed_t self, composed_t from, composed_t to)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return vmin(to, vmax(from, self));
            }


            /**
             * @brief math Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vsqrt(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return std::sqrt(one.value());
            }

        };

        /**
         * @brief math public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::math<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name numeric operations
     */
    ///@{

    /**
     * @brief numeric
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_numeric
    {

        /**
         * @brief numeric basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);
        };

        /**
         * @brief numeric public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::numeric<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic operations
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief arithmetic Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vneg(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (-one.value());
            }


            /**
             * @brief arithmetic Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vadd(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() + other.value());
            }


            /**
             * @brief arithmetic Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vsub(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() - other.value());
            }


            /**
             * @brief arithmetic Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vmul(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() * other.value());
            }


            /**
             * @brief arithmetic Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vdiv(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() / other.value());
            }


            /**
             * @brief arithmetic Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vmod(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() % other.value());
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::arithmetic<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vbneg(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (~one.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vband(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() & other.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vbor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() | other.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vbxor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() ^ other.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bool is_set(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return one.value() != 0;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise_shift operations
     */
    ///@{

    /**
     * @brief bitwise_shift
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_bitwise_shift
    {

        /**
         * @brief bitwise_shift basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief bitwise_shift Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vbsll(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() << other.value());
            }


            /**
             * @brief bitwise_shift Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vbsrl(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() >> other.value());
            }


            /**
             * @brief bitwise_shift Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vbslli(const composed_t one, const size_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() << other);
            }


            /**
             * @brief bitwise_shift Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vbsrli(const composed_t one, const size_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() >> other);
            }

        };

        /**
         * @brief bitwise_shift public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::bitwise_shift<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparable operations
     */
    ///@{

    /**
     * @brief comparable
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_comparable
    {

        /**
         * @brief comparable basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief comparable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vgt(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() > other.value());
            }


            /**
             * @brief comparable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vlt(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() < other.value());
            }


            /**
             * @brief comparable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vge(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() >= other.value());
            }


            /**
             * @brief comparable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vle(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() <= other.value());
            }

        };

        /**
         * @brief comparable public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::comparable<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief logical Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vlneg(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (!one.value());
            }


            /**
             * @brief logical Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vlor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() || other.value());
            }


            /**
             * @brief logical Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vland(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() && other.value());
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable operations
     */
    ///@{

    /**
     * @brief equatable
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief equatable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> veq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() == other.value());
            }


            /**
             * @brief equatable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vneq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() != other.value());
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional operations
     */
    ///@{

    /**
     * @brief conditional
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct zint32_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief conditional Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend zint32<base_t::features> vsel(bval_t condition, composed_t if_value, composed_t else_value)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (condition.value() ? if_value : else_value);
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::conditional<__impl<base_t>, zint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct bint32_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief io Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            template<typename OutputIt> friend void vstore(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                result[0] = input.value();
            }


            /**
             * @brief io Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            template<typename OutputIt> friend void vstream(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                result[0] = input.value();
            }


            /**
             * @brief io Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            template<typename RandomIt> friend bint32<base_t::features> vgather(RandomIt input, const zint32<base_t::features> &index, composed_t)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return input[index.value()];
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::io<__impl<base_t>, bint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct bint32_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vbneg(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (~one.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vband(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() & other.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vbor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() | other.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vbxor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() ^ other.value());
            }


            /**
             * @brief bitwise Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bool is_set(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return one.value() != 0;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, bint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct bint32_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief logical Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vlneg(composed_t one)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (!one.value());
            }


            /**
             * @brief logical Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vlor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() || other.value());
            }


            /**
             * @brief logical Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vland(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() && other.value());
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, bint32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable operations
     */
    ///@{

    /**
     * @brief equatable
     * @relates int32
     * @remark scalar
     */
    template<typename composed_t>
    struct bint32_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates int32
         * @remark scalar
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zint32<base_t::features>;
            using bval_t        = bint32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;
            //FORWARD(__impl);

            FORWARD(__impl);

            /**
             * @brief equatable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> veq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() == other.value());
            }


            /**
             * @brief equatable Tokens.DEFAULT branch
             * @relates int32
             * @remark scalar - Tokens.DEFAULT
             */
            friend bint32<base_t::features> vneq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("scalar.int32.impl", __LINE__, "int32(int32_t[1])", "Tokens.DEFAULT", "");

                return (one.value() != other.value());
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates int32
         * @remark scalar
         */

        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, bint32<base_t::features>>;

    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name int32 composition
     */
    ///@{

    //namespace composition {

        /**
         * @brief zval parametrization using
         * - 'int32_t' as underlying vector type
         * - 'int32_t' as scalar type
         * - '1' as vector size
         * - '16' as alignment
         * @relates int32
         * @remark scalar
         */
        template<uint64_t features>
        struct __zval_int32
        {
            using zval_base_t = zval<int32_t, bool, int32_t, zval_tag, 1, 16, features>;
            using bval_base_t = bval<int32_t, bool, 1, 16, features>;

            struct impl : public zval_base_t
            {
                using zval_t = zint32<features>;
                using bval_t = bint32<features>;

                FORWARD2(impl, zval_base_t);
            };
        };
        /**
         * @brief zval composition
         * @relates int32
         * @remark scalar
         */
        template<uint64_t features>
        struct __zint32
        {
            struct impl;

            using zval_t = typename __zval_int32<features>::impl;
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                zint32_io<impl>::template impl,
                zint32_math<impl>::template impl,
                zint32_numeric<impl>::template impl,
                zint32_arithmetic<impl>::template impl,
                zint32_bitwise<impl>::template impl,
                zint32_bitwise_shift<impl>::template impl,
                zint32_comparable<impl>::template impl,
                zint32_logical<impl>::template impl,
                zint32_equatable<impl>::template impl,
                zint32_conditional<impl>::template impl,
                zint32_construction<impl>::template impl,

                composable<zval_t>::template type
            >;

            struct impl : public composition_t
            {
                using zval_t = zint32<features>;
                using bval_t = bint32<features>;

                FORWARD2(impl, composition_t);
            };
        };

        /**
         * @brief bval parametrization using
         * - 'int32_t' as underlying vector type
         * - 'int32_t' as scalar type
         * - '1' as vector size
         * - '16' as alignment
         * @relates int32
         * @remark scalar
         */
        template<uint64_t features>
        struct __bval_int32
        {
            using zval_base_t = zval<int32_t, bool, int32_t, zval_tag, 1, 16, features>;
            using bval_base_t = bval<int32_t, bool, 1, 16, features>;

            struct impl : public bval_base_t
            {
                using zval_t = zint32<features>;
                using bval_t = bint32<features>;

                FORWARD2(impl, bval_base_t);
            };
        };

        template<uint64_t features>
        struct __bint32
        {
            struct impl;

            using bval_t = typename __bval_int32<features>::impl;
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                bint32_io<impl>::template impl,
                bint32_bitwise<impl>::template impl,
                bint32_logical<impl>::template impl,
                bint32_equatable<impl>::template impl,
                bint32_construction<impl>::template impl,

                composable<bval_t>::template type
            >;

            struct impl : public composition_t
            {
                using zval_t = zint32<features>;
                using bval_t = bint32<features>;

                FORWARD2(impl, composition_t);
            };
        };
    //}

    template<uint64_t features>
    struct zint32 : public __zint32<features>::impl
    {
        using zval_t = zint32<features>;
        using bval_t = bint32<features>;

        FORWARD2(zint32, __zint32<features>::impl);
    };

    template<uint64_t features>
    struct bint32 : public __bint32<features>::impl
    {
        using zval_t = zint32<features>;
        using bval_t = bint32<features>;

        FORWARD2(bint32, __bint32<features>::impl);
    };

    static_assert(is_zval<zint32<0>>::value, "is_zval for zint32 failed.");
    static_assert(is_bval<bint32<0>>::value, "is_bval for bint32 failed.");

    static_assert(!is_floating_point<zint32<0>>::value, "is_floating_point for zint32 failed.");
    static_assert(is_integral<zint32<0>>::value, "is_integral for zint32 failed.");

    static_assert(!is_float<zint32<0>>::value, "is_float for zint32 failed.");
    static_assert(!is_double<zint32<0>>::value, "is_double for zint32 failed.");

    ///@}
}}}