//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file int32.impl.hpp
 * @brief
 * This file provides defines required components and logic for int32 sse target.
 * Provides unified access to 4 'int32_t' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/constructable.hpp"
#include "traits/convertable.hpp"
#include "traits/printable.hpp"
#include "traits/conditional.hpp"
#include "traits/io.hpp"
#include "traits/numeric.hpp"
#include "traits/comparable.hpp"
#include "traits/math.hpp"
#include "traits/bitwise.hpp"
#include "traits/equatable.hpp"
#include "traits/bitwise_shift.hpp"
#include "traits/arithmetic.hpp"
#include "traits/logical.hpp"

namespace zacc { namespace backend { namespace sse
{
    /// @cond
    template<uint64_t features>
    struct bint32;

    template<uint64_t features>
    struct zint32;
    /// @endcond

    namespace int32_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 4;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = __m128i;

        /// scalar type, like int for sse 4x integer vector
        using element_t = int32_t;

        /// mask type for boolean operations
        using mask_vector_t = __m128i;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;


        template<uint64_t Features>
        using zval_base = zval<__m128i, __m128i, int32_t, zval_tag, 4, 16, Features>;

        template<uint64_t Features>
        using bval_base = bval<__m128i, __m128i, int32_t, 4, 16, Features>;

        template<typename T>
        using zval_is_base_of = std::is_base_of<zval_base<T::features>, T>;

        template<typename T>
        using bval_is_base_of = std::is_base_of<bval_base<T::features>, T>;
    }

}}}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::sse::int32_detail::zval_base<T::features>, T>::value
            || std::is_base_of<backend::sse::int32_detail::bval_base<T::features>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 4;

        /// capabilities
        static constexpr uint64_t features = T::features;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = __m128i;

        /// scalar type, like int for sse 4x integer vector
        using element_t = int32_t;

        /// mask type for boolean operations
        using mask_vector_t = __m128i;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;

        using zval_t = backend::sse::zint32<T::features>;
        using bval_t = backend::sse::bint32<T::features>;

        using tag = select_t<
                when<std::is_base_of<backend::sse::int32_detail::zval_base<T::features>, T>::value, zval_tag>,
                when<std::is_base_of<backend::sse::int32_detail::bval_base<T::features>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace sse {

    namespace int32_detail {


        // =================================================================================================================
        /**
         * @name constructable modules
         */
        ///@{
        /**
         * @brief constructable
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_constructable
        {

            /**
             * @brief constructable basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {

                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(  ) : Base()  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS()");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(__m128 value) : Base(_mm_cvttps_epi32(value))  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(__m128)");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(__m128d value) : Base(_mm_cvttpd_epi32(value))  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(__m128d)");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(__m128i value) : Base(value)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(__m128i)");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(int32_t value) : Base(_mm_set1_epi32(value))  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(int32_t)");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(extracted_t value) : Base(_mm_load_si128((__m128i*)value.data()))  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(extracted_t)");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(int32_t _3, int32_t _2, int32_t _1, int32_t _0) : Base(_mm_set_epi32(_0, _1, _2, _3))  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(int32_t, int32_t, int32_t, int32_t)");

                }

            };

            /**
             * @brief constructable public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::constructable<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name constructable modules
         */
        ///@{
        /**
         * @brief constructable
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct bint32_constructable
        {

            /**
             * @brief constructable basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {

                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(  ) : Base()  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS()");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(zint32<Base::features> value) : Base(value)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(zval_t)");

                }


                /**
                 * @brief constructable 
                 * @relates int32
                 * @remark sse 
                 */
                constexpr __impl(bint32<Base::features> value, last_operation last_op) : Base(value, last_op)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "", "CONS(bval_t, last_operation)");

                }

            };

            /**
             * @brief constructable public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::constructable<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_io
        {

            /**
             * @brief io basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief io default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vstore");

                    _mm_store_si128((__m128i*)&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vstream");

                    _mm_stream_si128((__m128i*)&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename RandomIt> friend zint32<Base::features> vgather(RandomIt input, const zint32<Base::features> &index, Composed)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vgather");

                    auto i = index.data();
                    return _mm_set_epi32(input[i[3]], input[i[2]], input[i[1]], input[i[0]]);
                }

            };

            /**
             * @brief io public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::io<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name math modules
         */
        ///@{
        /**
         * @brief math
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_math
        {

            /**
             * @brief math basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief math sse3
                 * @relates int32
                 * @remark sse sse3
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<has_feature_v<Base, capabilities::SSE3>, T> vabs(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "sse3", "vabs");

                    return _mm_abs_epi32(one);
                }


                /**
                 * @brief math default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<!has_feature_v<Base, capabilities::SSE3>, T> vabs(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vabs");

                    return vmax(one, -one);
                }


                /**
                 * @brief math sse4
                 * @relates int32
                 * @remark sse sse4
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<has_feature_v<Base, capabilities::SSE41>, T> vmin(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "sse4", "vmin");

                    return _mm_min_epi32(one, other);
                }


                /**
                 * @brief math default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<!has_feature_v<Base, capabilities::SSE41>, T> vmin(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vmin");

                    return vsel(one < other, one, other);
                }


                /**
                 * @brief math sse4
                 * @relates int32
                 * @remark sse sse4
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<has_feature_v<Base, capabilities::SSE41>, T> vmax(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "sse4", "vmax");

                    return _mm_max_epi32(one, other);
                }


                /**
                 * @brief math default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<!has_feature_v<Base, capabilities::SSE41>, T> vmax(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vmax");

                    return vsel(one > other, one, other);
                }


                /**
                 * @brief math default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vclamp(Composed self, Composed from, Composed to)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vclamp");

                    return vmin(to, vmax(from, self));
                }


                /**
                 * @brief math default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vsqrt(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vsqrt");

                    return _mm_sqrt_ps(_mm_cvtepi32_ps(one));
                }

            };

            /**
             * @brief math public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::math<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name numeric modules
         */
        ///@{
        /**
         * @brief numeric
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_numeric
        {

            /**
             * @brief numeric basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);
            };

            /**
             * @brief numeric public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::numeric<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name arithmetic modules
         */
        ///@{
        /**
         * @brief arithmetic
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_arithmetic
        {

            /**
             * @brief arithmetic basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief arithmetic default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vneg(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vneg");

                    return _mm_sub_epi32(_mm_setzero_si128(), one);
                }


                /**
                 * @brief arithmetic default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vadd(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vadd");

                    return _mm_add_epi32(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vsub(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vsub");

                    return _mm_sub_epi32(one, other);
                }


                /**
                 * @brief arithmetic sse4
                 * @relates int32
                 * @remark sse sse4
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<has_feature_v<Base, capabilities::SSE41>, T> vmul(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "sse4", "vmul");

                    return _mm_mullo_epi32(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<!has_feature_v<Base, capabilities::SSE41>, T> vmul(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vmul");

                    __m128i tmp1 = _mm_mul_epu32(one,other); /* mul 2,0*/;
                    __m128i tmp2 = _mm_mul_epu32( _mm_srli_si128(one,4), _mm_srli_si128(other,4)); /* mul 3,1 */;
                    return _mm_unpacklo_epi32(_mm_shuffle_epi32(tmp1, _MM_SHUFFLE (0,0,2,0)), _mm_shuffle_epi32(tmp2, _MM_SHUFFLE (0,0,2,0)));
                }


                /**
                 * @brief arithmetic default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vdiv(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vdiv");

                    return _mm_div_ps(_mm_cvtepi32_ps(one), _mm_cvtepi32_ps(other));
                }


                /**
                 * @brief arithmetic default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vmod(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vmod");

                    return vsub(one, vmul(other, vdiv(one, other)));
                }

            };

            /**
             * @brief arithmetic public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::arithmetic<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_bitwise
        {

            /**
             * @brief bitwise basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vbneg(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbneg");

                    auto zero = _mm_setzero_si128();
                    auto ones = _mm_cmpeq_epi32(zero, zero);
                    return _mm_xor_si128(one, ones);
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vbor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbor");

                    return _mm_or_si128(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vband(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vband");

                    return _mm_and_si128(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vbxor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbxor");

                    return _mm_xor_si128(one, other);
                }


                /**
                 * @brief bitwise sse4
                 * @relates int32
                 * @remark sse sse4
                 */
                template<typename T = bool> friend std::enable_if_t<has_feature_v<Base, capabilities::SSE41>, T> is_set(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "sse4", "is_set");

                    return _mm_test_all_ones(one) != 0;
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename T = bool> friend std::enable_if_t<!has_feature_v<Base, capabilities::SSE41>, T> is_set(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "is_set");

                    auto zero = _mm_setzero_si128();
                    auto ones = _mm_cmpeq_epi32(zero, zero);
                    return _mm_movemask_epi8(_mm_cmpeq_epi32(one, ones)) == 0xFFFF;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::bitwise<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name bitwise_shift modules
         */
        ///@{
        /**
         * @brief bitwise_shift
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_bitwise_shift
        {

            /**
             * @brief bitwise_shift basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief bitwise_shift default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vbsll(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbsll");

                    return _mm_sll_epi32(one, other);
                }


                /**
                 * @brief bitwise_shift default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vbsrl(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbsrl");

                    return _mm_srl_epi32(one, other);
                }


                /**
                 * @brief bitwise_shift default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vbslli(const Composed one, const size_t other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbslli");

                    return _mm_slli_epi32(one, other);
                }


                /**
                 * @brief bitwise_shift default
                 * @relates int32
                 * @remark sse default
                 */
                friend zint32<Base::features> vbsrli(const Composed one, const size_t other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbsrli");

                    return _mm_srli_epi32(one, other);
                }

            };

            /**
             * @brief bitwise_shift public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::bitwise_shift<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name comparable modules
         */
        ///@{
        /**
         * @brief comparable
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_comparable
        {

            /**
             * @brief comparable basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief comparable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vgt(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vgt");

                    return _mm_cmpgt_epi32(one, other);
                }


                /**
                 * @brief comparable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vlt(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vlt");

                    return _mm_cmplt_epi32(one, other);
                }


                /**
                 * @brief comparable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vge(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vge");

                    return !(one < other);
                }


                /**
                 * @brief comparable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vle(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vle");

                    return !(one > other);
                }

            };

            /**
             * @brief comparable public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::comparable<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_logical
        {

            /**
             * @brief logical basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief logical default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vlneg(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vlneg");

                    return _mm_cmpeq_epi32(one, _mm_setzero_si128());
                }


                /**
                 * @brief logical default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vlor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vlor");

                    return _mm_or_si128(one, other);
                }


                /**
                 * @brief logical default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vland(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vland");

                    return _mm_and_si128(one, other);
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::logical<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_equatable
        {

            /**
             * @brief equatable basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief equatable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> veq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "veq");

                    return _mm_cmpeq_epi32(one, other);
                }


                /**
                 * @brief equatable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vneq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vneq");

                    return !(one == other);
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::equatable<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name conditional modules
         */
        ///@{
        /**
         * @brief conditional
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct zint32_conditional
        {

            /**
             * @brief conditional basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief conditional sse4
                 * @relates int32
                 * @remark sse sse4
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<has_feature_v<Base, capabilities::SSE41>, T> vsel(bint32<Base::features> condition, Composed if_value, Composed else_value)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "sse4", "vsel");

                    return _mm_blendv_epi8(else_value, if_value, condition);
                }


                /**
                 * @brief conditional default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename T = zint32<Base::features>> friend std::enable_if_t<!has_feature_v<Base, capabilities::SSE41>, T> vsel(bint32<Base::features> condition, Composed if_value, Composed else_value)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vsel");

                    return _mm_or_si128(_mm_andnot_si128(condition, else_value), _mm_and_si128(condition, if_value));
                }

            };

            /**
             * @brief conditional public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::conditional<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct bint32_io
        {

            /**
             * @brief io basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief io default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vstore");

                    _mm_store_si128((__m128i*)&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vstream");

                    _mm_stream_si128((__m128i*)&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename RandomIt> friend bint32<Base::features> vgather(RandomIt input, const zint32<Base::features> &index, Composed)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vgather");

                    auto i = index.data();
                    return _mm_set_epi32(input[i[3]], input[i[2]], input[i[1]], input[i[0]]);
                }

            };

            /**
             * @brief io public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::io<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct bint32_bitwise
        {

            /**
             * @brief bitwise basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vbneg(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbneg");

                    auto zero = _mm_setzero_si128();
                    auto ones = _mm_cmpeq_epi32(zero, zero);
                    return _mm_xor_si128(one, ones);
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vbor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbor");

                    return _mm_or_si128(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vband(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vband");

                    return _mm_and_si128(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vbxor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vbxor");

                    return _mm_xor_si128(one, other);
                }


                /**
                 * @brief bitwise sse4
                 * @relates int32
                 * @remark sse sse4
                 */
                template<typename T = bool> friend std::enable_if_t<has_feature_v<Base, capabilities::SSE41>, T> is_set(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "sse4", "is_set");

                    return _mm_test_all_ones(one) != 0;
                }


                /**
                 * @brief bitwise default
                 * @relates int32
                 * @remark sse default
                 */
                template<typename T = bool> friend std::enable_if_t<!has_feature_v<Base, capabilities::SSE41>, T> is_set(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "is_set");

                    auto zero = _mm_setzero_si128();
                    auto ones = _mm_cmpeq_epi32(zero, zero);
                    return _mm_movemask_epi8(_mm_cmpeq_epi32(one, ones)) == 0xFFFF;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::bitwise<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct bint32_logical
        {

            /**
             * @brief logical basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief logical default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vlneg(Composed one)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vlneg");

                    return _mm_cmpeq_epi32(one, _mm_setzero_si128());
                }


                /**
                 * @brief logical default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vlor(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vlor");

                    return _mm_or_si128(one, other);
                }


                /**
                 * @brief logical default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vland(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vland");

                    return _mm_and_si128(one, other);
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::logical<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates int32
         * @remark sse
         */
        template<typename Composed>
        struct bint32_equatable
        {

            /**
             * @brief equatable basic interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            struct __impl : Base
            {
                /// forward to base
                FORWARD(__impl);

                /**
                 * @brief equatable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> veq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "veq");

                    return _mm_cmpeq_epi32(one, other);
                }


                /**
                 * @brief equatable default
                 * @relates int32
                 * @remark sse default
                 */
                friend bint32<Base::features> vneq(Composed one, Composed other)  {

                    ZTRACE_BACKEND("sse.int32.impl", __LINE__, "int32(int32_t[4])", "default", "vneq");

                    return !(one == other);
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates int32
             * @remark sse
             */
            template<typename Base>
            using impl = traits::equatable<__impl<Base>, Composed, bint32<Base::features>>;

        };

        ///@}


        // Type composition ================================================================================================

        /**
         * @name int32 composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates int32
         * @remark sse
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __zint32
        {
            /// @cond
            struct impl;
            /// @endcond

            /**
            * @brief zval parametrization using
            * - '__m128i' as underlying vector type
            * - 'int32_t' as scalar type
            * - '4' as vector size
            * - '16' as alignment
            * @relates int32
            * @remark sse
            */
            using base = zval<__m128i, __m128i, int32_t, zval_tag, 4, 16, features>;

            /// parametrized zval base
            struct composable_base : base
            {
                /// forward to base
                FORWARD2(composable_base, base);
            };

            /// compose type from modules
            using composed = compose
            <
                printable<zint32<features>>::template impl,
                convertable<zint32<features>>::template impl,
                zint32_io<zint32<features>>::template impl,
                zint32_math<zint32<features>>::template impl,
                zint32_numeric<zint32<features>>::template impl,
                zint32_arithmetic<zint32<features>>::template impl,
                zint32_bitwise<zint32<features>>::template impl,
                zint32_bitwise_shift<zint32<features>>::template impl,
                zint32_comparable<zint32<features>>::template impl,
                zint32_logical<zint32<features>>::template impl,
                zint32_equatable<zint32<features>>::template impl,
                zint32_conditional<zint32<features>>::template impl,
                zint32_constructable<zint32<features>>::template impl,

                composable<composable_base>::template type
            >;

            /// implementation
            struct impl : public composed
            {
                /// complete vector
                using zval_t = zint32<features>;
                /// complete boolean vector
                using bval_t = bint32<features>;

                using tag = zval_tag;

                using element_t = int32_t;

                /// vector size (1 - scalar, 4, 8, 16, ...)
                static constexpr size_t size() { return int32_detail::size; }

                /// scalar type? vector type?
                static constexpr bool is_vector = int32_detail::is_vector;

                /// memory alignment
                static constexpr size_t alignment = int32_detail::alignment;

                /// forward to base
                FORWARD2(impl, composed);
            };
        };

        /// bint32 composition
        /// @tparam features feature mask
        template<uint64_t features>
        struct __bint32
        {
            /// @cond
            struct impl;
            /// @endcond

            /**
            * @brief bval parametrization using
            * - '__m128i' as underlying vector type
            * - 'int32_t' as scalar type
            * - '4' as vector size
            * - '16' as alignment
            * @relates int32
            * @remark sse
            */
            using base = bval<__m128i, __m128i, int32_t, 4, 16, features>;

            /// parametrized zval base
            struct composable_base : base
            {
                /// forward to base
                FORWARD2(composable_base, base);
            };

            /// compose type from modules
            using composed = compose
            <
                printable<bint32<features>>::template impl,
                convertable<bint32<features>>::template impl,
                bint32_io<bint32<features>>::template impl,
                bint32_bitwise<bint32<features>>::template impl,
                bint32_logical<bint32<features>>::template impl,
                bint32_equatable<bint32<features>>::template impl,
                bint32_constructable<bint32<features>>::template impl,

                composable<composable_base>::template type
            >;

            /// implementation
            struct impl : public composed
            {
                /// complete vector
                using zval_t = zint32<features>;
                /// complete boolean vector
                using bval_t = bint32<features>;

                using tag = bval_tag;

                using element_t = bool;

                /// vector size (1 - scalar, 4, 8, 16, ...)
                static constexpr size_t size() { return int32_detail::size; }

                /// scalar type? vector type?
                static constexpr bool is_vector = int32_detail::is_vector;

                /// memory alignment
                static constexpr size_t alignment = int32_detail::alignment;

                /// forward to base
                FORWARD2(impl, composed);
            };
        };

    } // end namespace

    /// public zint32 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct zint32 : public int32_detail::__zint32<features>::impl
    {
            /// complete vector
            using zval_t = zint32<features>;
            /// complete boolean vector
            using bval_t = bint32<features>;

            using tag = zval_tag;

            using element_t = int32_t;

            /// vector size (1 - scalar, 4, 8, 16, ...)
            static constexpr size_t size() { return int32_detail::size; }

            /// scalar type? vector type?
            static constexpr bool is_vector = int32_detail::is_vector;

            /// memory alignment
            static constexpr size_t alignment = int32_detail::alignment;


            /// forward to base
            FORWARD2(zint32, int32_detail::__zint32<features>::impl);
    };

    /// public bint32 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct bint32 : public int32_detail::__bint32<features>::impl
    {
        /// complete vector
        using zval_t = zint32<features>;
        /// complete boolean vector
        using bval_t = bint32<features>;

        using tag = bval_tag;

        using element_t = bool;

        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size() { return int32_detail::size; }

        /// scalar type? vector type?
        static constexpr bool is_vector = int32_detail::is_vector;

        /// memory alignment
        static constexpr size_t alignment = int32_detail::alignment;

        /// forward to base
        FORWARD2(bint32, int32_detail::__bint32<features>::impl);
    };

    static_assert(is_zval<zint32<0>>::value, "is_zval for zint32 failed.");
    static_assert(is_bval<bint32<0>>::value, "is_bval for bint32 failed.");

    static_assert(!is_floating_point<zint32<0>>::value, "is_floating_point for zint32 failed.");
    static_assert(is_integral<zint32<0>>::value, "is_integral for zint32 failed.");

    static_assert(!is_float<zint32<0>>::value, "is_float for zint32 failed.");
    static_assert(!is_double<zint32<0>>::value, "is_double for zint32 failed.");

    ///@}
}}}