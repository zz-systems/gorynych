//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include "intrin.hpp"
#include <type_traits>
#include <cmath>

#include "util/type_composition.hpp"
#include "util/memory.hpp"
#include "zval.hpp"
#include "common.hpp"
#include "type_traits.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/io.hpp"
#include "traits/numeric.hpp"
#include "traits/math.hpp"
#include "traits/arithmetic.hpp"
#include "traits/bitwise.hpp"
#include "traits/bitwise_shift.hpp"
#include "traits/logical.hpp"
#include "traits/comparison.hpp"
#include "traits/conditional.hpp"

/**
 * @brief int16 implementation for the sse branch
 * provides unified access to 8 'int16_t' values
 */

namespace zacc { namespace backend { namespace sse {

    template<uint64_t capability>
    struct bint16;

    template<uint64_t capability>
    struct zint16;


    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;



            /**
             * @brief construction default branch
             * @relates int16
             * @remark sse - default
             */
            __impl() : base_t() {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "CONS()");

            }


            /**
             * @brief construction default branch
             * @relates int16
             * @remark sse - default
             */
            __impl(__m128i value) : base_t(value) {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "CONS(__m128i value)");

            }


            /**
             * @brief construction default branch
             * @relates int16
             * @remark sse - default
             */
            __impl(short value) : base_t(_mm_set1_epi16(value)) {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "CONS(short value)");

            }


            /**
             * @brief construction default branch
             * @relates int16
             * @remark sse - default
             */
            __impl(std::array<typename base_t::scalar_t, base_t::dim> value) : base_t(_mm_load_si128((__m128i *) value.data())) {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "CONS(std::array<typename base_t::scal..)");

            }


            /**
             * @brief construction default branch
             * @relates int16
             * @remark sse - default
             */
            __impl(int16_t arg7, int16_t arg6, int16_t arg5, int16_t arg4, int16_t arg3, int16_t arg2, int16_t arg1, int16_t arg0) : base_t(_mm_set_epi16(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)) {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "CONS(int16_t arg7, int16_t arg6, int1..)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::construction<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::construction<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief io default branch
             * @relates int16
             * @remark sse - default
             */
            friend void vstore(typename base_t::extracted_t &target, composed_t source)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vstore");

                _mm_store_si128((__m128i*)target.data(), source);
            }


            /**
             * @brief io default branch
             * @relates int16
             * @remark sse - default
             */
            friend void vstream(typename base_t::extracted_t &target, composed_t source)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vstream");

                _mm_stream_si128((__m128i*)target.data(), source);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::io<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::io<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name numeric operations
     */
    ///@{

    /**
     * @brief numeric
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_numeric
    {

        /**
         * @brief numeric basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);

        };

        /**
         * @brief numeric public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::numeric<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::numeric<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name math operations
     */
    ///@{

    /**
     * @brief math
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_math
    {

        /**
         * @brief math basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief math sse4 branch
             * @relates int16
             * @remark sse - sse4
             */
            template<typename T = zint16<base_t::capability>> friend std::enable_if_t<base_t::dispatcher::is_set(capabilities::SSE3), T> vabs(composed_t one)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "sse4", "vabs");

                return _mm_abs_epi16(one);
            }


            /**
             * @brief math default branch
             * @relates int16
             * @remark sse - default
             */
            template<typename T = zint16<base_t::capability>> friend std::enable_if_t<!base_t::dispatcher::is_set(capabilities::SSE3), T> vabs(composed_t one)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vabs");

                return vmax(one, -one);
            }


            /**
             * @brief math sse4 branch
             * @relates int16
             * @remark sse - sse4
             */
            template<typename T = zint16<base_t::capability>> friend std::enable_if_t<base_t::dispatcher::is_set(capabilities::SSE41), T> vmin(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "sse4", "vmin");

                return _mm_min_epi16(one, other);
            }


            /**
             * @brief math default branch
             * @relates int16
             * @remark sse - default
             */
            template<typename T = zint16<base_t::capability>> friend std::enable_if_t<!base_t::dispatcher::is_set(capabilities::SSE41), T> vmin(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vmin");

                return vsel(one < other, one, other);
            }


            /**
             * @brief math sse4 branch
             * @relates int16
             * @remark sse - sse4
             */
            template<typename T = zint16<base_t::capability>> friend std::enable_if_t<base_t::dispatcher::is_set(capabilities::SSE41), T> vmax(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "sse4", "vmax");

                return _mm_max_epi16(one, other);
            }


            /**
             * @brief math default branch
             * @relates int16
             * @remark sse - default
             */
            template<typename T = zint16<base_t::capability>> friend std::enable_if_t<!base_t::dispatcher::is_set(capabilities::SSE41), T> vmax(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vmax");

                return vsel(one < other, one, other);
            }


            /**
             * @brief math default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vclamp(composed_t self, composed_t from, composed_t to)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vclamp");

                return vmin(to, vmax(from, self));
            }

        };

        /**
         * @brief math public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::math<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::math<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic operations
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vneg(composed_t one)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vneg");

                return _mm_sub_epi16(_mm_setzero_si128(), one);
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vadd(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vadd");

                return _mm_add_epi16(one, other);
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vsub(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vsub");

                return _mm_sub_epi16(one, other);
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vmul(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vmul");

                return _mm_mullo_epi16(one, other);
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vdiv(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vdiv");

                auto dividend = one.data();
                auto divisor = other.data();
                typename composed_t::extracted_t result;
                for (auto i = 0; i < composed_t::dim; i++) { result[i] = dividend[i] / divisor[i]; };
                return result;
            }


            /**
             * @brief arithmetic default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vmod(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vmod");

                return vsub(one, vmul(other, vdiv(one, other)));
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::arithmetic<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::arithmetic<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vbneg(composed_t one)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vbneg");

                auto zero = _mm_setzero_si128();
                auto ones = _mm_cmpeq_epi16(zero, zero);
                return _mm_xor_si128(one, ones);
            }


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vbor(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vbor");

                return _mm_or_si128(one, other);
            }


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vband(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vband");

                return _mm_and_si128(one, other);
            }


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vbxor(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vbxor");

                return _mm_xor_si128(one, other);
            }


            /**
             * @brief bitwise sse4 branch
             * @relates int16
             * @remark sse - sse4
             */
            template<typename T = bool> friend std::enable_if_t<base_t::dispatcher::is_set(capabilities::SSE41), T> is_set(composed_t one)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "sse4", "is_set");

                return _mm_test_all_ones(one) != 0;
            }


            /**
             * @brief bitwise default branch
             * @relates int16
             * @remark sse - default
             */
            template<typename T = bool> friend std::enable_if_t<!base_t::dispatcher::is_set(capabilities::SSE41), T> is_set(composed_t one)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "is_set");

                auto zero = _mm_setzero_si128();
                auto ones = _mm_cmpeq_epi32(zero, zero);
                return _mm_movemask_epi8(_mm_cmpeq_epi16(one, ones)) == 0xFFFF;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::bitwise<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::bitwise<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise_shift operations
     */
    ///@{

    /**
     * @brief bitwise_shift
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_bitwise_shift
    {

        /**
         * @brief bitwise_shift basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vbsll(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vbsll");

                return _mm_sll_epi16(one, other);
            }


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vbsrl(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vbsrl");

                return _mm_srl_epi16(one, other);
            }


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vbslli(const composed_t one, const size_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vbslli");

                return _mm_slli_epi16(one, other);
            }


            /**
             * @brief bitwise_shift default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vbsrli(const composed_t one, const size_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vbsrli");

                return _mm_srli_epi16(one, other);
            }

        };

        /**
         * @brief bitwise_shift public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::bitwise_shift<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::bitwise_shift<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief logical default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vlneg(composed_t one)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vlneg");

                return _mm_cmpeq_epi16(one, _mm_setzero_si128());
            }


            /**
             * @brief logical default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vlor(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vlor");

                return _mm_or_si128(one, other);
            }


            /**
             * @brief logical default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vland(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vland");

                return _mm_and_si128(one, other);
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::logical<__impl<base_t>, bint16<base_t::capability>>;

        using impl = traits::logical<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparison operations
     */
    ///@{

    /**
     * @brief comparison
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_comparison
    {

        /**
         * @brief comparison basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> veq(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "veq");

                return _mm_cmpeq_epi16(one, other);
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vneq(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vneq");

                return !(one == other);
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vgt(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vgt");

                return _mm_cmpgt_epi16(one, other);
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vlt(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vlt");

                return _mm_cmplt_epi16(one, other);
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vge(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vge");

                return !(one < other);
            }


            /**
             * @brief comparison default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vle(composed_t one, composed_t other)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vle");

                return !(one > other);
            }

        };

        /**
         * @brief comparison public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::comparison<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::comparison<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional operations
     */
    ///@{

    /**
     * @brief conditional
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct int16_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using mask_t = typename base_t::mask_t;

            FORWARD(__impl);


            /**
             * @brief conditional default branch
             * @relates int16
             * @remark sse - default
             */
            friend zint16<base_t::capability> vsel(composed_t condition, composed_t if_value, composed_t else_value)  noexcept {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "zint16(int16_t[8])", "default", "vsel");

                return _mm_or_si128(_mm_andnot_si128(condition, else_value), _mm_and_si128(condition, if_value));
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates int16
         * @remark sse
         */


        template<typename base_t>
        //using impl = traits::conditional<__impl<base_t>, zint16<base_t::capability>>;

        using impl = traits::conditional<__impl<base_t>, zint16<base_t::capability>>;

    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name int16 composition
     */
    ///@{

    //namespace composition {

        /**
         * @brief zval parametrization using
         * - '__m128i' as underlying vector type
         * - 'int16_t' as scalar type
         * - '8' as vector size
         * - '16' as alignment
         * @relates int16
         * @remark sse
         */
        template<uint64_t capability>
        struct __zval_int16
        {
            using zval_t = zval<__m128i, __m128i, int16_t, 8, 16, capability>;

            struct impl : public zval_t
            {
                FORWARD2(impl, zval_t);
            };
        };
        /**
         * @brief zval composition
         * @relates int16
         * @remark sse
         */
        template<uint64_t capability>
        struct __zint16
        {
            struct impl;

            using zval_t = typename __zval_int16<capability>::impl;
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                int16_io<impl>::template impl,
                int16_math<impl>::template impl,
                int16_numeric<impl>::template impl,
                int16_arithmetic<impl>::template impl,
                int16_bitwise<impl>::template impl,
                int16_bitwise_shift<impl>::template impl,
                int16_logical<impl>::template impl,
                int16_comparison<impl>::template impl,
                int16_conditional<impl>::template impl,
                int16_construction<impl>::template impl,

                composable<zval_t>::template type
            >;

            struct impl : public composition_t
            {
                FORWARD2(impl, composition_t);
            };
        };

        template<uint64_t capability>
        struct __bint16
        {
            using bval_t = bval<typename __zint16<capability>::impl, __m128i>;
            struct impl : public bval_t
            {
                FORWARD2(impl, bval_t);
            };
        };
    //}

    template<uint64_t capability>
    struct zint16 : public /*composition::*/__zint16<capability>::impl
    {
        FORWARD2(zint16, /*composition::*/__zint16<capability>::impl);
    };

    template<uint64_t capability>
    struct bint16 : public /*composition::*/__bint16<capability>::impl
    {
        FORWARD2(bint16, /*composition::*/__bint16<capability>::impl);
    };

    static_assert(is_zval<zint16<0>>::value, "is_zval for zint16 failed.");
    static_assert(is_bval<bint16<0>>::value, "is_bval for bint16 failed.");

    static_assert(!is_floating_point<zint16<0>>::value, "is_floating_point for zint16 failed.");
    static_assert(is_integral<zint16<0>>::value, "is_integral for zint16 failed.");

    static_assert(!is_float<zint16<0>>::value, "is_float for zint16 failed.");
    static_assert(!is_double<zint16<0>>::value, "is_double for zint16 failed.");

    ///@}
}}}