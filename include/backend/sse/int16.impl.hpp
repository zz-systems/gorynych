//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file int16.impl.hpp
 * @brief
 * This file provides defines required components and logic for int16 sse target.
 * Provides unified access to 8 'int16_t' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/conditional.hpp"
#include "traits/math.hpp"
#include "traits/numeric.hpp"
#include "traits/bitwise.hpp"
#include "traits/logical.hpp"
#include "traits/io.hpp"
#include "traits/bitwise_shift.hpp"
#include "traits/comparable.hpp"
#include "traits/arithmetic.hpp"
#include "traits/equatable.hpp"

namespace zacc { namespace backend { namespace sse {

    /// @cond
    template<uint64_t features>
    struct bint16;

    template<uint64_t features>
    struct zint16;
    /// @endcond


    // =================================================================================================================
    /**
     * @name construction modules
     */
    ///@{

    /**
     * @brief construction
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(  ) : base_t()  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS()");

            }


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(__m128i value) : base_t(value)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS(__m128i)");

            }


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(short value) : base_t(_mm_set1_epi16(value))  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS(short)");

            }


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(const std::array<typename zval_traits<base_t>::element_t, zval_traits<base_t>::size> &value) : base_t(_mm_loadu_si128((__m128i *) value.data()))  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS(const std::array<typename zval_traits<base_t>::element_t, zval_traits<base_t>::size>)");

            }


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(int16_t _7, int16_t _6, int16_t _5, int16_t _4, int16_t _3, int16_t _2, int16_t _1, int16_t _0) : base_t(_mm_set_epi16(_0, _1, _2, _3, _4, _5, _6, _7))  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name construction modules
     */
    ///@{

    /**
     * @brief construction
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct bint16_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(  ) : base_t()  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS()");

            }


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(zval_t value) : base_t(value)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS(zval_t)");

            }


            /**
             * @brief construction 
             * @relates int16
             * @remark sse 
             */
            constexpr __impl(bval_t value, last_operation last_op) : base_t(value, last_op)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "", "CONS(bval_t value, last_operation)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, bint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io modules
     */
    ///@{

    /**
     * @brief io
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief io default
             * @relates int16
             * @remark sse default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vstore");

                _mm_storeu_si128((__m128i*)&(*result), input);
            }


            /**
             * @brief io default
             * @relates int16
             * @remark sse default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vstream");

                _mm_stream_si128((__m128i*)&(*result), input);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::io<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name math modules
     */
    ///@{

    /**
     * @brief math
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_math
    {

        /**
         * @brief math basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief math sse4
             * @relates int16
             * @remark sse sse4
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE3>, T> vabs(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "sse4", "vabs");

                return _mm_abs_epi16(one);
            }


            /**
             * @brief math default
             * @relates int16
             * @remark sse default
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE3>, T> vabs(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vabs");

                return vmax(one, -one);
            }


            /**
             * @brief math sse4
             * @relates int16
             * @remark sse sse4
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> vmin(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "sse4", "vmin");

                return _mm_min_epi16(one, other);
            }


            /**
             * @brief math default
             * @relates int16
             * @remark sse default
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> vmin(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vmin");

                return vsel(one < other, one, other);
            }


            /**
             * @brief math sse4
             * @relates int16
             * @remark sse sse4
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> vmax(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "sse4", "vmax");

                return _mm_max_epi16(one, other);
            }


            /**
             * @brief math default
             * @relates int16
             * @remark sse default
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> vmax(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vmax");

                return vsel(one > other, one, other);
            }


            /**
             * @brief math default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vclamp(composed_t self, composed_t from, composed_t to)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vclamp");

                return vmin(to, vmax(from, self));
            }

        };

        /**
         * @brief math public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::math<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name numeric modules
     */
    ///@{

    /**
     * @brief numeric
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_numeric
    {

        /**
         * @brief numeric basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);
        };

        /**
         * @brief numeric public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::numeric<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic modules
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief arithmetic default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vneg(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vneg");

                return _mm_sub_epi16(_mm_setzero_si128(), one);
            }


            /**
             * @brief arithmetic default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vadd(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vadd");

                return _mm_add_epi16(one, other);
            }


            /**
             * @brief arithmetic default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vsub(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vsub");

                return _mm_sub_epi16(one, other);
            }


            /**
             * @brief arithmetic default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vmul(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vmul");

                return _mm_mullo_epi16(one, other);
            }


            /**
             * @brief arithmetic default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vdiv(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vdiv");

                auto dividend = one.data();
                auto divisor = other.data();
                typename composed_t::extracted_t result;
                for (size_t i = 0; i < composed_t::size(); i++) { result[i] = dividend[i] / divisor[i]; };
                return result;
            }


            /**
             * @brief arithmetic default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vmod(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vmod");

                return vsub(one, vmul(other, vdiv(one, other)));
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::arithmetic<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise modules
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vbneg(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbneg");

                auto zero = _mm_setzero_si128();
                auto ones = _mm_cmpeq_epi16(zero, zero);
                return _mm_xor_si128(one, ones);
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vbor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbor");

                return _mm_or_si128(one, other);
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vband(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vband");

                return _mm_and_si128(one, other);
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vbxor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbxor");

                return _mm_xor_si128(one, other);
            }


            /**
             * @brief bitwise sse4
             * @relates int16
             * @remark sse sse4
             */
            template<typename T = bool> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "sse4", "is_set");

                return _mm_test_all_ones(one) != 0;
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            template<typename T = bool> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "is_set");

                auto zero = _mm_setzero_si128();
                auto ones = _mm_cmpeq_epi32(zero, zero);
                return _mm_movemask_epi8(_mm_cmpeq_epi16(one, ones)) == 0xFFFF;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise_shift modules
     */
    ///@{

    /**
     * @brief bitwise_shift
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_bitwise_shift
    {

        /**
         * @brief bitwise_shift basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief bitwise_shift default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vbsll(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbsll");

                return _mm_sll_epi16(one, other);
            }


            /**
             * @brief bitwise_shift default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vbsrl(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbsrl");

                return _mm_srl_epi16(one, other);
            }


            /**
             * @brief bitwise_shift default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vbslli(const composed_t one, const size_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbslli");

                return _mm_slli_epi16(one, other);
            }


            /**
             * @brief bitwise_shift default
             * @relates int16
             * @remark sse default
             */
            friend zint16<base_t::features> vbsrli(const composed_t one, const size_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbsrli");

                return _mm_srli_epi16(one, other);
            }

        };

        /**
         * @brief bitwise_shift public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::bitwise_shift<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparable modules
     */
    ///@{

    /**
     * @brief comparable
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_comparable
    {

        /**
         * @brief comparable basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief comparable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vgt(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vgt");

                return _mm_cmpgt_epi16(one, other);
            }


            /**
             * @brief comparable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vlt(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vlt");

                return _mm_cmplt_epi16(one, other);
            }


            /**
             * @brief comparable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vge(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vge");

                return !(one < other);
            }


            /**
             * @brief comparable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vle(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vle");

                return !(one > other);
            }

        };

        /**
         * @brief comparable public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::comparable<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical modules
     */
    ///@{

    /**
     * @brief logical
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief logical default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vlneg(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vlneg");

                return _mm_cmpeq_epi16(one, _mm_setzero_si128());
            }


            /**
             * @brief logical default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vlor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vlor");

                return _mm_or_si128(one, other);
            }


            /**
             * @brief logical default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vland(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vland");

                return _mm_and_si128(one, other);
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable modules
     */
    ///@{

    /**
     * @brief equatable
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief equatable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> veq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "veq");

                return _mm_cmpeq_epi16(one, other);
            }


            /**
             * @brief equatable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vneq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vneq");

                return !(one == other);
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional modules
     */
    ///@{

    /**
     * @brief conditional
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct zint16_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief conditional sse4
             * @relates int16
             * @remark sse sse4
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> vsel(bval_t condition, composed_t if_value, composed_t else_value)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "sse4", "vsel");

                return _mm_blendv_epi8(else_value, if_value, condition);
            }


            /**
             * @brief conditional default
             * @relates int16
             * @remark sse default
             */
            template<typename T = zint16<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> vsel(bval_t condition, composed_t if_value, composed_t else_value)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vsel");

                return _mm_or_si128(_mm_andnot_si128(condition, else_value), _mm_and_si128(condition, if_value));
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::conditional<__impl<base_t>, zint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io modules
     */
    ///@{

    /**
     * @brief io
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct bint16_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief io default
             * @relates int16
             * @remark sse default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vstore");

                _mm_storeu_si128((__m128i*)&(*result), input);
            }


            /**
             * @brief io default
             * @relates int16
             * @remark sse default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vstream");

                _mm_stream_si128((__m128i*)&(*result), input);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::io<__impl<base_t>, bint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise modules
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct bint16_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vbneg(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbneg");

                auto zero = _mm_setzero_si128();
                auto ones = _mm_cmpeq_epi16(zero, zero);
                return _mm_xor_si128(one, ones);
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vbor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbor");

                return _mm_or_si128(one, other);
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vband(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vband");

                return _mm_and_si128(one, other);
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vbxor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vbxor");

                return _mm_xor_si128(one, other);
            }


            /**
             * @brief bitwise sse4
             * @relates int16
             * @remark sse sse4
             */
            template<typename T = bool> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "sse4", "is_set");

                return _mm_test_all_ones(one) != 0;
            }


            /**
             * @brief bitwise default
             * @relates int16
             * @remark sse default
             */
            template<typename T = bool> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "is_set");

                auto zero = _mm_setzero_si128();
                auto ones = _mm_cmpeq_epi32(zero, zero);
                return _mm_movemask_epi8(_mm_cmpeq_epi16(one, ones)) == 0xFFFF;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, bint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical modules
     */
    ///@{

    /**
     * @brief logical
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct bint16_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief logical default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vlneg(composed_t one)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vlneg");

                return _mm_cmpeq_epi16(one, _mm_setzero_si128());
            }


            /**
             * @brief logical default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vlor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vlor");

                return _mm_or_si128(one, other);
            }


            /**
             * @brief logical default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vland(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vland");

                return _mm_and_si128(one, other);
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, bint16<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable modules
     */
    ///@{

    /**
     * @brief equatable
     * @relates int16
     * @remark sse
     */
    template<typename composed_t>
    struct bint16_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            /// complete vector
            using zval_t        = zint16<base_t::features>;
            /// complete boolean vector
            using bval_t        = bint16<base_t::features>;
            /// type tag
            using tag           = typename base_t::tag;

            /// wrapped vector type
            using vector_t      = typename zval_traits<base_t>::vector_t;
            /// element type
            using element_t     = typename zval_traits<base_t>::element_t;

            /// wrapped mask vector type
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;

            /// extracted type (for usage in scalar code)
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            /// forward to base
            FORWARD(__impl);

            /**
             * @brief equatable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> veq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "veq");

                return _mm_cmpeq_epi16(one, other);
            }


            /**
             * @brief equatable default
             * @relates int16
             * @remark sse default
             */
            friend bint16<base_t::features> vneq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.int16.impl", __LINE__, "int16(int16_t[8])", "default", "vneq");

                return !(one == other);
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates int16
         * @remark sse
         */
        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, bint16<base_t::features>>;

    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name int16 composition
     */
    ///@{

        /**
         * @brief zval parametrization using
         * - '__m128i' as underlying vector type
         * - 'int16_t' as scalar type
         * - '8' as vector size
         * - '16' as alignment
         * @relates int16
         * @remark sse
         */
        template<uint64_t features>
        struct __zval_int16
        {
            /// vector base
            using zval_base_t = zval<__m128i, __m128i, int16_t, zval_tag, 8, 16, features>;
            /// boolean vector base
            using bval_base_t = bval<__m128i, __m128i, 8, 16, features>;

            /// implementation
            struct impl : public zval_base_t
            {
                /// complete vector
                using zval_t = zint16<features>;
                /// complete boolean vector
                using bval_t = bint16<features>;

                /// forward to base
                FORWARD2(impl, zval_base_t);
            };
        };
        /**
         * @brief zval composition
         * @relates int16
         * @remark sse
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __zint16
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using zval_t = typename __zval_int16<features>::impl;

            /// compose type from modules
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                zint16_io<impl>::template impl,
                zint16_math<impl>::template impl,
                zint16_numeric<impl>::template impl,
                zint16_arithmetic<impl>::template impl,
                zint16_bitwise<impl>::template impl,
                zint16_bitwise_shift<impl>::template impl,
                zint16_comparable<impl>::template impl,
                zint16_logical<impl>::template impl,
                zint16_equatable<impl>::template impl,
                zint16_conditional<impl>::template impl,
                zint16_construction<impl>::template impl,

                composable<zval_t>::template type
            >;

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = zint16<features>;
                /// complete boolean vector
                using bval_t = bint16<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };

        /**
         * @brief bval parametrization using
         * - '__m128i' as underlying vector type
         * - 'int16_t' as scalar type
         * - '8' as vector size
         * - '16' as alignment
         * @relates int16
         * @remark sse
         * @tparam features feature mask
         */
        template<uint64_t features>
        struct __bval_int16
        {
            /// complete vector base
            using zval_base_t = zval<__m128i, __m128i, int16_t, zval_tag, 8, 16, features>;
            /// complete boolean vector base
            using bval_base_t = bval<__m128i, __m128i, 8, 16, features>;

            /// implementation
            struct impl : public bval_base_t
            {
                /// complete vector
                using zval_t = zint16<features>;
                /// complete boolean vector
                using bval_t = bint16<features>;

                /// forward to base
                FORWARD2(impl, bval_base_t);
            };
        };

        /// bint16 composition
        /// @tparam features feature mask
        template<uint64_t features>
        struct __bint16
        {
            /// @cond
            struct impl;
            /// @endcond

            /// parametrized zval base
            using bval_t = typename __bval_int16<features>::impl;
            /// compose type from modules
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                bint16_io<impl>::template impl,
                bint16_bitwise<impl>::template impl,
                bint16_logical<impl>::template impl,
                bint16_equatable<impl>::template impl,
                bint16_construction<impl>::template impl,

                composable<bval_t>::template type
            >;

            /// implementation
            struct impl : public composition_t
            {
                /// complete vector
                using zval_t = zint16<features>;
                /// complete boolean vector
                using bval_t = bint16<features>;

                /// forward to base
                FORWARD2(impl, composition_t);
            };
        };
    //}

    /// public zint16 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct zint16 : public __zint16<features>::impl
    {
        /// complete vector
        using zval_t = zint16<features>;
        /// complete boolean vector
        using bval_t = bint16<features>;

        /// forward to base
        FORWARD2(zint16, __zint16<features>::impl);
    };

    /// public bint16 implementation
    /// @tparam features feature mask
    template<uint64_t features>
    struct bint16 : public __bint16<features>::impl
    {
        /// complete vector
        using zval_t = zint16<features>;
        /// complete boolean vector
        using bval_t = bint16<features>;

        /// forward to base
        FORWARD2(bint16, __bint16<features>::impl);
    };

    static_assert(is_zval<zint16<0>>::value, "is_zval for zint16 failed.");
    static_assert(is_bval<bint16<0>>::value, "is_bval for bint16 failed.");

    static_assert(!is_floating_point<zint16<0>>::value, "is_floating_point for zint16 failed.");
    static_assert(is_integral<zint16<0>>::value, "is_integral for zint16 failed.");

    static_assert(!is_float<zint16<0>>::value, "is_float for zint16 failed.");
    static_assert(!is_double<zint16<0>>::value, "is_double for zint16 failed.");

    ///@}
}}}