//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/common.hpp"
#include "traits/construction.hpp"
#include "traits/math.hpp"
#include "traits/equatable.hpp"
#include "traits/comparable.hpp"
#include "traits/arithmetic.hpp"
#include "traits/conditional.hpp"
#include "traits/io.hpp"
#include "traits/logical.hpp"
#include "traits/numeric.hpp"
#include "traits/bitwise.hpp"

/**
 * @brief float32 implementation for the sse target
 * provides unified access to 4 'float' values
 */

namespace zacc { namespace backend { namespace sse {

    template<uint64_t features>
    struct bfloat32;

    template<uint64_t features>
    struct zfloat32;


    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(  ) : base_t()  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS()");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(__m128 value) : base_t(value)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(__m128)");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(__m128d value) : base_t(_mm_cvtpd_ps(value))  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(__m128d)");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(__m128i value) : base_t(_mm_cvtepi32_ps(value))  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(__m128i)");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(float value) : base_t(_mm_set1_ps(value))  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(float)");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(std::array<typename zval_traits<base_t>::element_t, zval_traits<base_t>::size> value) : base_t(_mm_load_ps(value.data()))  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(std::array<typename zval_traits<base_t>::element_t, zval_traits<base_t>::size>)");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(float _3, float _2, float _1, float _0) : base_t(_mm_set_ps(_0, _1, _2, _3))  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(float, float, float, float)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct bfloat32_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(  ) : base_t()  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS()");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(zval_t value) : base_t(value)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(zval_t)");

            }


            /**
             * @brief construction  branch
             * @relates float32
             * @remark sse - 
             */
            constexpr __impl(bval_t value, last_operation last_op) : base_t(value, last_op)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "", "CONS(bval_t value, last_operation)");

            }

        };

        /**
         * @brief construction public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::construction<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_io
    {

        /**
         * @brief io basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief io default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vstore");

                _mm_storeu_ps(&(*result), input);
            }


            /**
             * @brief io default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vstream");

                _mm_stream_ps(&(*result), input);
            }


            /**
             * @brief io default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename RandomIt> friend zfloat32<base_t::features> vgather(RandomIt input, const zint32<base_t::features> &index, composed_t)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vgather");

                auto i = index.data();
                return _mm_set_ps(input[i[3]], input[i[2]], input[i[1]], input[i[0]]);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::io<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name math operations
     */
    ///@{

    /**
     * @brief math
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_math
    {

        /**
         * @brief math basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vabs(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vabs");

                return _mm_max_ps(one, -one);
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vmin(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vmin");

                return _mm_min_ps(one, other);
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vmax(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vmax");

                return _mm_max_ps(one, other);
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vclamp(composed_t self, composed_t from, composed_t to)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vclamp");

                return vmin(to, vmax(from, self));
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vrcp(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vrcp");

                return (1 / one);
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vtrunc(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vtrunc");

                return _mm_cvtepi32_ps(_mm_cvttps_epi32(one));
            }


            /**
             * @brief math sse4 branch
             * @relates float32
             * @remark sse - sse4
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> vfloor(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "sse4", "vfloor");

                return _mm_floor_ps(one);
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> vfloor(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vfloor");

                auto zero = _mm_setzero_si128();
                auto _1  = _mm_srli_epi32(_mm_cmpeq_epi32(zero, zero), 31);
                auto fi = vtrunc(one);
                return vsel(vgt(fi, one), vsub(fi, _1), fi);
            }


            /**
             * @brief math sse4 branch
             * @relates float32
             * @remark sse - sse4
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> vceil(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "sse4", "vceil");

                return _mm_ceil_ps(one);
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> vceil(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vceil");

                auto zero = _mm_setzero_si128();
                auto _1  = _mm_srli_epi32(_mm_cmpeq_epi32(zero, zero), 31);
                auto fi = vtrunc(one);
                return vsel(vlt(fi, one), vadd(fi, _1), fi);
            }


            /**
             * @brief math sse4 branch
             * @relates float32
             * @remark sse - sse4
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> vround(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "sse4", "vround");

                return _mm_round_ps (one, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC);
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> vround(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vround");

                auto zero = _mm_setzero_si128();
                auto ones = _mm_cmpeq_epi32(zero, zero);
                // generate the highest value < 2;
                auto nearest = _mm_castsi128_ps(_mm_srli_epi32(ones, 2));
                auto tr = vtrunc(one);
                // get remainder;
                auto rmd = one - tr;
                // mul remainder by near 2 will yield the needed offset;
                auto rmd2 = vmul(rmd, nearest);
                // after being truncated of course;
                auto rmd2tr = vtrunc(rmd2);
                return tr + rmd2tr;
            }


            /**
             * @brief math default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vsqrt(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vsqrt");

                return _mm_sqrt_ps(one);
            }

        };

        /**
         * @brief math public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::math<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name numeric operations
     */
    ///@{

    /**
     * @brief numeric
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_numeric
    {

        /**
         * @brief numeric basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);
        };

        /**
         * @brief numeric public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::numeric<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic operations
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief arithmetic default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vneg(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vneg");

                return _mm_sub_ps(_mm_setzero_ps(), one);
            }


            /**
             * @brief arithmetic default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vadd(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vadd");

                return _mm_add_ps(one, other);
            }


            /**
             * @brief arithmetic default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vsub(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vsub");

                return _mm_sub_ps(one, other);
            }


            /**
             * @brief arithmetic default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vmul(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vmul");

                return _mm_mul_ps(one, other);
            }


            /**
             * @brief arithmetic default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vdiv(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vdiv");

                return _mm_div_ps(one, other);
            }


            /**
             * @brief arithmetic fma branch
             * @relates float32
             * @remark sse - fma
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::FMA3>, T> vfmadd(composed_t multiplicand, composed_t multiplier, composed_t addendum)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "fma", "vfmadd");

                return _mm_fmadd_ps(multiplicand, multiplier, addendum);
            }


            /**
             * @brief arithmetic default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::FMA3>, T> vfmadd(composed_t multiplicand, composed_t multiplier, composed_t addendum)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vfmadd");

                return vadd(vmul(multiplicand, multiplier), addendum);
            }


            /**
             * @brief arithmetic fma branch
             * @relates float32
             * @remark sse - fma
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::FMA3>, T> vfmsub(composed_t multiplicand, composed_t multiplier, composed_t addendum)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "fma", "vfmsub");

                return _mm_fmsub_ps(multiplicand, multiplier, addendum);
            }


            /**
             * @brief arithmetic default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::FMA3>, T> vfmsub(composed_t multiplicand, composed_t multiplier, composed_t addendum)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vfmsub");

                return vsub(vmul(multiplicand, multiplier), addendum);
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::arithmetic<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vbneg(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vbneg");

                auto zero = _mm_setzero_ps();
                auto ones = _mm_cmpeq_ps(zero, zero);
                return _mm_xor_ps(one, ones);
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vband(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vband");

                return _mm_and_ps(one, other);
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vbor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vbor");

                return _mm_or_ps(one, other);
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend zfloat32<base_t::features> vbxor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vbxor");

                return _mm_xor_ps(one, other);
            }


            /**
             * @brief bitwise sse4 branch
             * @relates float32
             * @remark sse - sse4
             */
            template<typename T = bool> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "sse4", "is_set");

                return _mm_test_all_ones(_mm_castps_si128(one)) != 0;
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = bool> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "is_set");

                auto zero = _mm_setzero_ps();
                auto ones = _mm_cmpeq_ps(zero, zero);
                return _mm_movemask_ps(_mm_cmpeq_ps(one, ones)) == 0xFFFF;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparable operations
     */
    ///@{

    /**
     * @brief comparable
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_comparable
    {

        /**
         * @brief comparable basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief comparable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vgt(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vgt");

                return _mm_cmpgt_ps(one, other);
            }


            /**
             * @brief comparable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vlt(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vlt");

                return _mm_cmplt_ps(one, other);
            }


            /**
             * @brief comparable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vge(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vge");

                return _mm_cmpge_ps(one, other);
            }


            /**
             * @brief comparable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vle(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vle");

                return _mm_cmple_ps(one, other);
            }

        };

        /**
         * @brief comparable public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::comparable<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief logical default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vlneg(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vlneg");

                return _mm_cmpeq_ps(one, _mm_setzero_ps());
            }


            /**
             * @brief logical default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vlor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vlor");

                return _mm_or_ps(one, other);
            }


            /**
             * @brief logical default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vland(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vland");

                return _mm_and_ps(one, other);
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable operations
     */
    ///@{

    /**
     * @brief equatable
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief equatable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> veq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "veq");

                return _mm_cmpeq_ps(one, other);
            }


            /**
             * @brief equatable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vneq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vneq");

                return _mm_cmpneq_ps(one, other);
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional operations
     */
    ///@{

    /**
     * @brief conditional
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct zfloat32_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief conditional sse4 branch
             * @relates float32
             * @remark sse - sse4
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> vsel(bval_t condition, composed_t if_value, composed_t else_value)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "sse4", "vsel");

                return _mm_blendv_ps(else_value, if_value, condition);
            }


            /**
             * @brief conditional default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = zfloat32<base_t::features>> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> vsel(bval_t condition, composed_t if_value, composed_t else_value)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vsel");

                return _mm_or_ps(_mm_andnot_ps(condition, else_value), _mm_and_ps(condition, if_value));
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::conditional<__impl<base_t>, zfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct bfloat32_io
    {

        /**
         * @brief io basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief io default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename OutputIt> friend void vstore(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vstore");

                _mm_storeu_ps(&(*result), input);
            }


            /**
             * @brief io default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename OutputIt> friend void vstream(OutputIt result, composed_t input)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vstream");

                _mm_stream_ps(&(*result), input);
            }


            /**
             * @brief io default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename RandomIt> friend bfloat32<base_t::features> vgather(RandomIt input, const zint32<base_t::features> &index, composed_t)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vgather");

                auto i = index.data();
                return _mm_set_ps(input[i[3]], input[i[2]], input[i[1]], input[i[0]]);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::io<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct bfloat32_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vbneg(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vbneg");

                auto zero = _mm_setzero_ps();
                auto ones = _mm_cmpeq_ps(zero, zero);
                return _mm_xor_ps(one, ones);
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vband(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vband");

                return _mm_and_ps(one, other);
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vbor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vbor");

                return _mm_or_ps(one, other);
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vbxor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vbxor");

                return _mm_xor_ps(one, other);
            }


            /**
             * @brief bitwise sse4 branch
             * @relates float32
             * @remark sse - sse4
             */
            template<typename T = bool> friend std::enable_if_t<has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "sse4", "is_set");

                return _mm_test_all_ones(_mm_castps_si128(one)) != 0;
            }


            /**
             * @brief bitwise default branch
             * @relates float32
             * @remark sse - default
             */
            template<typename T = bool> friend std::enable_if_t<!has_feature_v<base_t, capabilities::SSE41>, T> is_set(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "is_set");

                auto zero = _mm_setzero_ps();
                auto ones = _mm_cmpeq_ps(zero, zero);
                return _mm_movemask_ps(_mm_cmpeq_ps(one, ones)) == 0xFFFF;
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::bitwise<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct bfloat32_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief logical default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vlneg(composed_t one)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vlneg");

                return _mm_cmpeq_ps(one, _mm_setzero_ps());
            }


            /**
             * @brief logical default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vlor(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vlor");

                return _mm_or_ps(one, other);
            }


            /**
             * @brief logical default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vland(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vland");

                return _mm_and_ps(one, other);
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::logical<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // =================================================================================================================
    /**
     * @name equatable operations
     */
    ///@{

    /**
     * @brief equatable
     * @relates float32
     * @remark sse
     */
    template<typename composed_t>
    struct bfloat32_equatable
    {

        /**
         * @brief equatable basic interface implementation
         * @relates float32
         * @remark sse
         */
        template<typename base_t>
        struct __impl : base_t
        {
            using zval_t        = zfloat32<base_t::features>;
            using bval_t        = bfloat32<base_t::features>;
            using tag           = typename base_t::tag;
            using vector_t      = typename zval_traits<base_t>::vector_t;
            using element_t     = typename zval_traits<base_t>::element_t;
            using mask_vector_t = typename zval_traits<base_t>::mask_vector_t;
            using extracted_t   = typename zval_traits<base_t>::extracted_t;

            FORWARD(__impl);

            /**
             * @brief equatable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> veq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "veq");

                return _mm_cmpeq_ps(one, other);
            }


            /**
             * @brief equatable default branch
             * @relates float32
             * @remark sse - default
             */
            friend bfloat32<base_t::features> vneq(composed_t one, composed_t other)  {

                ZTRACE_BACKEND("sse.float32.impl", __LINE__, "float32(float[4])", "default", "vneq");

                return _mm_cmpneq_ps(one, other);
            }

        };

        /**
         * @brief equatable public interface implementation
         * @relates float32
         * @remark sse
         */

        template<typename base_t>
        using impl = traits::equatable<__impl<base_t>, bfloat32<base_t::features>>;

    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name float32 composition
     */
    ///@{

    //namespace composition {

        /**
         * @brief zval parametrization using
         * - '__m128' as underlying vector type
         * - 'float' as scalar type
         * - '4' as vector size
         * - '16' as alignment
         * @relates float32
         * @remark sse
         */
        template<uint64_t features>
        struct __zval_float32
        {
            using zval_base_t = zval<__m128, __m128, float, zval_tag, 4, 16, features>;
            using bval_base_t = bval<__m128, __m128, 4, 16, features>;

            struct impl : public zval_base_t
            {
                using zval_t = zfloat32<features>;
                using bval_t = bfloat32<features>;

                FORWARD2(impl, zval_base_t);
            };
        };
        /**
         * @brief zval composition
         * @relates float32
         * @remark sse
         */
        template<uint64_t features>
        struct __zfloat32
        {
            struct impl;

            using zval_t = typename __zval_float32<features>::impl;
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                zfloat32_io<impl>::template impl,
                zfloat32_math<impl>::template impl,
                zfloat32_numeric<impl>::template impl,
                zfloat32_arithmetic<impl>::template impl,
                zfloat32_bitwise<impl>::template impl,
                zfloat32_comparable<impl>::template impl,
                zfloat32_logical<impl>::template impl,
                zfloat32_equatable<impl>::template impl,
                zfloat32_conditional<impl>::template impl,
                zfloat32_construction<impl>::template impl,

                composable<zval_t>::template type
            >;

            struct impl : public composition_t
            {
                using zval_t = zfloat32<features>;
                using bval_t = bfloat32<features>;

                FORWARD2(impl, composition_t);
            };
        };

        /**
         * @brief bval parametrization using
         * - '__m128' as underlying vector type
         * - 'float' as scalar type
         * - '4' as vector size
         * - '16' as alignment
         * @relates float32
         * @remark sse
         */
        template<uint64_t features>
        struct __bval_float32
        {
            using zval_base_t = zval<__m128, __m128, float, zval_tag, 4, 16, features>;
            using bval_base_t = bval<__m128, __m128, 4, 16, features>;

            struct impl : public bval_base_t
            {
                using zval_t = zfloat32<features>;
                using bval_t = bfloat32<features>;

                FORWARD2(impl, bval_base_t);
            };
        };

        template<uint64_t features>
        struct __bfloat32
        {
            struct impl;

            using bval_t = typename __bval_float32<features>::impl;
            using composition_t = compose
            <
                printable::impl,
                iteratable::impl,
                convertable::impl,
                bfloat32_io<impl>::template impl,
                bfloat32_bitwise<impl>::template impl,
                bfloat32_logical<impl>::template impl,
                bfloat32_equatable<impl>::template impl,
                bfloat32_construction<impl>::template impl,

                composable<bval_t>::template type
            >;

            struct impl : public composition_t
            {
                using zval_t = zfloat32<features>;
                using bval_t = bfloat32<features>;

                FORWARD2(impl, composition_t);
            };
        };
    //}

    template<uint64_t features>
    struct zfloat32 : public __zfloat32<features>::impl
    {
        using zval_t = zfloat32<features>;
        using bval_t = bfloat32<features>;

        FORWARD2(zfloat32, __zfloat32<features>::impl);
    };

    template<uint64_t features>
    struct bfloat32 : public __bfloat32<features>::impl
    {
        using zval_t = zfloat32<features>;
        using bval_t = bfloat32<features>;

        FORWARD2(bfloat32, __bfloat32<features>::impl);
    };

    static_assert(is_zval<zfloat32<0>>::value, "is_zval for zfloat32 failed.");
    static_assert(is_bval<bfloat32<0>>::value, "is_bval for bfloat32 failed.");

    static_assert(is_floating_point<zfloat32<0>>::value, "is_floating_point for zfloat32 failed.");
    static_assert(!is_integral<zfloat32<0>>::value, "is_integral for zfloat32 failed.");

    static_assert(is_float<zfloat32<0>>::value, "is_float for zfloat32 failed.");
    static_assert(!is_double<zfloat32<0>>::value, "is_double for zfloat32 failed.");

    ///@}
}}}