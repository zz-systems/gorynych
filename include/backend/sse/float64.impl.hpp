//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

/**
 * @file float64.impl.hpp
 * @brief
 * This file provides defines required components and logic for float64 sse target.
 * Provides unified access to 2 'double' values
 * @remark
 * This is an autogenerated file. Changes will be lost on regeneration.
 */
#pragma once

#include <type_traits>
#include <cmath>

#include "backend/intrin.hpp"
#include "backend/zval.hpp"

#include "util/type/type_composition.hpp"
#include "util/type/type_traits.hpp"

#include "util/memory.hpp"
#include "util/macros.hpp"

#include "traits/convertable.hpp"
#include "traits/printable.hpp"
#include "traits/bitwise.hpp"
#include "traits/math.hpp"
#include "traits/conditional.hpp"
#include "traits/comparable.hpp"
#include "traits/io.hpp"
#include "traits/logical.hpp"
#include "traits/numeric.hpp"
#include "traits/equatable.hpp"
#include "traits/arithmetic.hpp"

namespace zacc { namespace backend { namespace sse
{
    /// @cond
    template<uint64_t features>
    struct bfloat64;

    template<uint64_t features>
    struct zfloat64;
    /// @endcond

    namespace float64_detail
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 2;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = __m128d;

        /// scalar type, like int for sse 4x integer vector
        using element_t = double;

        /// mask type for boolean operations
        using mask_vector_t = __m128d;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;

        /**
         * @brief zval parametrization using
         * - '__m128d' as underlying vector type
         * - 'double' as scalar type
         * - '2' as vector size
         * - '16' as alignment
         * @relates float64
         * @remark sse
         */
        template<uint64_t Features>
        using zval_base = zval<__m128d, __m128d, double, zval_tag, 2, 16, Features>;

        /**
         * @brief bval parametrization using
         * - '__m128d' as underlying vector type
         * - 'double' as scalar type
         * - '2' as vector size
         * - '16' as alignment
         * @relates float64
         * @remark sse
        */
        template<uint64_t Features>
        using bval_base = bval<__m128d, __m128d, double, 2, 16, Features>;
    }
}}}

namespace zacc {

    template<typename T>
    struct ztraits<T, std::enable_if_t<
            std::is_base_of<backend::sse::float64_detail::zval_base<T::feature_mask>, T>::value
            || std::is_base_of<backend::sse::float64_detail::bval_base<T::feature_mask>, T>::value>>
    {
        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 2;

        /// capabilities
        static constexpr uint64_t feature_mask = T::feature_mask;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = __m128d;

        /// scalar type, like int for sse 4x integer vector
        using element_t = double;

        /// mask type for boolean operations
        using mask_vector_t = __m128d;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;

        using zval_t = backend::sse::zfloat64<T::feature_mask>;
        using bval_t = backend::sse::bfloat64<T::feature_mask>;

        using tag = select_t<
                when<std::is_base_of<backend::sse::float64_detail::zval_base<T::feature_mask>, T>::value, zval_tag>,
                when<std::is_base_of<backend::sse::float64_detail::bval_base<T::feature_mask>, T>::value, bval_tag>>;
    };
}

namespace zacc { namespace backend { namespace sse {

    namespace float64_detail {

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_io
        {
            /**
             * @brief io basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vstore");

                    _mm_store_pd(&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vstream");

                    _mm_stream_pd(&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename RandomIt> friend zfloat64<Interface::feature_mask> vgather(RandomIt input, const zint32<Interface::feature_mask> &index, Composed) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vgather");

                    auto i = index.data();
                    return _mm_set_pd(input[i[3]], input[i[1]]);
                }

            };

            /**
             * @brief io public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name math modules
         */
        ///@{
        /**
         * @brief math
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_math
        {
            /**
             * @brief math basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vabs(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vabs");

                    return _mm_max_pd(one, -one);
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vmin(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vmin");

                    return _mm_min_pd(one, other);
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vmax(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vmax");

                    return _mm_max_pd(one, other);
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vclamp(Composed self, Composed from, Composed to) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vclamp");

                    return vmin(to, vmax(from, self));
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vrcp(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vrcp");

                    return (1 / one);
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vtrunc(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vtrunc");

                    return _mm_cvtepi32_pd(_mm_cvttpd_epi32(one));
                }


                /**
                 * @brief math sse4
                 * @relates float64
                 * @remark sse sse4
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<has_feature_v<Interface, capabilities::SSE41>, T> vfloor(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "sse4", "vfloor");

                    return _mm_floor_pd(one);
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<!has_feature_v<Interface, capabilities::SSE41>, T> vfloor(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vfloor");

                    auto zero = _mm_setzero_si128();
                    auto _1  = _mm_srli_epi32(_mm_cmpeq_epi32(zero, zero), 31);
                    auto fi = vtrunc(one);
                    return vsel(vgt(fi, one), vsub(fi, _1), fi);
                }


                /**
                 * @brief math sse4
                 * @relates float64
                 * @remark sse sse4
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<has_feature_v<Interface, capabilities::SSE41>, T> vceil(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "sse4", "vceil");

                    return _mm_ceil_pd(one);
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<!has_feature_v<Interface, capabilities::SSE41>, T> vceil(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vceil");

                    auto zero = _mm_setzero_si128();
                    auto _1  = _mm_srli_epi32(_mm_cmpeq_epi32(zero, zero), 31);
                    auto fi = vtrunc(one);
                    return vsel(vlt(fi, one), vadd(fi, _1), fi);
                }


                /**
                 * @brief math sse4
                 * @relates float64
                 * @remark sse sse4
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<has_feature_v<Interface, capabilities::SSE41>, T> vround(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "sse4", "vround");

                    return _mm_round_pd (one, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC);
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<!has_feature_v<Interface, capabilities::SSE41>, T> vround(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vround");

                    auto zero = _mm_setzero_si128();
                    auto ones = _mm_cmpeq_epi32(zero, zero);
                    // generate the highest value < 2;
                    auto nearest = _mm_castsi128_pd(_mm_srli_epi64(ones, 2));
                    auto tr = vtrunc(one);
                    // get remainder;
                    auto rmd = one - tr;
                    // mul remainder by near 2 will yield the needed offset;
                    auto rmd2 = vmul(rmd, nearest);
                    // after being truncated of course;
                    auto rmd2tr = vtrunc(rmd2);
                    return tr + rmd2tr;
                }


                /**
                 * @brief math default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vsqrt(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vsqrt");

                    return _mm_sqrt_pd(one);
                }

            };

            /**
             * @brief math public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::math<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name numeric modules
         */
        ///@{
        /**
         * @brief numeric
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_numeric
        {
            /**
             * @brief numeric basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {
            };

            /**
             * @brief numeric public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::numeric<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name arithmetic modules
         */
        ///@{
        /**
         * @brief arithmetic
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_arithmetic
        {
            /**
             * @brief arithmetic basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vneg(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vneg");

                    return _mm_sub_pd(_mm_setzero_pd(), one);
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vadd(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vadd");

                    return _mm_add_pd(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vsub(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vsub");

                    return _mm_sub_pd(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vmul(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vmul");

                    return _mm_mul_pd(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vdiv(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vdiv");

                    return _mm_div_pd(one, other);
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vfmadd(Composed multiplicand, Composed multiplier, Composed addendum) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vfmadd");

                    return vadd(vmul(multiplicand, multiplier), addendum);
                }


                /**
                 * @brief arithmetic default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vfmsub(Composed multiplicand, Composed multiplier, Composed addendum) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vfmsub");

                    return vsub(vmul(multiplicand, multiplier), addendum);
                }

            };

            /**
             * @brief arithmetic public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::arithmetic<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vbneg");

                    auto ones = _mm_cmpeq_pd(one, one);
                    return _mm_xor_pd(one, ones);
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vband");

                    return _mm_and_pd(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vbor");

                    return _mm_or_pd(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend zfloat64<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vbxor");

                    return _mm_xor_pd(one, other);
                }


                /**
                 * @brief bitwise sse4
                 * @relates float64
                 * @remark sse sse4
                 */
                template<typename T = bool> friend std::enable_if_t<has_feature_v<Interface, capabilities::SSE41>, T> is_set(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "sse4", "is_set");

                    return _mm_test_all_ones(_mm_castpd_si128(one)) != 0;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename T = bool> friend std::enable_if_t<!has_feature_v<Interface, capabilities::SSE41>, T> is_set(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "is_set");

                    return _mm_movemask_pd(_mm_cmpeq_pd(one, _mm_cmpeq_pd(one, one))) == 0xFFFF;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name comparable modules
         */
        ///@{
        /**
         * @brief comparable
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_comparable
        {
            /**
             * @brief comparable basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vgt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vgt");

                    return _mm_cmpgt_pd(one, other);
                }


                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vlt(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vlt");

                    return _mm_cmplt_pd(one, other);
                }


                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vge(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vge");

                    return _mm_cmpge_pd(one, other);
                }


                /**
                 * @brief comparable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vle(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vle");

                    return _mm_cmple_pd(one, other);
                }

            };

            /**
             * @brief comparable public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::comparable<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vlneg");

                    return _mm_cmpeq_pd(one, _mm_setzero_pd());
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vlor");

                    return _mm_or_pd(one, other);
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vland");

                    return _mm_and_pd(one, other);
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "veq");

                    return _mm_cmpeq_pd(one, other);
                }


                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vneq");

                    return _mm_cmpneq_pd(one, other);
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name conditional modules
         */
        ///@{
        /**
         * @brief conditional
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct zfloat64_conditional
        {
            /**
             * @brief conditional basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief conditional sse4
                 * @relates float64
                 * @remark sse sse4
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<has_feature_v<Interface, capabilities::SSE41>, T> vsel(bfloat64<Interface::feature_mask> condition, Composed if_value, Composed else_value) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "sse4", "vsel");

                    return _mm_blendv_pd(else_value, if_value, condition);
                }


                /**
                 * @brief conditional default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename T = zfloat64<Interface::feature_mask>> friend std::enable_if_t<!has_feature_v<Interface, capabilities::SSE41>, T> vsel(bfloat64<Interface::feature_mask> condition, Composed if_value, Composed else_value) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vsel");

                    return _mm_or_pd(_mm_andnot_pd(condition, else_value), _mm_and_pd(condition, if_value));
                }

            };

            /**
             * @brief conditional public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::conditional<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name io modules
         */
        ///@{
        /**
         * @brief io
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct bfloat64_io
        {
            /**
             * @brief io basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief io default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstore(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vstore");

                    _mm_store_pd(&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename OutputIt> friend void vstream(OutputIt result, Composed input) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vstream");

                    _mm_stream_pd(&(*result), input);
                }


                /**
                 * @brief io default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename RandomIt> friend bfloat64<Interface::feature_mask> vgather(RandomIt input, const zint32<Interface::feature_mask> &index, Composed) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vgather");

                    auto i = index.data();
                    return _mm_set_pd(input[i[3]], input[i[1]]);
                }

            };

            /**
             * @brief io public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::io<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name bitwise modules
         */
        ///@{
        /**
         * @brief bitwise
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct bfloat64_bitwise
        {
            /**
             * @brief bitwise basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vbneg(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vbneg");

                    auto ones = _mm_cmpeq_pd(one, one);
                    return _mm_xor_pd(one, ones);
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vband(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vband");

                    return _mm_and_pd(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vbor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vbor");

                    return _mm_or_pd(one, other);
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vbxor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vbxor");

                    return _mm_xor_pd(one, other);
                }


                /**
                 * @brief bitwise sse4
                 * @relates float64
                 * @remark sse sse4
                 */
                template<typename T = bool> friend std::enable_if_t<has_feature_v<Interface, capabilities::SSE41>, T> is_set(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "sse4", "is_set");

                    return _mm_test_all_ones(_mm_castpd_si128(one)) != 0;
                }


                /**
                 * @brief bitwise default
                 * @relates float64
                 * @remark sse default
                 */
                template<typename T = bool> friend std::enable_if_t<!has_feature_v<Interface, capabilities::SSE41>, T> is_set(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "is_set");

                    return _mm_movemask_pd(_mm_cmpeq_pd(one, _mm_cmpeq_pd(one, one))) == 0xFFFF;
                }

            };

            /**
             * @brief bitwise public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::bitwise<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name logical modules
         */
        ///@{
        /**
         * @brief logical
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct bfloat64_logical
        {
            /**
             * @brief logical basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief logical default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vlneg(Composed one) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vlneg");

                    return _mm_cmpeq_pd(one, _mm_setzero_pd());
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vlor(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vlor");

                    return _mm_or_pd(one, other);
                }


                /**
                 * @brief logical default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vland(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vland");

                    return _mm_and_pd(one, other);
                }

            };

            /**
             * @brief logical public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::logical<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}

        // =================================================================================================================
        /**
         * @name equatable modules
         */
        ///@{
        /**
         * @brief equatable
         * @relates float64
         * @remark sse
         */
        template<typename Interface, typename Composed>
        struct bfloat64_equatable
        {
            /**
             * @brief equatable basic interface implementation
             * @relates float64
             * @remark sse
             */
            struct __impl
            {

                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> veq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "veq");

                    return _mm_cmpeq_pd(one, other);
                }


                /**
                 * @brief equatable default
                 * @relates float64
                 * @remark sse default
                 */
                friend bfloat64<Interface::feature_mask> vneq(Composed one, Composed other) 
                {
                    ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "default", "vneq");

                    return _mm_cmpneq_pd(one, other);
                }

            };

            /**
             * @brief equatable public interface implementation
             * @relates float64
             * @remark sse
             */
            template<typename Base>
            using impl = traits::equatable<__impl, Base, Interface, Composed, bfloat64<Interface::feature_mask>>;
        };

        ///@}


        // Type composition ================================================================================================

        /**
         * @name float64 composition
         */
        ///@{

        /**
         * @brief zval composition
         * @relates float64
         * @remark sse
         * @tparam features feature mask
         */
        template<uint64_t FeatureMask>
        using __zfloat64 = compose_t
        <
            printable<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            convertable<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_io<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_math<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_numeric<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_arithmetic<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_bitwise<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_comparable<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_logical<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_equatable<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl,
            zfloat64_conditional<zval_base<FeatureMask>, zfloat64<FeatureMask>>::template impl
        >;

        /// bfloat64 composition
        /// @tparam features feature mask
        template<uint64_t FeatureMask>
        using __bfloat64 = compose_t
        <
            printable<bval_base<FeatureMask>, bfloat64<FeatureMask>>::template impl,
            convertable<bval_base<FeatureMask>, bfloat64<FeatureMask>>::template impl,
            bfloat64_io<bval_base<FeatureMask>, bfloat64<FeatureMask>>::template impl,
            bfloat64_bitwise<bval_base<FeatureMask>, bfloat64<FeatureMask>>::template impl,
            bfloat64_logical<bval_base<FeatureMask>, bfloat64<FeatureMask>>::template impl,
            bfloat64_equatable<bval_base<FeatureMask>, bfloat64<FeatureMask>>::template impl
        >;

        ///@}
    } // end namespace

    /// public zfloat64 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct zfloat64 :
            public float64_detail::__zfloat64<FeatureMask>,
            public float64_detail::zval_base<FeatureMask>
    {
        /// type tag
        using tag = zval_tag;

        /// complete vector
        using zval_t = zfloat64<FeatureMask>;

        /// complete boolean vector
        using bval_t = bfloat64<FeatureMask>;

        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 2;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = __m128d;

        /// scalar type, like int for sse 4x integer vector
        using element_t = double;

        /// mask type for boolean operations
        using mask_vector_t = __m128d;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;

        /**
         * copy constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<std::is_convertible<T, __m128d>::value>>// || std::is_convertible<T, double>::value>>
        constexpr zfloat64(const T& other) noexcept
                : float64_detail::zval_base<FeatureMask>(other)
        {}

        /**
         * move constructor
         * @tparam T any type convertable to Vector
         * @param other
         */
        template<typename T, typename = std::enable_if_t<(size > 1) && std::is_convertible<T, __m128d>::value>>
        constexpr zfloat64(T&& other) noexcept
            : float64_detail::zval_base<FeatureMask>(std::forward<T>(other))
        {}

        /**
         * copy constructor
         * @param other
         */
        constexpr zfloat64(const bfloat64<FeatureMask>& other) noexcept
            : float64_detail::zval_base<FeatureMask>(other.value())
        {}


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr zfloat64(  ) noexcept : float64_detail::zval_base<FeatureMask>()
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS()");

        }


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr zfloat64(__m128 value) noexcept : float64_detail::zval_base<FeatureMask>(_mm_cvtps_pd(value))
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS(__m128)");

        }


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr zfloat64(__m128d value) noexcept : float64_detail::zval_base<FeatureMask>(value)
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS(__m128d)");

        }


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr zfloat64(__m128i value) noexcept : float64_detail::zval_base<FeatureMask>(_mm_cvtepi32_pd(_mm_shuffle_epi32(value, _MM_SHUFFLE(0,2,0,0))))
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS(__m128i)");

        }


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr zfloat64(double value) noexcept : float64_detail::zval_base<FeatureMask>(_mm_set1_pd(value))
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS(double)");

        }


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr zfloat64(extracted_t value) noexcept : float64_detail::zval_base<FeatureMask>(_mm_load_pd(value.data()))
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS(extracted_t)");

        }


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr zfloat64(double _1, double _0) noexcept : float64_detail::zval_base<FeatureMask>(_mm_set_pd(_0, _1))
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS(double, double)");

        }

    };

    /// public bfloat64 implementation
    /// @tparam FeatureMask feature mask
    template<uint64_t FeatureMask>
    struct bfloat64 :
            public float64_detail::__bfloat64<FeatureMask>,
            public float64_detail::bval_base<FeatureMask>
    {
        /// type tag
        using tag = bval_tag;

        /// complete vector
        using zval_t = zfloat64<FeatureMask>;

        /// complete boolean vector
        using bval_t = bfloat64<FeatureMask>;

        /// vector size (1 - scalar, 4, 8, 16, ...)
        static constexpr size_t size = 2;

        /// memory alignment
        static constexpr size_t alignment = 16;

        /// scalar type? vector type?
        static constexpr bool is_vector = size > 1;

        /// vector type, like __m128i for sse 4x integer vector
        using vector_t = __m128d;

        /// scalar type, like int for sse 4x integer vector
        using element_t = bool;

        /// mask type for boolean operations
        using mask_vector_t = __m128d;

        /// extracted std::array of (dim) scalar values
        using extracted_t = std::array<element_t, size>;

        /// Forwarding constructor
        FORWARD2(bfloat64, float64_detail::bval_base<FeatureMask>);


        /**
         * @brief constructable 
         * @relates float64
         * @remark sse 
         */
        constexpr bfloat64(  ) noexcept : float64_detail::bval_base<FeatureMask>()
        {
            ZTRACE_BACKEND("sse.float64.impl", __LINE__, "float64(double[2])", "", "CONS()");

        }

    };

    static_assert(is_zval<zfloat64<0>>::value, "is_zval for zfloat64 failed.");
    static_assert(is_bval<bfloat64<0>>::value, "is_bval for bfloat64 failed.");

    static_assert(is_floating_point<zfloat64<0>>::value, "is_floating_point for zfloat64 failed.");
    static_assert(!is_integral<zfloat64<0>>::value, "is_integral for zfloat64 failed.");

    static_assert(!is_float<zfloat64<0>>::value, "is_float for zfloat64 failed.");
    static_assert(is_double<zfloat64<0>>::value, "is_double for zfloat64 failed.");

    ///@}
}}}