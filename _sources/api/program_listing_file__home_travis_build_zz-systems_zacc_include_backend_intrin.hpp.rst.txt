
.. _program_listing_file__home_travis_build_zz-systems_zacc_include_backend_intrin.hpp:

Program Listing for File intrin.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_zz-systems_zacc_include_backend_intrin.hpp>` (``/home/travis/build/zz-systems/zacc/include/backend/intrin.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //---------------------------------------------------------------------------------
   // The MIT License (MIT)
   // 
   // Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy
   // of this software and associated documentation files (the "Software"), to deal
   // in the Software without restriction, including without limitation the rights
   // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   // copies of the Software, and to permit persons to whom the Software is
   // furnished to do so, subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   // 
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   // SOFTWARE.
   //---------------------------------------------------------------------------------
   
   
   #pragma once
   
   #if defined(_MSC_VER)
   /* Microsoft C/C++-compatible compiler */
   #include <intrin.h>
   #include <smmintrin.h>
   #elif (defined(__GNUC__)) && (defined(__x86_64__) || defined(__i386__))
   /* GCC-compatible compiler, targeting x86/x86-64 */
   #include <x86intrin.h>
   #elif defined(__GNUC__) && defined(__ARM_NEON__)
   /* GCC-compatible compiler, targeting ARM with NEON */
   #include <arm_neon.h>
   #elif defined(__GNUC__) && defined(__IWMMXT__)
   /* GCC-compatible compiler, targeting ARM with WMMX */
   #include <mmintrin.h>
   #elif (defined(__GNUC__) || defined(__xlC__)) && (defined(__VEC__) || defined(__ALTIVEC__))
   /* XLC or GCC-compatible compiler, targeting PowerPC with VMX/VSX */
   #include <altivec.h>
   #elif defined(__GNUC__) && defined(__SPE__)
   /* GCC-compatible compiler, targeting PowerPC with SPE */
   #include <spe.h>
   #endif
   
   //template<typename T>
   //std::enable_if_t<!zacc::is_zval<T>::value && !zacc::is_bval<T>::value, bool> is_set(T value)
   //{
   //  return value != 0;
   //};
   
   inline void adjust_rounding_mode()
   {
   #if defined(_MM_SET_ROUNDING_MODE) && defined(_MM_SET_FLUSH_ZERO_MODE)
       _MM_SET_ROUNDING_MODE(_MM_ROUND_TOWARD_ZERO);
       _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);
   #endif
   }
