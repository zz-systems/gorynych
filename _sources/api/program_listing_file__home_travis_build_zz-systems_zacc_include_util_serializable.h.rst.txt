
.. _program_listing_file__home_travis_build_zz-systems_zacc_include_util_serializable.h:

Program Listing for File serializable.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_zz-systems_zacc_include_util_serializable.h>` (``/home/travis/build/zz-systems/zacc/include/util/serializable.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //
   // Vectorized and parallelized version of libnoise using the zacc SIMD toolkit
   // Copyright (C) 2015-2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
   //
   // Original libnoise: 
   // Copyright (C) 2003, 2004 Jason Bevins
   // The developer's email is jlbezigvins@gmzigail.com (for great email, take
   // off every 'zig'.)
   //
   // This library is free software; you can redistribute it and/or modify it
   // under the terms of the GNU Lesser General Public License as published by
   // the Free Software Foundation; either version 2.1 of the License, or (at
   // your option) any later version.
   //
   // This library is distributed in the hope that it will be useful, but WITHOUT
   // ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   // FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
   // License (COPYING.txt) for more details.
   //
   // You should have received a copy of the GNU Lesser General Public License
   // along with this library; if not, write to the Free Software Foundation,
   // Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
   //
   
   #pragma once
   #include <memory>
   
   namespace zacc {
       template<typename tserializer>
       class serializable {
       public:
           virtual ~serializable() {
           }
   
           const tserializer &operator<<(const tserializer &serializer) {
               deserialize(serializer);
   
               return serializer;
           }
   
           tserializer &operator>>(tserializer &serializer) const {
               serialize(serializer);
   
               return serializer;
           }
   
           virtual void deserialize(const tserializer &) {}
   
           virtual void serialize(tserializer &) const {}
       };
   }
   
