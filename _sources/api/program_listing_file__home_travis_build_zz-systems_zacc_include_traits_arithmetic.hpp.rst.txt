
.. _program_listing_file__home_travis_build_zz-systems_zacc_include_traits_arithmetic.hpp:

Program Listing for File arithmetic.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_zz-systems_zacc_include_traits_arithmetic.hpp>` (``/home/travis/build/zz-systems/zacc/include/traits/arithmetic.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //---------------------------------------------------------------------------------
   // The MIT License (MIT)
   // 
   // Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy
   // of this software and associated documentation files (the "Software"), to deal
   // in the Software without restriction, including without limitation the rights
   // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   // copies of the Software, and to permit persons to whom the Software is
   // furnished to do so, subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   // 
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   // SOFTWARE.
   //---------------------------------------------------------------------------------
   
   
   #pragma once
   
   #include "util/operators.hpp"
   
   namespace zacc { namespace traits {
   
       template<typename Interface, typename Composed, typename Boolean>
       struct arithmetic : inherit<ops_meta<Composed, Interface>, plus, minus, multiplies, divides, modulus, increment, decrement>
       {
           friend Composed operator+(Composed self) {
               return self;
           }
   
           friend Composed operator-(Composed self) {
               return vneg(self);
           }
   
           friend Composed operator+(Composed one, Composed other) {
               return vadd(one, other);
           }
   
           friend Composed operator-(Composed one, Composed other) {
               return vsub(one, other);
           }
   
           friend Composed operator*(Composed one, Composed other) {
               return vmul(one, other);
           }
   
           friend Composed operator/(Composed one, Composed other) {
               return vdiv(one, other);
           }
   
           friend Composed operator%(Composed one, Composed other) {
               return vmod(one, other);
           }
   
           friend Composed& operator++(Composed& self) {
               return vadd(self, 1);
           }
   
           friend Composed& operator--(Composed& self) {
               return vsub(self, 1);
           }
       };
   }}
