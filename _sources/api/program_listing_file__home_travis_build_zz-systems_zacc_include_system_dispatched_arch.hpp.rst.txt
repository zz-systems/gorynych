
.. _program_listing_file__home_travis_build_zz-systems_zacc_include_system_dispatched_arch.hpp:

Program Listing for File dispatched_arch.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_zz-systems_zacc_include_system_dispatched_arch.hpp>` (``/home/travis/build/zz-systems/zacc/include/system/dispatched_arch.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //---------------------------------------------------------------------------------
   // The MIT License (MIT)
   //
   // Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy
   // of this software and associated documentation files (the "Software"), to deal
   // in the Software without restriction, including without limitation the rights
   // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   // copies of the Software, and to permit persons to whom the Software is
   // furnished to do so, subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   //
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   // SOFTWARE.
   //---------------------------------------------------------------------------------
   
   
   #pragma once
   
   #include "system/feature.hpp"
   #include "system/arch.hpp"
   #include "backend/all.hpp"
   
   namespace zacc {
   
       struct dispatched_arch
       {
           using arch_t = arch::ZACC_ARCH;
   
           static constexpr bool use_fast_float = ZACC_FAST_FLOAT;
   
           static constexpr size_t alignment = ztraits<backend::ZACC_MAJOR_ARCH::zfloat32<arch_t::value>>::alignment;
   
           using zfloat32  = backend::ZACC_MAJOR_ARCH::zfloat32<arch_t::value>;
           using zfloat64  = backend::ZACC_MAJOR_ARCH::zfloat64<arch_t::value>;
           using zint8     = backend::ZACC_MAJOR_ARCH::zint8<arch_t::value>;
           using zint16    = backend::ZACC_MAJOR_ARCH::zint16<arch_t::value>;
           using zint32    = backend::ZACC_MAJOR_ARCH::zint32<arch_t::value>;
   
           using bfloat32  = backend::ZACC_MAJOR_ARCH::bfloat32<arch_t::value>;
           using bfloat64  = backend::ZACC_MAJOR_ARCH::bfloat64<arch_t::value>;
           using bint8     = backend::ZACC_MAJOR_ARCH::bint8<arch_t::value>;
           using bint16    = backend::ZACC_MAJOR_ARCH::bint16<arch_t::value>;
           using bint32    = backend::ZACC_MAJOR_ARCH::bint32<arch_t::value>;
   
           static const std::string name() { return arch_t::name(); }
       };
   
       using zfloat32   = typename dispatched_arch::zfloat32;
       using zfloat64   = typename dispatched_arch::zfloat64;
       using zint8      = typename dispatched_arch::zint8;
       using zint16     = typename dispatched_arch::zint16;
       using zint32     = typename dispatched_arch::zint32;
   
       using zdouble    = zfloat64;
       using zfloat     = zfloat32;
       using zbyte      = zint8;
       using zshort     = zint16;
       using zint       = zint32;
   
       using bfloat32   = typename dispatched_arch::bfloat32;
       using bfloat64   = typename dispatched_arch::bfloat64;
       using bint8      = typename dispatched_arch::bint8;
       using bint16     = typename dispatched_arch::bint16;
       using bint32     = typename dispatched_arch::bint32;
   
       using bfloat     = bfloat32;
       using bdouble    = bfloat64;
       using bbyte      = bint8;
       using bshort     = bint16;
       using bint       = bint32;
   }
