
.. _program_listing_file__home_travis_build_zz-systems_zacc_include_backend_avx_float64.impl.hpp:

Program Listing for File float64.impl.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_zz-systems_zacc_include_backend_avx_float64.impl.hpp>` (``/home/travis/build/zz-systems/zacc/include/backend/avx/float64.impl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //---------------------------------------------------------------------------------
   //
   //  This is an autogenerated file. Do not edit!
   //
   //---------------------------------------------------------------------------------
   // The MIT License (MIT)
   //
   // Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy
   // of this software and associated documentation files (the "Software"), to deal
   // in the Software without restriction, including without limitation the rights
   // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   // copies of the Software, and to permit persons to whom the Software is
   // furnished to do so, subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   //
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   // SOFTWARE.
   //---------------------------------------------------------------------------------
   
   #pragma once
   
   #include <type_traits>
   #include <cmath>
   
   #include "backend/intrin.hpp"
   #include "backend/zval.hpp"
   
   #include "util/type/type_composition.hpp"
   #include "util/type/type_traits.hpp"
   
   #include "util/memory.hpp"
   #include "util/macros.hpp"
   
   #include "traits/common.hpp"
   #include "traits/constructable.hpp"
   #include "traits/io.hpp"
   #include "traits/numeric.hpp"
   #include "traits/math.hpp"
   #include "traits/arithmetic.hpp"
   #include "traits/bitwise.hpp"
   #include "traits/logical.hpp"
   #include "traits/comparable.hpp"
   #include "traits/conditional.hpp"
   
   namespace zacc { namespace backend { namespace avx {
   
       template<uint64_t arch>
       struct bfloat64;
   
       template<uint64_t arch>
       struct zfloat64;
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_construction
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
   
   
               __impl() : Base() {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS()");
   
               }
   
   
               __impl(const __m256 &value) : Base(_mm256_cvtps_pd(_mm256_castps256_ps128(value))) {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS(const __m256 &value)");
   
               }
   
   
               __impl(const __m256d &value) : Base(value) {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS(const __m256d &value)");
   
               }
   
   
               __impl(const __m256i &value) : Base(_mm256_cvtepi32_pd(_mm256_castsi256_si128(value))) {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS(const __m256i &value)");
   
               }
   
   
               __impl(double value) : Base(_mm256_set1_pd(value)) {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS(double value)");
   
               }
   
   
               __impl(std::array<typename Base::scalar_t, Base::dim> value) : Base(_mm256_loadu_pd(value.data())) {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS(std::array<typename Base::scal..)");
   
               }
   
   
               __impl(std::array<sse::zint32<Base::arch>, 2> value) : Base(_mm256_set_m128(_mm_cvtepi32_pd(value[1]), _mm_cvtepi32_pd(value[0]))) {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS(std::array<sse::zint32<Base::c..)");
   
               }
   
   
               __impl(double arg3, double arg2, double arg1, double arg0) : Base(_mm256_set_pd(arg0, arg1, arg2, arg3)) {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "CONS(double arg3, double arg2, double..)");
   
               }
   
           };
   
           template<typename Base>
           //using impl = traits::construction<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::construction<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_io
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend void vstore(typename Base::extracted_t &target, Composed source)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vstore");
   
                   _mm256_store_pd(target.data(), source);
               }
   
   
               friend void vstream(typename Base::extracted_t &target, Composed source)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vstream");
   
                   _mm256_stream_pd(target.data(), source);
               }
   
   
               friend zfloat64<Base::arch> vgather(Composed &target, raw_ptr<const double> source, zint32<Base::arch> index)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vgather");
   
                   return _mm256_set_m128d(sse::zfloat64<Base::arch>::gather(source, index.value()[1]), sse::zfloat64<Base::arch>::gather(source, index.value()[0]));
               }
   
           };
   
           template<typename Base>
           //using impl = traits::io<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::io<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_numeric
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
           };
   
           template<typename Base>
           //using impl = traits::numeric<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::numeric<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_math
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zfloat64<Base::arch> vabs(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vabs");
   
                   return _mm256_max_pd(one, -one);
               }
   
   
               friend zfloat64<Base::arch> vmin(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vmin");
   
                   return _mm256_min_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vmax(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vmax");
   
                   return _mm256_max_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vclamp(Composed self, Composed from, Composed to)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vclamp");
   
                   return vmin(to, vmax(from, self));
               }
   
   
               friend zfloat64<Base::arch> vrcp(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vrcp");
   
                   return (1 / one);
               }
   
   
               friend zfloat64<Base::arch> vtrunc(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vtrunc");
   
                   return _mm256_cvtepi32_pd(_mm256_cvtpd_epi32(one));
               }
   
   
               friend zfloat64<Base::arch> vfloor(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vfloor");
   
                   return _mm256_floor_pd(one);
               }
   
   
               friend zfloat64<Base::arch> vceil(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vceil");
   
                   return _mm256_ceil_pd(one);
               }
   
   
               friend zfloat64<Base::arch> vround(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vround");
   
                   return _mm256_round_pd (one, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC);
               }
   
   
               friend zfloat64<Base::arch> vsqrt(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vsqrt");
   
                   return _mm256_sqrt_pd(one);
               }
   
           };
   
           template<typename Base>
           //using impl = traits::math<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::math<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_arithmetic
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zfloat64<Base::arch> vneg(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vneg");
   
                   return _mm256_sub_pd(_mm256_setzero_pd(), one);
               }
   
   
               friend zfloat64<Base::arch> vadd(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vadd");
   
                   return _mm256_add_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vsub(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vsub");
   
                   return _mm256_sub_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vmul(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vmul");
   
                   return _mm256_mul_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vdiv(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vdiv");
   
                   return _mm256_div_pd(one, other);
               }
   
   
               template<typename T = zfloat64<Base::arch>> friend std::enable_if_t<Base::dispatcher::is_set(capabilities::FMA3), T> vfmadd(Composed multiplicand, Composed multiplier, Composed addendum)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "fma", "vfmadd");
   
                   return _mm256_fmadd_pd(multiplicand, multiplier, addendum);
               }
   
   
               template<typename T = zfloat64<Base::arch>> friend std::enable_if_t<!Base::dispatcher::is_set(capabilities::FMA3), T> vfmadd(Composed multiplicand, Composed multiplier, Composed addendum)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vfmadd");
   
                   return vadd(vmul(multiplicand, multiplier), addendum);
               }
   
   
               template<typename T = zfloat64<Base::arch>> friend std::enable_if_t<Base::dispatcher::is_set(capabilities::FMA3), T> vfmsub(Composed multiplicand, Composed multiplier, Composed addendum)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "fma", "vfmsub");
   
                   return _mm256_fmsub_pd(multiplicand, multiplier, addendum);
               }
   
   
               template<typename T = zfloat64<Base::arch>> friend std::enable_if_t<!Base::dispatcher::is_set(capabilities::FMA3), T> vfmsub(Composed multiplicand, Composed multiplier, Composed addendum)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vfmsub");
   
                   return vsub(vmul(multiplicand, multiplier), addendum);
               }
   
           };
   
           template<typename Base>
           //using impl = traits::arithmetic<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::arithmetic<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_bitwise
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zfloat64<Base::arch> vbneg(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vbneg");
   
                   auto zero = _mm256_setzero_pd();
                   auto ones = _mm256_cmp_pd(zero, zero, _CMP_EQ_OQ);
                   return _mm256_xor_pd(one, ones);
               }
   
   
               friend zfloat64<Base::arch> vband(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vband");
   
                   return _mm256_or_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vbor(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vbor");
   
                   return _mm256_and_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vbxor(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vbxor");
   
                   return _mm256_xor_pd(one, other);
               }
   
   
               template<typename T = bool> friend std::enable_if_t<Base::dispatcher::is_set(capabilities::AVX2), T> is_set(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "avx2", "is_set");
   
                   auto ival =  _mm256_castpd_si256(one);
                   return _mm256_testc_si256(ival, _mm256_cmpeq_epi32(ival,ival));
               }
   
   
               template<typename T = bool> friend std::enable_if_t<!Base::dispatcher::is_set(capabilities::AVX2), T> is_set(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "is_set");
   
                   auto hi = _mm_castpd_si128(_mm256_extractf128_pd(one, 1));
                   auto lo = _mm_castpd_si128(_mm256_extractf128_pd(one, 0));
                   return _mm_test_all_ones(hi) != 0 && _mm_test_all_ones(lo) != 0;
               }
   
           };
   
           template<typename Base>
           //using impl = traits::bitwise<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::bitwise<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_logical
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zfloat64<Base::arch> vlneg(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vlneg");
   
                   return _mm256_cmp_pd(one, _mm256_setzero_pd(), _CMP_EQ_OQ);
               }
   
   
               friend zfloat64<Base::arch> vlor(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vlor");
   
                   return _mm256_or_pd(one, other);
               }
   
   
               friend zfloat64<Base::arch> vland(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vland");
   
                   return _mm256_and_pd(one, other);
               }
   
           };
   
           template<typename Base>
           //using impl = traits::logical<__impl<Base>, bfloat64<Base::arch>>;
   
           using impl = traits::logical<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_comparison
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zfloat64<Base::arch> veq(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "veq");
   
                   return _mm256_cmp_pd(one, other, _CMP_EQ_OQ);
               }
   
   
               friend zfloat64<Base::arch> vneq(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vneq");
   
                   return _mm256_cmp_pd(one, other, _CMP_NEQ_OQ);
               }
   
   
               friend zfloat64<Base::arch> vgt(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vgt");
   
                   return _mm256_cmp_pd(one, other, _CMP_GT_OQ);
               }
   
   
               friend zfloat64<Base::arch> vlt(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vlt");
   
                   return _mm256_cmp_pd(one, other, _CMP_LT_OQ);
               }
   
   
               friend zfloat64<Base::arch> vge(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vge");
   
                   auto result = _mm256_cmp_pd(one, other, _CMP_GE_OQ);
                   return result;
               }
   
   
               friend zfloat64<Base::arch> vle(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vle");
   
                   return _mm256_cmp_pd(one, other, _CMP_LE_OQ);
               }
   
           };
   
           template<typename Base>
           //using impl = traits::comparable<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::comparable<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct float64_conditional
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zfloat64<Base::arch> vsel(Composed condition, Composed if_value, Composed else_value)  noexcept {
   
                   ZTRACE_BACKEND("avx.float64.impl", __LINE__, "zfloat64(double[4])", "default", "vsel");
   
                   auto mask = _mm256_cmp_pd(_mm256_setzero_pd(), condition, _CMP_EQ_OQ);
                   return _mm256_blendv_pd(if_value, else_value, mask);
               }
   
           };
   
           template<typename Base>
           //using impl = traits::conditional<__impl<Base>, zfloat64<Base::arch>>;
   
           using impl = traits::conditional<__impl<Base>, zfloat64<Base::arch>>;
   
       };
   
   
   
       // Type composition ================================================================================================
   
   
       //namespace composition {
   
           template<uint64_t arch>
           struct __zval_float64
           {
               using zval_t = zval<__m256d, __m256d, double, 4, 32, arch>;
   
               struct impl : public zval_t
               {
                   FORWARD2(impl, zval_t);
               };
           };
           template<uint64_t arch>
           struct __zfloat64
           {
               struct impl;
   
               using zval_t = typename __zval_float64<arch>::impl;
               using composition_t = compose
               <
                   printable::impl,
                   iteratable::impl,
                   convertable::impl,
                   float64_io<impl>::template impl,
                   float64_math<impl>::template impl,
                   float64_numeric<impl>::template impl,
                   float64_arithmetic<impl>::template impl,
                   float64_bitwise<impl>::template impl,
                   float64_logical<impl>::template impl,
                   float64_comparison<impl>::template impl,
                   float64_conditional<impl>::template impl,
                   float64_construction<impl>::template impl,
   
                   composable<zval_t>::template type
               >;
   
               struct impl : public composition_t
               {
                   FORWARD2(impl, composition_t);
               };
           };
   
           template<uint64_t arch>
           struct __bfloat64
           {
               using bval_t = bval<typename __zfloat64<arch>::impl, __m256d>;
               struct impl : public bval_t
               {
                   FORWARD2(impl, bval_t);
               };
           };
       //}
   
       template<uint64_t arch>
       struct zfloat64 : public /*composition::*/__zfloat64<arch>::impl
       {
           FORWARD2(zfloat64, /*composition::*/__zfloat64<arch>::impl);
       };
   
       template<uint64_t arch>
       struct bfloat64 : public /*composition::*/__bfloat64<arch>::impl
       {
           FORWARD2(bfloat64, /*composition::*/__bfloat64<arch>::impl);
       };
   
       static_assert(is_zval<zfloat64<0>>::value, "is_zval for zfloat64 failed.");
       static_assert(is_bval<bfloat64<0>>::value, "is_bval for bfloat64 failed.");
   
       static_assert(is_floating_point<zfloat64<0>>::value, "is_floating_point for zfloat64 failed.");
       static_assert(!is_integral<zfloat64<0>>::value, "is_integral for zfloat64 failed.");
   
       static_assert(!is_float<zfloat64<0>>::value, "is_float for zfloat64 failed.");
       static_assert(is_double<zfloat64<0>>::value, "is_double for zfloat64 failed.");
   
   }}}
