
.. _program_listing_file__home_travis_build_zz-systems_zacc_include_traits_bitwise_shift.hpp:

Program Listing for File bitwise_shift.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_zz-systems_zacc_include_traits_bitwise_shift.hpp>` (``/home/travis/build/zz-systems/zacc/include/traits/bitwise_shift.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   //---------------------------------------------------------------------------------
   // The MIT License (MIT)
   // 
   // Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy
   // of this software and associated documentation files (the "Software"), to deal
   // in the Software without restriction, including without limitation the rights
   // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   // copies of the Software, and to permit persons to whom the Software is
   // furnished to do so, subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   // 
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   // SOFTWARE.
   //---------------------------------------------------------------------------------
   
   
   #pragma once
   
   #include "util/operators.hpp"
   
   namespace zacc { namespace traits {
   
       template<typename Interface, typename Composed, typename Boolean>
       struct bitwise_shift
               //: inherit<Composed, bit_shl, bit_shr>
       {
   
           friend Composed operator<<(Composed one, const size_t immediate) {
               return vbslli(one, immediate);
           }
   
           friend Composed operator>>(Composed one, const size_t immediate) {
               return vbsrli(one, immediate);
           }
   
           // TODO: Disabled for now.
           /*friend Composed operator<<(Composed one, Composed other) {
               return vbsll(one, other);
           }
   
           friend Composed operator>>(Composed one, Composed other) {
               return vbsrl(one, other);
           }*/
   
           friend Composed &operator <<=(Composed &one, const size_t immediate) {
               return one = one << immediate;
           }
   
           friend Composed &operator >>=(Composed &one, const size_t immediate) {
               return one = one >> immediate;
           }
       };
   }}
