
.. _program_listing_file__home_travis_build_zz-systems_zacc_include_backend_avx_int16.impl.hpp:

Program Listing for File int16.impl.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_zz-systems_zacc_include_backend_avx_int16.impl.hpp>` (``/home/travis/build/zz-systems/zacc/include/backend/avx/int16.impl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //---------------------------------------------------------------------------------
   //
   //  This is an autogenerated file. Do not edit!
   //
   //---------------------------------------------------------------------------------
   // The MIT License (MIT)
   //
   // Copyright (c) 2015-2018 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy
   // of this software and associated documentation files (the "Software"), to deal
   // in the Software without restriction, including without limitation the rights
   // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   // copies of the Software, and to permit persons to whom the Software is
   // furnished to do so, subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   //
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   // SOFTWARE.
   //---------------------------------------------------------------------------------
   
   #pragma once
   
   #include <type_traits>
   #include <cmath>
   
   #include "backend/intrin.hpp"
   #include "backend/zval.hpp"
   
   #include "util/type/type_composition.hpp"
   #include "util/type/type_traits.hpp"
   
   #include "util/memory.hpp"
   #include "util/macros.hpp"
   
   #include "traits/common.hpp"
   #include "traits/constructable.hpp"
   #include "traits/io.hpp"
   #include "traits/numeric.hpp"
   #include "traits/math.hpp"
   #include "traits/arithmetic.hpp"
   #include "traits/bitwise.hpp"
   #include "traits/bitwise_shift.hpp"
   #include "traits/logical.hpp"
   #include "traits/comparable.hpp"
   #include "traits/conditional.hpp"
   
   namespace zacc { namespace backend { namespace avx {
   
       template<uint64_t arch>
       struct bint16;
   
       template<uint64_t arch>
       struct zint16;
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_construction
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
   
   
               __impl() : Base() {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "CONS()");
   
               }
   
   
               __impl(std::array<sse::zint16<Base::arch>, 2> value) : Base(value) {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "CONS(std::array<sse::zint16<Base::c..)");
   
               }
   
   
               __impl(sse::zint16<Base::arch> hi, sse::zint16<Base::arch> lo) : Base(std::array<sse::zint16<Base::arch>, 2> ({ hi, lo })) {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "CONS(sse::zint16<Base::arch> ..)");
   
               }
   
   
               __impl(int16_t value) : Base(std::array<sse::zint16<Base::arch>, 2> ({ _mm_set1_epi16(value), _mm_set1_epi16(value) })) {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "CONS(int16_t value)");
   
               }
   
   
               __impl(std::array<typename Base::scalar_t, Base::dim> value) : Base(std::array<sse::zint16<Base::arch>, 2> ({ _mm_loadu_si128((__m128i*)value.data()), _mm_loadu_si128((__m128i*)(value.data() + 4)) })) {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "CONS(std::array<typename Base::scal..)");
   
               }
   
           };
   
           template<typename Base>
           //using impl = traits::construction<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::construction<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_io
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend void vstore(typename Base::extracted_t &target, Composed source)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vstore");
   
                   _mm_store_si128((__m128i*)(target.data()), source.value()[1]);
                   _mm_store_si128((__m128i*)(target.data() + Base::dim / 2), source.value()[0]);
               }
   
   
               friend void vstream(typename Base::extracted_t &target, Composed source)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vstream");
   
                   _mm_stream_si128((__m128i*)(target.data()), source.value()[1]);
                   _mm_stream_si128((__m128i*)(target.data() + Base::dim / 2), source.value()[0]);
               }
   
           };
   
           template<typename Base>
           //using impl = traits::io<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::io<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_numeric
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
           };
   
           template<typename Base>
           //using impl = traits::numeric<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::numeric<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_math
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zint16<Base::arch> vabs(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vabs");
   
                   return zint16<Base::arch> ({ vabs(one.value()[1]), vabs(one.value()[0]) });
               }
   
   
               friend zint16<Base::arch> vmin(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vmin");
   
                   return zint16<Base::arch> ({ vmin(one.value()[1], other.value()[1]), vmin(one.value()[0], other.value()[0]) });
               }
   
   
               friend zint16<Base::arch> vmax(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vmax");
   
                   return zint16<Base::arch> ({ vmax(one.value()[1], other.value()[1]), vmax(one.value()[0], other.value()[0]) });
               }
   
   
               friend zint16<Base::arch> vclamp(Composed self, Composed from, Composed to)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vclamp");
   
                   return zint16<Base::arch> ({ vclamp(self.value()[1], from.value()[1], to.value()[1]), vclamp(self.value()[0], from.value()[0], to.value()[0]) });
               }
   
           };
   
           template<typename Base>
           //using impl = traits::math<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::math<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_arithmetic
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zint16<Base::arch> vneg(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vneg");
   
                   return zint16<Base::arch> ({ -one.value()[1], -one.value()[0] });
               }
   
   
               friend zint16<Base::arch> vadd(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vadd");
   
                   return zint16<Base::arch> ({ one.value()[1] + other.value()[1], one.value()[0] + other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vsub(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vsub");
   
                   return zint16<Base::arch> ({ one.value()[1] - other.value()[1], one.value()[0] - other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vmul(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vmul");
   
                   return zint16<Base::arch> ({ one.value()[1] * other.value()[1], one.value()[0] * other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vdiv(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vdiv");
   
                   return zint16<Base::arch> ({ one.value()[1] / other.value()[1], one.value()[0] / other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vmod(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vmod");
   
                   return zint16<Base::arch> ({ one.value()[1] % other.value()[1], one.value()[0] % other.value()[0] });
               }
   
           };
   
           template<typename Base>
           //using impl = traits::arithmetic<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::arithmetic<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_bitwise
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zint16<Base::arch> vbneg(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vbneg");
   
                   return zint16<Base::arch> ({ ~one.value()[1], ~one.value()[1] });
               }
   
   
               friend zint16<Base::arch> vbor(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vbor");
   
                   return zint16<Base::arch> ({ one.value()[1] | other.value()[1], one.value()[0] | other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vband(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vband");
   
                   return zint16<Base::arch> ({ one.value()[1] & other.value()[1], one.value()[0] & other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vbxor(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vbxor");
   
                   return zint16<Base::arch> ({ one.value()[1] ^ other.value()[1], one.value()[0] ^ other.value()[0] });
               }
   
   
               friend bool is_set(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "is_set");
   
                   return is_set(one.value()[1]) && is_set(one.value()[0]);
               }
   
           };
   
           template<typename Base>
           //using impl = traits::bitwise<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::bitwise<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_bitwise_shift
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zint16<Base::arch> vbsll(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vbsll");
   
                   return zint16<Base::arch> ({ one.value()[1] << other.value()[1], one.value()[0] << other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vbsrl(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vbsrl");
   
                   return zint16<Base::arch> ({ one.value()[1] >> other.value()[1], one.value()[0] >> other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vbslli(const Composed one, const size_t other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vbslli");
   
                   return zint16<Base::arch> ({ one.value()[1] << other, one.value()[0] << other });
               }
   
   
               friend zint16<Base::arch> vbsrli(const Composed one, const size_t other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vbsrli");
   
                   return zint16<Base::arch> ({ one.value()[1] >> other, one.value()[0] >> other });
               }
   
           };
   
           template<typename Base>
           //using impl = traits::bitwise_shift<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::bitwise_shift<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_logical
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zint16<Base::arch> vlneg(Composed one)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vlneg");
   
                   return zint16<Base::arch> ({ !one.value()[1], !one.value()[1] });
               }
   
   
               friend zint16<Base::arch> vlor(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vlor");
   
                   return zint16<Base::arch> ({ one.value()[1] || other.value()[1], one.value()[0] || other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vland(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vland");
   
                   return zint16<Base::arch> ({ one.value()[1] && other.value()[1], one.value()[0] && other.value()[0] });
               }
   
           };
   
           template<typename Base>
           //using impl = traits::logical<__impl<Base>, bint16<Base::arch>>;
   
           using impl = traits::logical<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_comparison
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zint16<Base::arch> veq(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "veq");
   
                   return zint16<Base::arch> ({ one.value()[1] == other.value()[1], one.value()[0] == other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vneq(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vneq");
   
                   return zint16<Base::arch> ({ one.value()[1] != other.value()[1], one.value()[0] != other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vgt(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vgt");
   
                   return zint16<Base::arch> ({ one.value()[1] > other.value()[1], one.value()[0] > other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vlt(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vlt");
   
                   return zint16<Base::arch> ({ one.value()[1] < other.value()[1], one.value()[0] < other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vge(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vge");
   
                   return zint16<Base::arch> ({ one.value()[1] >= other.value()[1], one.value()[0] >= other.value()[0] });
               }
   
   
               friend zint16<Base::arch> vle(Composed one, Composed other)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vle");
   
                   return zint16<Base::arch> ({ one.value()[1] <= other.value()[1], one.value()[0] <= other.value()[0] });
               }
   
           };
   
           template<typename Base>
           //using impl = traits::comparable<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::comparable<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // =================================================================================================================
   
       template<typename Composed>
       struct int16_conditional
       {
   
           template<typename Base>
           struct __impl : Base
           {
               using mask_t = typename Base::mask_t;
   
               FORWARD(__impl);
   
   
               friend zint16<Base::arch> vsel(Composed condition, Composed if_value, Composed else_value)  noexcept {
   
                   ZTRACE_BACKEND("avx.int16.impl", __LINE__, "zint16(int16_t[16])", "default", "vsel");
   
                   return zint16<Base::arch> ({ vsel(condition.value()[1], if_value.value()[1], else_value.value()[1]), vsel(condition.value()[0], if_value.value()[0], else_value.value()[0]) });
               }
   
           };
   
           template<typename Base>
           //using impl = traits::conditional<__impl<Base>, zint16<Base::arch>>;
   
           using impl = traits::conditional<__impl<Base>, zint16<Base::arch>>;
   
       };
   
   
   
       // Type composition ================================================================================================
   
   
       //namespace composition {
   
           template<uint64_t arch>
           struct __zval_int16
           {
               using zval_t = zval<std::array<sse::zint16<arch>, 2>, std::array<sse::zint16<arch>, 2>, int16_t, 16, 32, arch>;
   
               struct impl : public zval_t
               {
                   FORWARD2(impl, zval_t);
               };
           };
           template<uint64_t arch>
           struct __zint16
           {
               struct impl;
   
               using zval_t = typename __zval_int16<arch>::impl;
               using composition_t = compose
               <
                   printable::impl,
                   iteratable::impl,
                   convertable::impl,
                   int16_io<impl>::template impl,
                   int16_math<impl>::template impl,
                   int16_numeric<impl>::template impl,
                   int16_arithmetic<impl>::template impl,
                   int16_bitwise<impl>::template impl,
                   int16_bitwise_shift<impl>::template impl,
                   int16_logical<impl>::template impl,
                   int16_comparison<impl>::template impl,
                   int16_conditional<impl>::template impl,
                   int16_construction<impl>::template impl,
   
                   composable<zval_t>::template type
               >;
   
               struct impl : public composition_t
               {
                   FORWARD2(impl, composition_t);
               };
           };
   
           template<uint64_t arch>
           struct __bint16
           {
               using bval_t = bval<typename __zint16<arch>::impl, std::array<sse::zint16<arch>, 2>>;
               struct impl : public bval_t
               {
                   FORWARD2(impl, bval_t);
               };
           };
       //}
   
       template<uint64_t arch>
       struct zint16 : public /*composition::*/__zint16<arch>::impl
       {
           FORWARD2(zint16, /*composition::*/__zint16<arch>::impl);
       };
   
       template<uint64_t arch>
       struct bint16 : public /*composition::*/__bint16<arch>::impl
       {
           FORWARD2(bint16, /*composition::*/__bint16<arch>::impl);
       };
   
       static_assert(is_zval<zint16<0>>::value, "is_zval for zint16 failed.");
       static_assert(is_bval<bint16<0>>::value, "is_bval for bint16 failed.");
   
       static_assert(!is_floating_point<zint16<0>>::value, "is_floating_point for zint16 failed.");
       static_assert(is_integral<zint16<0>>::value, "is_integral for zint16 failed.");
   
       static_assert(!is_float<zint16<0>>::value, "is_float for zint16 failed.");
       static_assert(!is_double<zint16<0>>::value, "is_double for zint16 failed.");
   
   }}}
