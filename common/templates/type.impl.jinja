//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <x86intrin.h>
#include <type_traits>

#include "../../../util/type_composition.hpp"

#include "../../../common/zval.hpp"
#include "../../../common/common.hpp"
#include "../../../common/type_traits.hpp"
#include "../../../common/traits/common.hpp"

{% for module in type.get_modules() %}
#include "../../../common/traits/{{ module.name }}.hpp"
{% endfor %}

/**
 * @brief {{ type.type }} implementation for the {{ type.branch }} branch
 * provides unified access to {{ type.vec_size }} '{{ type.scalar_t }}' values
 */

namespace zacc { namespace {{ type.branch }} {
    {% for module in type.get_modules() %}

    // =================================================================================================================
    /**
     * @name {{ module.name }} operations
     */
    ///@{

    /**
     * @brief {{ module.name }}
     * @relates {{ type.type }}
     * @remark {{ type.branch }}
     */
    template<typename composed_t>
    struct {{ module.mangled_name() }}
    {

        /**
         * @brief {{ module.name }} basic interface implementation
         * @relates {{ type.type }}
         * @remark {{ type.branch }}
         */
        template<typename base_t>
        struct __impl : base_t
        {
            {% if not module in type.construction  %}
            FORWARD(__impl);
            {% endif  %}

            {% for func in module.functions %}
                {% for branch in func.branches() %}

            /**
             * @brief {{ module.name }} {{ branch.branch_name }} branch
             * @relates {{ type.type }}
             * @remark {{ type.branch }} - {{ branch.branch_name }}
             */
            {{ branch.signature() }} {
                    {% for instruction in branch.get_instructions() %}
                {{ instruction }}
                    {% endfor %}
            }

                {% endfor %}
            {% endfor %}
        };

        /**
         * @brief {{ module.name }} public interface implementation
         * @relates {{ type.type }}
         * @remark {{ type.branch }}
         */
        template<typename base_t>
        using impl = interface::{{ module.name }}<__impl<base_t>, composed_t>;
    };

    ///@}

    {% endfor %}

    // Type composition ================================================================================================

    /**
     * @name {{ type.type }} composition
     */
    ///@{

    /**
     * @brief zval parametrization using
     * - '{{ type.vector_t }}' as underlying vector type
     * - '{{ type.scalar_t }}' as scalar type
     * - '{{ type.vec_size }}' as vector size
     * - '{{ type.alignment }}' as alignment
     * @relates {{ type.type }}
     * @remark {{ type.branch }}
     */
    template<uint64_t capability>
    struct __zval_{{ type.type }}
    {
        using zval_t = zval<{{ type.vector_t }}, {{ type.scalar_t }}, {{ type.vec_size }}, {{ type.alignment }}, capability>;

        struct impl : public zval_t
        {
            FORWARD2(impl, zval_t);
        };
    };
    /**
     * @brief zval composition
     * @relates {{ type.type }}
     * @remark {{ type.branch }}
     */
    template<uint64_t capability>
    struct __z{{ type.type }}
    {
        struct impl;

        using zval_t = typename __zval_{{ type.type }}<capability>::impl;
        using composition_t = compose
        <
        {% for trait in type.get_traits() %}
            {{ trait }},
        {% endfor %}

            composable<zval_t>::template type
        >;

        struct impl : public composition_t
        {
            FORWARD2(impl, composition_t);
        };
    };

    template<uint64_t capability = 0xFFFF'FFFF'FFFF'FFFF>
    using z{{ type.type }} = typename __z{{ type.type }}<capability>::impl;

    ///@}
}}