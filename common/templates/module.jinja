//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <intrin.h>
#include <type_traits>

#include "../../../common/type_traits.hpp"

{% for module in type.get_modules() %}
#include "../../../common/interfaces/{{ module.name }}.hpp"
{% endfor %}

namespace zacc { namespace {{ type.branch }} {
    {% for module in type.get_modules() %}

    template<typename composed_t>
    struct {{ module.mangled_name() }}
    {
        template<typename base_t>
        struct __impl : base_t
        {
            {% if not module in type.construction  %}
            FORWARD(__impl);
            {% endif  %}

            {% for func in module.functions %}
                {% for branch in func.branches() %}
{#            /// @brief#}
{#            /// @remark #}
            {{ branch.signature() }} {
                    {% for instruction in branch.get_instructions() %}
                {{ instruction }}
                    {% endfor %}
            }

                {% endfor %}
            {% endfor %}
        };

        template<typename base_t>
        using impl = interface::{{ module.name }}<__impl<base_t>, composed_t>;
    };

    {% endfor %}

    struct __z{{ type.type }}
        : public zval<{{ type.vector_t }}, {{ type.scalar_t }}, {{ type.vec_size }}, {{ type.alignment }}>
    {
        FORWARD2(__z{{ type.type }}, zval);
    };

    struct z{{ type.type }};

    struct z{{ type.type }} : public compose
        <
        {% for trait in type.get_traits() %}
            {{ trait }}::impl,
        {% endfor %}

            composable<__z{{ type.type }}>::template type
        >
    {
        FORWARD2(z{{ type.type }}, compose);
    };

}}