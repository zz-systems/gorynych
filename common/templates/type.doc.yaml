modules:
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    negate: [ "-{type}(125)", -125 ]
    add: [ "{type}(124) + {type}(125)", 249 ]
    sub: [ "{type}(124) - {type}(125)", -1 ]
    mul: [ "{type}(124) * {type}(125)", 15500 ]
    div: [ "{type}(124) / {type}(124)", 1 ]
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    negate: [ "~{type}(255)", -256]

    and:  [ "{type}(255) & {type}(64)", 64 ]
    or:   [ "{type}(255) | {type}(64)", 255 ]
    xor:  [ "{type}(255) ^ {type}(64)", 191 ]
    sll:  [ "{type}(1) << {type}(8)", 256 ]
    srl:  [ "{type}(256) >> {type}(8)", 1 ]
    slli: [ "{type}(1) << (8)", 256 ]
    srli: [ "{type}(256) >> (8)", 1 ]
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    negate: [ "!{type}(1)", 0 ]
    or:   [ "{type}(0) || {type}(8)", 8]
    and:  [ "{type}(0) || {type}(8)", 0]
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    eq:   [ "{type}(0) == {type}(8)", 0]
    neq:  [ "{type}(0) != {type}(0)", 0]
    gt:   [ "{type}(0) > {type}(8)", 0]
    lt:   [ "{type}(8) < {type}(0)", 0]
    ge:   [ "{type}(0) >= {type}(0)", 0]
    le:   [ "{type}(0) <= {type}(0)", 0]
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel: [ "vsel({type}(1 == 1), {type}(2), {type}(3))", 2]