//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#include "gtest/gtest.h"
#include "util/testing/gtest_ext.hpp"
#include "system/branch.hpp"
#include <random>

namespace zacc { namespace test {

// =====================================================================================================================
    TEST(sse_bint8_logical, vlneg_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (false);
        }

        VASSERT_EQ(((!zint8(a)).as_bool()), zint8(expected));
    }

    TEST(sse_bint8_logical, vlor_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (true);
        }

        VASSERT_EQ(((zint8(0) || zint8(a)).as_bool()), zint8(expected));
    }

    TEST(sse_bint8_logical, vland_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (false);
        }

        VASSERT_EQ(((zint8(0) && zint8(a)).as_bool()), zint8(expected));
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(sse_bint8_equatable, veq_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (0);
        }

        VASSERT_EQ((zint8(0) == zint8(a)), zint8(expected));
    }

    TEST(sse_bint8_equatable, vneq_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (0);
        }

        VASSERT_EQ((zint8(a) != zint8(a)), zint8(expected));
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(sse_zint8_arithmetic, vneg_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (-a[i]);
        }

        VASSERT_EQ((-zint8(a)), zint8(expected));
    }

    TEST(sse_zint8_arithmetic, vadd_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (a[i] + b[i]);
        }

        VASSERT_EQ((zint8(a) + zint8(b)), zint8(expected));
    }

    TEST(sse_zint8_arithmetic, vsub_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (a[i] - b[i]);
        }

        VASSERT_EQ((zint8(a) - zint8(b)), zint8(expected));
    }

    TEST(sse_zint8_arithmetic, vmul_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (a[i] * b[i]);
        }

        VASSERT_EQ((zint8(a) * zint8(b)), zint8(expected));
    }

    TEST(sse_zint8_arithmetic, vdiv_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (1);
        }

        VASSERT_EQ((zint8(a) / zint8(a)), zint8(expected));
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(sse_zint8_bitwise, vbor_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) ((a[i] | 64));
        }

        VASSERT_EQ((zint8(a) | zint8(64)), zint8(expected));
    }

    TEST(sse_zint8_bitwise, vband_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) ((a[i] & 64));
        }

        VASSERT_EQ((zint8(a) & zint8(64)), zint8(expected));
    }

    TEST(sse_zint8_bitwise, vbxor_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) ((a[i] ^ 64));
        }

        VASSERT_EQ((zint8(a) ^ zint8(64)), zint8(expected));
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(sse_zint8_logical, vlneg_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (false);
        }

        VASSERT_EQ(((!zint8(a)).as_bool()), zint8(expected));
    }

    TEST(sse_zint8_logical, vlor_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (true);
        }

        VASSERT_EQ(((zint8(0) || zint8(a)).as_bool()), zint8(expected));
    }

    TEST(sse_zint8_logical, vland_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (false);
        }

        VASSERT_EQ(((zint8(0) && zint8(a)).as_bool()), zint8(expected));
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(sse_zint8_equatable, veq_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (0);
        }

        VASSERT_EQ((zint8(0) == zint8(a)), zint8(expected));
    }

    TEST(sse_zint8_equatable, vneq_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (0);
        }

        VASSERT_EQ((zint8(a) != zint8(a)), zint8(expected));
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(sse_zint8_conditional, vsel_sse4)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (2);
        }

        VASSERT_EQ((zint8(2).when(zint8(1) == zint8(1)).otherwise(zint8(3))), zint8(expected));
    }

    TEST(sse_zint8_conditional, vsel_default)
    {
        REQUIRES(ZACC_ARCH);

        std::default_random_engine generator;
        std::uniform_int_distribution<int> distribution1(1, 3);
        std::uniform_int_distribution<int> distribution2(3, 60);

        alignas(16) std::array<int8_t, 16> a, b, expected;
        for(int i = 0; i < 16; i++)
        {
            a[i] = static_cast<int8_t>(distribution2(generator));
            b[i] = static_cast<int8_t>(distribution1(generator));

            expected[i] = (int8_t) (2);
        }

        VASSERT_EQ((zint8(2).when(zint8(1) == zint8(1)).otherwise(zint8(3))), zint8(expected));
    }

// =====================================================================================================================

}}