language: cpp
sudo: false
dist: trusty

python:
 - "3.3"

cache:
  ccache: true
  apt: true

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=200M
    - CCACHE_CPP2=1
    - BUILD_SANITIZE_MEMORY=0
git:
  depth: 3

branches:
  except:
  - gh-pages

matrix:
  include:

    # OSX Clang Builds
    - os: osx
      osx_image: xcode8.3
      compiler: clang
      language: generic
      env: COMPILER=c++ BUILD_TYPE='Release' CXX=c++ CC=cc

    - os: osx
      osx_image: xcode9
      compiler: clang
      language: generic
      env: COMPILER=c++ BUILD_TYPE='Release' CXX=c++ CC=cc

    # Linux Clang Builds
    - os: linux
      compiler: clang
      addons: &addons
        apt:
          sources: &sources
            - llvm-toolchain-trusty-3.9
            - llvm-toolchain-trusty-4.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-3.9
            - clang-4.0
            - g++-5
            - g++-6
            #- g++-7
      env: COMPILER=clang++-3.9 BUILD_TYPE='Release' CXX=clang++-3.9 CC=clang-3.9

    - os: linux
      compiler: clang
      addons: *addons
      env: COMPILER=clang++-4.0 BUILD_TYPE='Release' CXX=clang++-4.0 CC=clang-4.0

    # Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: *addons
      env: COMPILER=g++-5 BUILD_TYPE='Release' CXX=g++-5 CC=gcc-5

    - os: linux
      compiler: gcc
      addons: *addons
      env: COMPILER=g++-6 BUILD_TYPE='Release' CXX=g++-6 CC=gcc-6

    #- os: linux
    #  compiler: gcc
    #  addons: *addons
    #  env: COMPILER=g++-7 BUILD_TYPE='Release' CXX=g++-7 CC=gcc-7



# Perform the manual steps on osx to install python3 and activate venv
before_install:
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update          ; fi
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install python3; fi
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then virtualenv venv -p python3; fi
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then source venv/bin/activate; fi

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.6/cmake-3.6.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      travis_retry pip install --user pyopenssl ndg-httpsclient pyasn1
      travis_retry pip install --user yasha
    else
      travis_retry pip install pyopenssl ndg-httpsclient pyasn1
      travis_retry pip install yasha
    fi

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - export CXX=${COMPILER}
  - cmake -H../zacc -BBuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SANITIZE_MEMORY=${BUILD_SANITIZE_MEMORY}
  - cd Build

script:
  - make -j 4 zacc.system.detect zacc.tests.all
  - ls ./bin
  - ls ./lib
  - if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/lib ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export DYLD_LIBRARY_PATH=DYLD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/lib ; fi
  - ./bin/zacc.system.detect
  - ctest --output-on-failure