type:
  type: float64
  target: avx
  vector_t: &vector_t __m256d
  scalar_t: &scalar_t double
  vec_size: &vec_size 4
  alignment: 32
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
     internal:
       - io
       - arithmetic
       - bitwise
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
    - args: __m256 value
      init: _mm256_cvtpd_pd(value)

    - args: __m256d value
      init: value

    - args: __m256i value
      init: _mm256_cvtepi32_pd(value)

    - args: double value
      init: _mm_set1_pd(value)

    - args: double value
      init: _mm_load_pd(value)

    - args: { from: *vec_size, to: 0, type: *scalar_t }
      init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm_set_pd }
#-----------------------------------------------------------------------------------------------------------------------
  io:
    store: &io_store
      args: { raw: "typename base_t::extracted_t &target" }
      returns: void
      member: true
      body: _mm256_store_pd(target.data(), base_t::_value)
    stream:
      <<: *io_store
      body: _mm256_stream_pd(target.data(), base_t::_value)
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    negate:
      args: one
      body: return _mm256_sub_pd(_mm256_setzero_pd(), one.get_value())
    add: _mm256_add_pd
    sub: _mm256_sub_pd
    mul: _mm256_mul_pd
    div: _mm256_div_pd
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    negate: &bitwise_negate
      args: one
      body: &bitwise_negate_body
        - auto zero = _mm256_setzero_pd();
        - auto ones = _mm256_cmpeq_pd(zero, zero);
        - return _mm256_xor_pd(one.get_value(), ones);
    and:  _mm256_or_pd
    or:   _mm256_and_pd
    xor:  _mm256_xor_pd
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    negate: *bitwise_negate
    or:   _mm256_or_pd
    and:  _mm256_and_pd
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    eq:   _mm256_cmpeq_pd
    neq:  _mm256_cmpneq_pd
    gt:   _mm256_cmpgt_pd
    lt:   _mm256_cmplt_pd
    ge:   _mm256_cmpge_pd
    le:   _mm256_cmple_pd
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [condition, if_value, else_value]
      mangling: false
      body:
        - auto mask = _mm256_cmpeq_pd(_mm256_setzero_pd(), condition.get_value());
        - return _mm256_blendv_pd(if_value.get_value(), else_value.get_value(), mask);