//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#include "gtest/gtest.h"
#include "../impl/float64.impl.hpp"

namespace zacc { namespace None { namespace test {

// =====================================================================================================================
    TEST(None_float64_arithmetic, arithmetic_negate)
    {
        auto actual = -zfloat64(125);
        for(auto value : actual)
            EXPECT_EQ(value, (double)-125);
    }

    TEST(None_float64_arithmetic, arithmetic_add)
    {
        auto actual = zfloat64(12) + zfloat64(105);
        for(auto value : actual)
            EXPECT_EQ(value, (double)117);
    }

    TEST(None_float64_arithmetic, arithmetic_sub)
    {
        auto actual = zfloat64(124) - zfloat64(125);
        for(auto value : actual)
            EXPECT_EQ(value, (double)-1);
    }

    TEST(None_float64_arithmetic, arithmetic_mul)
    {
        auto actual = zfloat64(12) * zfloat64(9);
        for(auto value : actual)
            EXPECT_EQ(value, (double)108);
    }

    TEST(None_float64_arithmetic, arithmetic_div)
    {
        auto actual = zfloat64(124) / zfloat64(124);
        for(auto value : actual)
            EXPECT_EQ(value, (double)1);
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(None_float64_bitwise, bitwise_negate)
    {
        auto actual = ~zfloat64(255);
        for(auto value : actual)
            EXPECT_EQ(value, (double)-256);
    }

    TEST(None_float64_bitwise, bitwise_and)
    {
        auto actual = zfloat64(127) & zfloat64(64);
        for(auto value : actual)
            EXPECT_EQ(value, (double)64);
    }

    TEST(None_float64_bitwise, bitwise_or)
    {
        auto actual = zfloat64(127) | zfloat64(64);
        for(auto value : actual)
            EXPECT_EQ(value, (double)127);
    }

    TEST(None_float64_bitwise, bitwise_xor)
    {
        auto actual = zfloat64(127) ^ zfloat64(64);
        for(auto value : actual)
            EXPECT_EQ(value, (double)63);
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(None_float64_logical, logical_negate)
    {
        auto actual = !zfloat64(1);
        for(auto value : actual)
            EXPECT_EQ(value, (double)0);
    }

    TEST(None_float64_logical, logical_or)
    {
        auto actual = zfloat64(0) || zfloat64(8);
        for(auto value : actual)
            EXPECT_EQ(value, (double)8);
    }

    TEST(None_float64_logical, logical_and)
    {
        auto actual = zfloat64(0) && zfloat64(8);
        for(auto value : actual)
            EXPECT_EQ(value, (double)0);
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(None_float64_comparison, comparison_eq)
    {
        auto actual = zfloat64(0) == zfloat64(8);
        for(auto value : actual)
            EXPECT_EQ(value, (double)0);
    }

    TEST(None_float64_comparison, comparison_neq)
    {
        auto actual = zfloat64(0) != zfloat64(0);
        for(auto value : actual)
            EXPECT_EQ(value, (double)0);
    }

    TEST(None_float64_comparison, comparison_gt)
    {
        auto actual = zfloat64(0) > zfloat64(8);
        for(auto value : actual)
            EXPECT_EQ(value, (double)0);
    }

    TEST(None_float64_comparison, comparison_lt)
    {
        auto actual = zfloat64(8) < zfloat64(0);
        for(auto value : actual)
            EXPECT_EQ(value, (double)0);
    }

    TEST(None_float64_comparison, comparison_ge)
    {
        auto actual = zfloat64(0) >= zfloat64(0);
        for(auto value : actual)
            EXPECT_EQ(value, (double)1);
    }

    TEST(None_float64_comparison, comparison_le)
    {
        auto actual = zfloat64(0) <= zfloat64(0);
        for(auto value : actual)
            EXPECT_EQ(value, (double)1);
    }

// =====================================================================================================================
// =====================================================================================================================
    TEST(None_float64_conditional, vsel)
    {
        auto actual = vsel(zfloat64(1 == 1), zfloat64(2), zfloat64(3));
        for(auto value : actual)
            EXPECT_EQ(value, (double)2);
    }

// =====================================================================================================================

}}}