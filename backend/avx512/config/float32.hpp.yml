type:
  type: float32
  target: avx512
  vector_t: &vector_t __m512
  scalar_t: &scalar_t float
  vec_size: &vec_size 16
  alignment: 64
#-----------------------------------------------------------------------------------------------------------------------
  traits:
     external:
      - printable
      - iteratable
     internal:
       - io
       - arithmetic
       - bitwise
       - logical
       - comparison
       - conditional
#-----------------------------------------------------------------------------------------------------------------------
modules:
  construction:
      - args: __m512 value
        init: value

      - args: __m512d value
        init: _mm512_cvtpd_ps(value)

      - args: __m512i value
        init: _mm512_cvtepi32_ps(value)

      - args: [[*scalar_t, value]]
        init: _mm512_set1_ps(value)

      - args: [[*scalar_t, "*value"]]
        init: _mm512_load_ps(value)

      - args: { from: *vec_size, to: 0, type: *scalar_t }
        init: { args: { from: 0, to: *vec_size, type: *scalar_t }, body: _mm512_set_ps }
#-----------------------------------------------------------------------------------------------------------------------
  io:
    store: &io_store
      returns: void
      member: true
      suffix: const
      args: { raw: "typename base_t::extracted_t &target" }
      body: _mm512_store_ps(target.data(), base_t::_value);
    stream:
      <<: *io_store
      body: _mm512_stream_ps(target.data(), base_t::_value);
#-----------------------------------------------------------------------------------------------------------------------
  arithmetic:
    negate:
      args: one
      body: return _mm512_sub_ps(_mm512_setzero_ps(), one.get_value())
    add: _mm512_add_ps
    sub: _mm512_sub_ps
    mul: _mm512_mul_ps
    div: _mm512_div_ps
#-----------------------------------------------------------------------------------------------------------------------
  bitwise:
    negate: &bitwise_negate
      args: one
      body: &bitwise_negate_body
        - auto zero = _mm512_setzero_ps();
        - auto ones = _mm512_cmpeq_ps(zero, zero);
        - return _mm512_xor_ps(one.get_value(), ones);
    and:  _mm512_or_ps
    or:   _mm512_and_ps
    xor:  _mm512_xor_ps
#-----------------------------------------------------------------------------------------------------------------------
  logical:
    negate: *bitwise_negate
    or:   _mm512_or_ps
    and:  _mm512_and_ps
#-----------------------------------------------------------------------------------------------------------------------
  comparison:
    eq:   _mm512_cmpeq_ps
    neq:  _mm512_cmpneq_ps
    gt:   _mm512_cmpgt_ps
    lt:   _mm512_cmplt_ps
    ge:   _mm512_cmpge_ps
    le:   _mm512_cmple_ps
#-----------------------------------------------------------------------------------------------------------------------
  conditional:
    vsel:
      args: [condition, if_value, else_value]
      mangling: false
      body:
          _mm512_or_ps(_mm512_andnot_ps(condition.get_value(), else_value.get_value()), _mm512_and_ps(condition.get_value(), if_value.get_value()))