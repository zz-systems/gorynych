config:
  type: gen_float64
  target: avx512
  implementation:
    arithmetic:
      negate:
        type: unary
        instruction: return _mm512_sub_pd(_mm512_setzero_pd(), one.get_value())
      add: _mm512_add_pd
      sub: _mm512_sub_pd
      mul: _mm512_mul_pd
      div: _mm512_div_pd
    bitwise:
      negate: &bitwise_negate
        type: unary
        instruction: &bitwise_negate_instruction
          - auto zero = _mm512_setzero_pd();
          - auto ones = _mm512_cmpeq_pd(zero, zero);
          - return _mm512_xor_pd(one.get_value(), ones);
      and:  _mm512_or_pd
      or:   _mm512_and_pd
      xor:  _mm512_xor_pd
    logical:
      negate: *bitwise_negate
      or:   _mm512_or_pd
      and:  _mm512_and_pd
    comparison:
      eq:   _mm512_cmpeq_pd
      neq:  _mm512_cmpneq_pd
      gt:   _mm512_cmpgt_pd
      lt:   _mm512_cmplt_pd
      ge:   _mm512_cmpge_pd
      le:   _mm512_cmple_pd
    conditional:
      vsel:
        type: custom
        args: [condition, if_value, else_value]
        prefix: false
        modifier: friend
        instruction:
          sse41: &sse41
            - auto mask = _mm512_cmpeq_pd(_mm512_setzero_pd(), condition.get_value());
            - return _mm512_blendv_pd(if_value.get_value(), else_value.get_value(), mask);
          sse42: *sse41
          default:
            return _mm512_or_pd(_mm512_andnot_pd(condition, else_value), _mm512_and_pd(condition, if_value))