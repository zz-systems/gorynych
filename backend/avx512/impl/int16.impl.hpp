//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <intrin.h>
#include <type_traits>

#include "../../../common/zval.hpp"
#include "../../../common/common.hpp"
#include "../../../common/compose.hpp"
#include "../../../common/type_traits.hpp"
#include "../../../common/common_traits.hpp"

#include "../../../common/interfaces/construction.hpp"
#include "../../../common/interfaces/io.hpp"
#include "../../../common/interfaces/arithmetic.hpp"
#include "../../../common/interfaces/bitwise.hpp"
#include "../../../common/interfaces/logical.hpp"
#include "../../../common/interfaces/comparison.hpp"
#include "../../../common/interfaces/conditional.hpp"

namespace zacc { namespace None {

    template<typename composed_t>
    struct int16_construction
    {
        template<typename base_t>
        struct __impl : base_t
        {

            __impl(__m512i value) : base_t(value) {
            }

            __impl(short value) : base_t(_mm512_set1_epi8(value)) {
            }

            __impl(short *value) : base_t(_mm512_load_si128(value)) {
            }

            __impl(short arg31, short arg30, short arg29, short arg28, short arg27, short arg26, short arg25, short arg24, short arg23, short arg22, short arg21, short arg20, short arg19, short arg18, short arg17, short arg16, short arg15, short arg14, short arg13, short arg12, short arg11, short arg10, short arg9, short arg8, short arg7, short arg6, short arg5, short arg4, short arg3, short arg2, short arg1, short arg0) : base_t(_mm512_set_epi8(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31)) {
            }

        };

        template<typename base_t>
        using impl = interface::construction<__impl<base_t>, composed_t>;
    };


    template<typename composed_t>
    struct int16_io
    {
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);

            friend void io_store(typename base_t::extracted_type &target) const {
                _mm512_store_si512(target.data(), base_t::_value);
            }

            friend void io_stream(typename base_t::extracted_type &target) const {
                _mm512_stream_si512(target.data(), base_t::_value);
            }

        };

        template<typename base_t>
        using impl = interface::io<__impl<base_t>, composed_t>;
    };


    template<typename composed_t>
    struct int16_arithmetic
    {
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);

            friend composed_t arithmetic_negate(composed_t one) {
                return _mm512_sub_epi32(_mm512_setzero_epi32(), one.get_value());
            }

            friend composed_t arithmetic_add(composed_t one, composed_t other) {
                return _mm512_add_epi32(one.get_value(), other.get_value());
            }

            friend composed_t arithmetic_sub(composed_t one, composed_t other) {
                return _mm512_sub_epi32(one.get_value(), other.get_value());
            }

        };

        template<typename base_t>
        using impl = interface::arithmetic<__impl<base_t>, composed_t>;
    };


    template<typename composed_t>
    struct int16_bitwise
    {
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);

            friend composed_t bitwise_negate(composed_t one) {
                auto zero = _mm512_setzero_si128();
                auto ones = _mm512_cmpeq_epi32(zero, zero);
                return _mm512_xor_si128(one.get_value(), ones);
            }

            friend composed_t bitwise_and(composed_t one, composed_t other) {
                return _mm512_or_epi32(one.get_value(), other.get_value());
            }

            friend composed_t bitwise_or(composed_t one, composed_t other) {
                return _mm512_and_epi32(one.get_value(), other.get_value());
            }

            friend composed_t bitwise_xor(composed_t one, composed_t other) {
                return _mm512_xor_si128(one.get_value(), other.get_value());
            }

            friend composed_t bitwise_sll(composed_t one, composed_t other) {
                return _mm512_sll_epi32(one.get_value(), other.get_value());
            }

            friend composed_t bitwise_srl(composed_t one, composed_t other) {
                return _mm512_srl_epi32(one.get_value(), other.get_value());
            }

            friend composed_t bitwise_slli(const composed_t one, const size_t other) {
                return _mm512_slli_epi32(const composed_t one, const size_t other);
            }

            friend composed_t bitwise_srli(const composed_t one, const size_t other) {
                return _mm512_srli_epi32(const composed_t one, const size_t other);
            }

        };

        template<typename base_t>
        using impl = interface::bitwise<__impl<base_t>, composed_t>;
    };


    template<typename composed_t>
    struct int16_logical
    {
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);

            friend composed_t logical_negate(composed_t one) {
                auto zero = _mm512_setzero_si128();
                auto ones = _mm512_cmpeq_epi32(zero, zero);
                return _mm512_xor_si128(one.get_value(), ones);
            }

            friend composed_t logical_or(composed_t one, composed_t other) {
                return _mm512_or_epi32(one.get_value(), other.get_value());
            }

            friend composed_t logical_and(composed_t one, composed_t other) {
                return _mm512_and_epi32(one.get_value(), other.get_value());
            }

        };

        template<typename base_t>
        using impl = interface::logical<__impl<base_t>, composed_t>;
    };


    template<typename composed_t>
    struct int16_comparison
    {
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);

            friend composed_t comparison_eq(composed_t one, composed_t other) {
                return _mm512_cmpeq_epi32(one.get_value(), other.get_value());
            }

            friend composed_t comparison_neq(composed_t one, composed_t other) {
                return _mm512_cmpneq_epi32(one.get_value(), other.get_value());
            }

            friend composed_t comparison_gt(composed_t one, composed_t other) {
                return _mm512_cmpgt_epi32(one.get_value(), other.get_value());
            }

            friend composed_t comparison_lt(composed_t one, composed_t other) {
                return _mm512_cmplt_epi32(one.get_value(), other.get_value());
            }

            friend composed_t comparison_ge(composed_t one, composed_t other) {
                return _mm512_cmpge_epi32(one.get_value(), other.get_value());
            }

            friend composed_t comparison_le(composed_t one, composed_t other) {
                return _mm512_cmple_epi32(one.get_value(), other.get_value());
            }

        };

        template<typename base_t>
        using impl = interface::comparison<__impl<base_t>, composed_t>;
    };


    template<typename composed_t>
    struct int16_conditional
    {
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);

            friend composed_t vsel(composed_t condition, composed_t if_value, composed_t else_value) {
                return _mm512_or_si128(_mm512_andnot_si128(condition.get_value(), else_value.get_value()), _mm512_and_si128(condition.get_value(), if_value.get_value()));
            }

        };

        template<typename base_t>
        using impl = interface::conditional<__impl<base_t>, composed_t>;
    };


    struct __zint16
        : public zval<__m512i, short, 32, 64>
    {
        FORWARD2(__zint16, zval);
    };

    struct zint16;

    struct zint16 : public compose
        <
            printable::impl,
            iteratable::impl,
            int16_io<zint16>::impl,
            int16_arithmetic<zint16>::impl,
            int16_bitwise<zint16>::impl,
            int16_logical<zint16>::impl,
            int16_comparison<zint16>::impl,
            int16_conditional<zint16>::impl,
            int16_construction<zint16>::impl,

            composable<__zint16>::template type
        >
    {
        FORWARD2(zint16, compose);
    };

}}