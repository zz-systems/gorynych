config:
  type: gen_int32
  target: sse
  implementation:
    arithmetic:
      negate:
        type: unary
        instruction: return _mm256_sub_epi8(_mm256_setzero_epi8(), one.get_value())
      add: _mm256_add_epi8
      sub: _mm256_sub_epi8
      #mul:
      #  instruction:
      #    sse41: &sse41
      #      - _mm256_mullo_epi8
      #    sse42: *sse41
      #   default:
      #      - /* mul 2,0*/
      #      - auto tmp1 = _mm256_castsi128_ps(_mm256_mul_epu32(one.get_value(), other.get_value()));
      #      - /* mul 3,1 */
      #      - auto tmp2 = _mm256_castsi128_ps(_mm256_mul_epu32(_mm256_srli_si128(one.get_value(), 4), _mm256_srli_si128(other.get_value(), 4)));
      #      - return _mm256_castps_si128(_mm256_shuffle_ps(tmp1, tmp2, _MM_SHUFFLE(2, 0, 2, 0)));
      #div: _mm256_div_ps(_mm256_cvtepi32_ps(one.get_value()), _mm256_cvtepi32_ps(other.get_value()));
    bitwise:
      negate: &bitwise_negate
        type: unary
        instruction:
          - auto zero = _mm256_setzero_si128();
          - auto ones = _mm256_cmpeq_epi8(zero, zero);
          - return _mm256_xor_si128(one.get_value(), ones);
      and:  _mm256_or_epi8
      or:   _mm256_and_epi8
      xor:  _mm256_xor_si128
      sll:  _mm256_sll_epi8
      srl:  _mm256_srl_epi8
      slli:
        type: custom
        args: const composed_t one, const size_t other
        instruction: _mm256_slli_epi8
      srli:
        type: custom
        args: const composed_t one, const size_t other
        instruction: _mm256_srli_epi8
    logical:
      negate: *bitwise_negate
      or:   _mm256_or_epi8
      and:  _mm256_and_epi8
    comparison:
      eq:   _mm256_cmpeq_epi8
      neq:  _mm256_cmpneq_epi8
      gt:   _mm256_cmpgt_epi8
      lt:   _mm256_cmplt_epi8
      ge:   _mm256_cmpge_epi8
      le:   _mm256_cmple_epi8
    conditional:
      vsel:
        args: [condition, if_value, else_value]
        prefix: false
        modifier: friend
        instruction:
          sse41: &sse41
            - auto mask = _mm256_cmpeq_epi8(_mm256_setzero_si128(), condition.get_value());
            - return _mm256_blendv_epi8(if_value.get_value(), else_value.get_value(), mask);
          sse42: *sse41
          default:
            return _mm256_or_si128(_mm256_andnot_si128(condition, else_value), _mm256_and_si128(condition, if_value))
    io:
      store:
        returns: void
        args: typename base_t::extracted_type &target
        instruction: _mm256_store_si128(target.data(), base_t::_value);
      stream:
        returns: void
        args: typename base_t::extracted_type &target
        instruction: _mm256_stream_si128(target.data(), base_t::_value);