//---------------------------------------------------------------------------------
//
//  This is an autogenerated file. Do not edit!
//
//---------------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2016 Sergej Zuyev (sergej.zuyev - at - zz-systems.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------------

#pragma once

#include <intrin.h>
#include <type_traits>

#include "../../../common/zval.hpp"
#include "../../../common/common.hpp"
#include "../../../common/compose.hpp"
#include "../../../common/type_traits.hpp"
#include "../../../common/common_traits.hpp"

#include "../../../common/interfaces/construction.hpp"
#include "../../../common/interfaces/io.hpp"
#include "../../../common/interfaces/arithmetic.hpp"
#include "../../../common/interfaces/bitwise.hpp"
#include "../../../common/interfaces/logical.hpp"
#include "../../../common/interfaces/comparison.hpp"
#include "../../../common/interfaces/conditional.hpp"

/**
 * @brief int32 implementation for the None branch
 * provides unified access to 8 'int' values
 */

namespace zacc { namespace None {

    // =================================================================================================================
    /**
     * @name construction operations
     */
    ///@{

    /**
     * @brief construction
     * @relates int32
     * @remark None
     */
    template<typename composed_t>
    struct int32_construction
    {

        /**
         * @brief construction basic interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        struct __impl : base_t
        {


            /**
             * @brief construction default branch
             * @relates int32
             * @remark None - default
             */
            __impl(__m256i value) : base_t(value) {
            }


            /**
             * @brief construction default branch
             * @relates int32
             * @remark None - default
             */
            __impl(int value) : base_t(_mm256_set1_epi8(value)) {
            }


            /**
             * @brief construction default branch
             * @relates int32
             * @remark None - default
             */
            __impl(int *value) : base_t(_mm256_load_si128(value)) {
            }


            /**
             * @brief construction default branch
             * @relates int32
             * @remark None - default
             */
            __impl(int arg7, int arg6, int arg5, int arg4, int arg3, int arg2, int arg1, int arg0) : base_t(_mm256_set_epi8(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)) {
            }

        };

        /**
         * @brief construction public interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        using impl = interface::construction<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name io operations
     */
    ///@{

    /**
     * @brief io
     * @relates int32
     * @remark None
     */
    template<typename composed_t>
    struct int32_io
    {

        /**
         * @brief io basic interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief io default branch
             * @relates int32
             * @remark None - default
             */
            void io_store(typename base_t::extracted_t &target) const {
                _mm256_store_si128(target.data(), base_t::_value);
            }


            /**
             * @brief io default branch
             * @relates int32
             * @remark None - default
             */
            void io_stream(typename base_t::extracted_t &target) const {
                _mm256_stream_si128(target.data(), base_t::_value);
            }

        };

        /**
         * @brief io public interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        using impl = interface::io<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name arithmetic operations
     */
    ///@{

    /**
     * @brief arithmetic
     * @relates int32
     * @remark None
     */
    template<typename composed_t>
    struct int32_arithmetic
    {

        /**
         * @brief arithmetic basic interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief arithmetic default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t arithmetic_negate(composed_t one) {
                return _mm256_sub_epi32(_mm256_setzero_epi32(), one.get_value());
            }


            /**
             * @brief arithmetic default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t arithmetic_add(composed_t one, composed_t other) {
                return _mm256_add_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief arithmetic default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t arithmetic_sub(composed_t one, composed_t other) {
                return _mm256_sub_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief arithmetic default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t arithmetic_mul(composed_t one, composed_t other) {
                return _mm256_mullo_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief arithmetic default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t arithmetic_div(composed_t one, composed_t other) {
                return _mm256_div_ps(_mm256_cvtepi32_ps(one.get_value()), _mm256_cvtepi32_ps(other.get_value()));
            }

        };

        /**
         * @brief arithmetic public interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        using impl = interface::arithmetic<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name bitwise operations
     */
    ///@{

    /**
     * @brief bitwise
     * @relates int32
     * @remark None
     */
    template<typename composed_t>
    struct int32_bitwise
    {

        /**
         * @brief bitwise basic interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_negate(composed_t one) {
                auto zero = _mm256_setzero_si128();
                auto ones = _mm256_cmpeq_epi32(zero, zero);
                return _mm256_xor_si128(one.get_value(), ones);
            }


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_and(composed_t one, composed_t other) {
                return _mm256_or_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_or(composed_t one, composed_t other) {
                return _mm256_and_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_xor(composed_t one, composed_t other) {
                return _mm256_xor_si128(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_sll(composed_t one, composed_t other) {
                return _mm256_sll_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_srl(composed_t one, composed_t other) {
                return _mm256_srl_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_slli(const composed_t one, const size_t other) {
                return _mm256_slli_epi32(const composed_t one, const size_t other);
            }


            /**
             * @brief bitwise default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t bitwise_srli(const composed_t one, const size_t other) {
                return _mm256_srli_epi32(const composed_t one, const size_t other);
            }

        };

        /**
         * @brief bitwise public interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        using impl = interface::bitwise<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name logical operations
     */
    ///@{

    /**
     * @brief logical
     * @relates int32
     * @remark None
     */
    template<typename composed_t>
    struct int32_logical
    {

        /**
         * @brief logical basic interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief logical default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t logical_negate(composed_t one) {
                auto zero = _mm256_setzero_si128();
                auto ones = _mm256_cmpeq_epi32(zero, zero);
                return _mm256_xor_si128(one.get_value(), ones);
            }


            /**
             * @brief logical default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t logical_or(composed_t one, composed_t other) {
                return _mm256_or_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief logical default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t logical_and(composed_t one, composed_t other) {
                return _mm256_and_epi32(one.get_value(), other.get_value());
            }

        };

        /**
         * @brief logical public interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        using impl = interface::logical<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name comparison operations
     */
    ///@{

    /**
     * @brief comparison
     * @relates int32
     * @remark None
     */
    template<typename composed_t>
    struct int32_comparison
    {

        /**
         * @brief comparison basic interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief comparison default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t comparison_eq(composed_t one, composed_t other) {
                return _mm256_cmpeq_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t comparison_neq(composed_t one, composed_t other) {
                return _mm256_cmpneq_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t comparison_gt(composed_t one, composed_t other) {
                return _mm256_cmpgt_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t comparison_lt(composed_t one, composed_t other) {
                return _mm256_cmplt_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t comparison_ge(composed_t one, composed_t other) {
                return _mm256_cmpge_epi32(one.get_value(), other.get_value());
            }


            /**
             * @brief comparison default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t comparison_le(composed_t one, composed_t other) {
                return _mm256_cmple_epi32(one.get_value(), other.get_value());
            }

        };

        /**
         * @brief comparison public interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        using impl = interface::comparison<__impl<base_t>, composed_t>;
    };

    ///@}


    // =================================================================================================================
    /**
     * @name conditional operations
     */
    ///@{

    /**
     * @brief conditional
     * @relates int32
     * @remark None
     */
    template<typename composed_t>
    struct int32_conditional
    {

        /**
         * @brief conditional basic interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        struct __impl : base_t
        {
            FORWARD(__impl);


            /**
             * @brief conditional default branch
             * @relates int32
             * @remark None - default
             */
            friend composed_t vsel(composed_t condition, composed_t if_value, composed_t else_value) {
                return _mm256_blendv_epi8(if_value.get_value(), else_value.get_value(), condition.get_value());
            }

        };

        /**
         * @brief conditional public interface implementation
         * @relates int32
         * @remark None
         */
        template<typename base_t>
        using impl = interface::conditional<__impl<base_t>, composed_t>;
    };

    ///@}


    // Type composition ================================================================================================

    /**
     * @name int32 composition
     */
    ///@{

    /**
     * @brief zval parametrization using
     * - '__m256i' as underlying vector type
     * - 'int' as scalar type
     * - '8' as vector size
     * - '32' as alignment
     * @relates int32
     * @remark None
     */
    template<uint64_t capability>
    struct __zval_int32
    {
        using zval_t = zval<__m256i, int, 8, 32, capability>;

        struct impl : public zval_t
        {
            FORWARD2(impl, zval_t);
        };
    };
    /**
     * @brief zval composition
     * @relates int32
     * @remark None
     */
    template<uint64_t capability>
    struct __zint32
    {
        struct impl;

        using zval_t = typename __zval_int32<capability>::impl;
        using composition_t = compose
        <
            printable::impl,
            iteratable::impl,
            int32_io<impl>::template impl,
            int32_arithmetic<impl>::template impl,
            int32_bitwise<impl>::template impl,
            int32_logical<impl>::template impl,
            int32_comparison<impl>::template impl,
            int32_conditional<impl>::template impl,
            int32_construction<impl>::template impl,

            composable<zval_t>::template type
        >;

        struct impl : public composition_t
        {
            FORWARD2(impl, composition_t);
        };
    };

    template<uint64_t capability = 0xFFFF'FFFF'FFFF'FFFF>
    using zint32 = typename __zint32<capability>::impl;

    ///@}
}}